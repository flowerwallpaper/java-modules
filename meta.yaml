Level0:
  Module0:
    01_demo:
      _readme: "# 01 Demo\n\nFor our first Java program, we're going to run a program\
        \ that creates a\nrectangle on the screen, but to do that, you will have to\
        \ first learn how to\nwork with code files in the LEAGUE's development environment.\
        \ \n\nVisit this [Guide to Using Module Repositories](https://curriculum.jointheleague.org/java/module_repos.html)\
        \ and follow the instructions to fork this module and run the demo program,\
        \ or watch the video below. For convience, here is the green button you'll\
        \ have to press to fork the module:\n\n<center>{{ forkrepo(fm_level, fm_module)\
        \ }}</center><br/>\n\n<center><iframe width=\"700\" height=\"525\" src=\"\
        https://www.youtube.com/embed/svTv-EmyU5c?si=7ZW8UjqhLbThYNSg\" title=\"YouTube\
        \ video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\
        \ encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"\
        strict-origin-when-cross-origin\" allowfullscreen></iframe></center>\n\n*If\
        \ you have already started a codespace,* clicking on the green \"Code\" button\
        \ will give you a \npopup like this:\n\n<center><img src=\"./multiple_codespaces.png\"\
        \ width=\"400px\"></center> \n\nJust click on one of the crazy names to open\
        \ up that codespace. \n\nWhen you are done, you will have started a java program\
        \ to draw a red square. \n\n<center><img src=\"./images/red_square.png\" width=\"\
        500px\"/></center> \n\nNow go to the next lesson, **02 Code Flow**. "
      assignments:
      - assignment: 01_demo
        dir: levels/Level0/Module0/src/_01_demo
        lesson: 01_demo
        level: Level0
        module: Module0
        oassignment: 01_demo
        opath: levels/Level0/Module0/src/_01_demo
        resources:
        - levels/Level0/Module0/src/_01_demo/images/multiple_codespaces.png
        - levels/Level0/Module0/src/_01_demo/images/red_square.png
        text: "# 01 Demo\n\nFor our first Java program, we're going to run a program\
          \ that creates a\nrectangle on the screen, but to do that, you will have\
          \ to first learn how to\nwork with code files in the LEAGUE's development\
          \ environment. \n\nVisit this [Guide to Using Module Repositories](https://curriculum.jointheleague.org/java/module_repos.html)\
          \ and follow the instructions to fork this module and run the demo program,\
          \ or watch the video below. For convience, here is the green button you'll\
          \ have to press to fork the module:\n\n<center>{{ forkrepo(fm_level, fm_module)\
          \ }}</center><br/>\n\n<center><iframe width=\"700\" height=\"525\" src=\"\
          https://www.youtube.com/embed/svTv-EmyU5c?si=7ZW8UjqhLbThYNSg\" title=\"\
          YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay;\
          \ clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\
          \ referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe></center>\n\
          \n*If you have already started a codespace,* clicking on the green \"Code\"\
          \ button will give you a \npopup like this:\n\n<center><img src=\"./multiple_codespaces.png\"\
          \ width=\"400px\"></center> \n\nJust click on one of the crazy names to\
          \ open up that codespace. \n\nWhen you are done, you will have started a\
          \ java program to draw a red square. \n\n<center><img src=\"./images/red_square.png\"\
          \ width=\"500px\"/></center> \n\nNow go to the next lesson, **02 Code Flow**. "
        title: 01 Demo
    02_code_flow:
      _readme: "# Code Flow\n\nIn this lesson you will learn to use loops and logical\
        \ conditions\nto make choices. \n\nTo complete these lessons, you should:\n\
        \n* Visit your Github account on [Github.com](https://github.com)\n* Look\
        \ for the Repository named `Level0-Module0`\n* Click on the green \"Code\"\
        \ button.\n* Select the \"Codespaces\" tab\n* If you have a Green button that\
        \ reads \"Create codespace on main\", click on it\n* If you don't have that\
        \ green button, you have a running code space. Either open the window where\
        \ it is running, or click on the name of the code space in the popup window.\
        \   \n\n"
      assignments:
      - assignment: 02_code_flow
        dir: levels/Level0/Module0/src/_02_code_flow/_1_robot_square
        lesson: 02_code_flow
        level: Level0
        module: Module0
        oassignment: 1_robot_square
        opath: levels/Level0/Module0/src/_02_code_flow/_1_robot_square
        resources:
        - levels/Level0/Module0/src/_02_code_flow/_1_robot_square/.web/robotSquare.png
        text: '


          # Robot Square


          <hr/>

          <img alt="square image" src="./images/robotSquare.png"/>


          ## Goal:


          Use a loop to draw a square using a Robot.


          ## Steps:


          1. Find the RobotSquare recipe program ( RobotSquare.java ) and open it
          using Eclipse.

          2. Follow the instructions in the program to help you make a Robot draw
          a square.


          '
        title: 02 Code Flow
      - assignment: 02_code_flow
        dir: levels/Level0/Module0/src/_02_code_flow/_2_robot_spiral
        lesson: 02_code_flow
        level: Level0
        module: Module0
        oassignment: 2_robot_spiral
        opath: levels/Level0/Module0/src/_02_code_flow/_2_robot_spiral
        resources:
        - levels/Level0/Module0/src/_02_code_flow/_2_robot_spiral/.web/spiral.png
        text: '


          # Robot Spiral


          <hr/>

          <img alt="spiral image" src="./images/spiral.png"/>


          ## Goal:


          Use a loop to draw a spiral pattern using a Robot


          ## Steps:


          1. Find the RobotSpiral recipe program ( RobotSpiral.java ) and open it
          using Eclipse.

          2. Follow the instructions in the program to help you make a Robot draw
          a spiral pattern.




          '
        title: 02 Code Flow
      - assignment: 02_code_flow
        dir: levels/Level0/Module0/src/_02_code_flow/_3_pentagon_crazy
        lesson: 02_code_flow
        level: Level0
        module: Module0
        oassignment: 3_pentagon_crazy
        opath: levels/Level0/Module0/src/_02_code_flow/_3_pentagon_crazy
        resources:
        - levels/Level0/Module0/src/_02_code_flow/_3_pentagon_crazy/.web/pentagonCrazy.png
        text: '


          # Pentagon Crazy


          <hr/>

          <img alt="pentagon image" src="./images/pentagonCrazy.png"/>


          ## Goal:


          Use int variables in a loop to draw a pentagonal pattern using a Robot


          ## Steps:


          1. Find the Pentagon Crazy recipe program ( PentagonCrazy.java ) and open
          it using Eclipse.

          2. Follow the instructions in the program to help you make a Robot draw
          a pentagonal pattern.




          '
        title: 02 Code Flow
      - assignment: 02_code_flow
        dir: levels/Level0/Module0/src/_02_code_flow/_4_flaming_ninja_star
        lesson: 02_code_flow
        level: Level0
        module: Module0
        oassignment: 4_flaming_ninja_star
        opath: levels/Level0/Module0/src/_02_code_flow/_4_flaming_ninja_star
        resources:
        - levels/Level0/Module0/src/_02_code_flow/_4_flaming_ninja_star/.web/flamingNinja1.png
        - levels/Level0/Module0/src/_02_code_flow/_4_flaming_ninja_star/.web/flamingNinja2.png
        - levels/Level0/Module0/src/_02_code_flow/_4_flaming_ninja_star/.web/flamingNinja3.png
        text: '


          # Flaming Ninja Star


          <hr/>

          <img alt="Flaming Ninja Star image" src="./images/flamingNinja3.png"/>


          ## Goal:


          Use int variables in a loop to draw a flaming ninja star.


          ## Steps:


          1. Find the Flaming Ninja Star recipe program ( FlamingNinjaStar.java )
          and open it using Eclipse.

          2. Follow the instructions in the program to draw the star.

          3. The first time you run the program, it should look like this

          4. After you add the color, it should look like this

          5. Using a loop to repeat the pattern, the flaming star will be complete.




          '
        title: 02 Code Flow
    03_print_and_popups:
      _readme: ''
      assignments:
      - assignment: 03_print_and_popups
        dir: levels/Level0/Module0/src/_03_print_and_popups/_1_greeter
        lesson: 03_print_and_popups
        level: Level0
        module: Module0
        oassignment: 1_greeter
        opath: levels/Level0/Module0/src/_03_print_and_popups/_1_greeter
        resources:
        - levels/Level0/Module0/src/_03_print_and_popups/_1_greeter/.web/greeter.png
        text: '


          # Greeter


          <hr/>

          <img src="./images/greeter.png"/>


          ## Goal:


          Print a global greeting to the console. Then use input and message dialogs
          to join Strings and send the user a friendly greeting!


          ## Steps:


          1. Create a new class called Greeter.

          2. Add a main method. Eclipse has a helpful schortcut - main

          3. Print "Hello World!" to the console. Eclipse has a helpful schortcut
          - syso

          4. Now ask the user for their name. The code looks like this:

          ```


          String input = JOptionPane.showInputDialog("What is your name?");

          ```

          5. Join their name to the end of this greeting. The code looks like this.

          ```


          JOptionPane.showMessageDialog(null,"Hello "+input);

          ```




          '
        title: 03 Print And Popups
      - assignment: 03_print_and_popups
        dir: levels/Level0/Module0/src/_03_print_and_popups/_2_madlibs
        lesson: 03_print_and_popups
        level: Level0
        module: Module0
        oassignment: 2_madlibs
        opath: levels/Level0/Module0/src/_03_print_and_popups/_2_madlibs
        resources:
        - levels/Level0/Module0/src/_03_print_and_popups/_2_madlibs/.web/madlibs.png
        text: '


          # Madlibs


          <hr/>

          <img alt="madlibs image" src="./images/madlibs.png"/>


          ## Goal:


          Have you ever played Madlibs? You will get to use input and message dialogs
          to join Strings and build your own Madlib story.


          ## Steps:


          1. Find the Madlibs ecipe program ( MadlibsOfTheAmazon.java ) and open it
          using Eclipse.

          2. Follow the instructions in the program to help you make a hilarious story
          about crossing a piranha-infested river.

          3. You can invent your own madlib story too!




          '
        title: 03 Print And Popups
      - assignment: 03_print_and_popups
        dir: levels/Level0/Module0/src/_03_print_and_popups/_3_world_domination
        lesson: 03_print_and_popups
        level: Level0
        module: Module0
        oassignment: 3_world_domination
        opath: levels/Level0/Module0/src/_03_print_and_popups/_3_world_domination
        resources:
        - levels/Level0/Module0/src/_03_print_and_popups/_3_world_domination/.web/worldDomination.jpg
        text: '


          # World Domination


          <hr/>

          <img alt="world domination image" src="./images/worldDomination.jpg"/>


          ## Goal:


          Use an if / else statement and pop-ups to find out if a person might get
          to rule the world!


          ## Steps:


          1. Find the World Domination recipe program ( WorldDomination.java ) and
          open it using Eclipse.

          2. Follow the instructions in the program to find out if a person might
          get to rule the world!.




          '
        title: 03 Print And Popups
      - assignment: 03_print_and_popups
        dir: levels/Level0/Module0/src/_03_print_and_popups/_4_quiz_game
        lesson: 03_print_and_popups
        level: Level0
        module: Module0
        oassignment: 4_quiz_game
        opath: levels/Level0/Module0/src/_03_print_and_popups/_4_quiz_game
        resources:
        - levels/Level0/Module0/src/_03_print_and_popups/_4_quiz_game/.web/quiz.png
        text: '


          # Quiz Game


          <hr/>

          <img alt="quiz image" src="./images/quiz.png"/>


          ## Goal:


          Use pop-ups to ask the user "quiz" questions. Use if / else to check their
          answers.


          ## Steps:


          1. Find the Quiz Game recipe program ( QuizGame.java ) and open it using
          Eclipse.

          2. Follow the instructions in the program to code this game.




          '
        title: 03 Print And Popups
      - assignment: 03_print_and_popups
        dir: levels/Level0/Module0/src/_03_print_and_popups/_5_awesome_or_not
        lesson: 03_print_and_popups
        level: Level0
        module: Module0
        oassignment: 5_awesome_or_not
        opath: levels/Level0/Module0/src/_03_print_and_popups/_5_awesome_or_not
        resources:
        - levels/Level0/Module0/src/_03_print_and_popups/_5_awesome_or_not/.web/awesome.jpg
        text: '


          # Awesome or Not


          <hr/>

          <img alt="awesome image" src="./images/awesome.jpg"/>


          ## Goal:


          Use random numbers and pop-ups to respond to a user''s input


          ## Steps:


          1. Find the Awesome or Not recipe program ( AwesomeOrNot.java ) and open
          it using Eclipse.

          2. Follow the instructions in the program to code this game.




          '
        title: 03 Print And Popups
    04_amazing_games:
      _readme: ''
      assignments:
      - assignment: 04_amazing_games
        dir: levels/Level0/Module0/src/_04_amazing_games/_1_scary_maze
        lesson: 04_amazing_games
        level: Level0
        module: Module0
        oassignment: 1_scary_maze
        opath: levels/Level0/Module0/src/_04_amazing_games/_1_scary_maze
        resources:
        - levels/Level0/Module0/src/_04_amazing_games/_1_scary_maze/.web/standardMaze.png
        text: '


          # Scary Maze


          <hr/>

          <img alt="maze image" src="./images/standardMaze.png"/>


          ## Goal:


          Design and build a maze game


          ## Steps:


          1. Find the Scary Maze recipe program ( ScaryMaze.java ) and open it using
          Eclipse.

          2. Follow the instructions in the program to help you design and build a
          maze game.




          '
        title: 04 Amazing Games
      - assignment: 04_amazing_games
        dir: levels/Level0/Module0/src/_04_amazing_games/_2_dragon_fight
        lesson: 04_amazing_games
        level: Level0
        module: Module0
        oassignment: 2_dragon_fight
        opath: levels/Level0/Module0/src/_04_amazing_games/_2_dragon_fight
        resources:
        - levels/Level0/Module0/src/_04_amazing_games/_2_dragon_fight/.web/dragonPicture.jpg
        text: '


          # Dragon Fight


          <hr/>

          <img alt="dragon fight image" src="./images/dragonPicture.jpg"/>


          ## Goal:


          Use random numbers and pop-ups in a while loop to fight a dragon for its
          treasure.


          ## Steps:


          1. Find the Dragon Fight recipe program ( DragonFight.java ) and open it
          using Eclipse.

          2. Follow the instructions in the program to code this game.




          '
        title: 04 Amazing Games
    99_extra:
      _readme: '


        # Triangle Shell


        <hr/>

        <img alt="Star Show image" src="./images/triangleShell.png"/>


        ## Goal:


        Use int variables and a loop to draw a pattern with triangles.


        ## Steps:


        1. Find the Triangle Shell recipe program ( TriangleShell.java ) and open
        it using Eclipse.

        2. Follow the instructions in the program to draw the pattern.

        3. The first time you run the program, it should look like this

        4. After you add all the triangles, it should look something like this




        '
      assignments:
      - assignment: 99_extra
        dir: levels/Level0/Module0/src/_99_extra
        lesson: 99_extra
        level: Level0
        module: Module0
        oassignment: 99_extra
        opath: levels/Level0/Module0/src/_99_extra
        resources:
        - levels/Level0/Module0/src/_99_extra/.web/triangle.png
        - levels/Level0/Module0/src/_99_extra/.web/decagon.png
        - levels/Level0/Module0/src/_99_extra/.web/oneStar.png
        - levels/Level0/Module0/src/_99_extra/.web/triangleShell.png
        - levels/Level0/Module0/src/_99_extra/.web/starShow.png
        - levels/Level0/Module0/src/_99_extra/.web/square.png
        text: '


          # Triangle Shell


          <hr/>

          <img alt="Star Show image" src="./images/triangleShell.png"/>


          ## Goal:


          Use int variables and a loop to draw a pattern with triangles.


          ## Steps:


          1. Find the Triangle Shell recipe program ( TriangleShell.java ) and open
          it using Eclipse.

          2. Follow the instructions in the program to draw the pattern.

          3. The first time you run the program, it should look like this

          4. After you add all the triangles, it should look something like this




          '
        title: 99 Extra
    _readme: "# Level0-Module0\n\nLevel 0 has coding exercises, which we call \"recipies\"\
      , for students who have just started programming. \n\nWith these recipes, students\
      \ will learn how to:\n\n1. Draw shapes and images using Processing\n2. Control\
      \ the flow of code using if statements and loops \n3. Print Strings and use\
      \ dialogs to interact with a user \n4. Build simple games using skills learned\n\
      \n## Navigating the Lessons\n\nIn the LEAGUE's online Java curriculum, the lessons\
      \ are organized\ninto _levels_, _modules_, _lessons_ and _assignments_.  Every\
      \ level has a\nwhole website, like this one.  Inside the level are modules.Modules\
      \ are\nnamed with a number at the end, like \"Module 0\", and they will have\
      \ links\nwith a large bold title on the left side of the page, which you can\
      \ see on\nthe left side menu in this page. \n\nAt the top of this page you will\
      \ see three colored buttons. These buttons are\nhow you will get access to the\
      \ codes for your lessons and create web based\neditors for completing your lessons.\
      \ \n\n\n\nIf you visit one of the assignment pages, like [this one](http://localhost:8080/Level0/lessons/Module0/02_code_flow/)\n\
      you will see a  <img style=\"vertical-align:middle\" src=\"https://github.com/league-curriculum/league-curriculum/blob/master/docs/src/java/source_link.png?raw=true\"\
      \ height=\"25px\">\n link. This link will take you into the Module repositopry,\
      \ to the specific\ndirectory that has the assignment you are working on. \n\n\
      Remember these two buttons; you're going to be using them in the first lesson!\n\
      \n## Start the First Assigment\n\nTo Start the first assignment, click on the\
      \ first lesson in the left sidemenu. The lesson is named '01 Demo', just  under\
      \ 'Module0'\n\n"
  Module1:
    01_variables:
      _readme: "\n# What is a Variable?\n\n- Variables are used to hold values in\
        \ your Java program\n- Before you can put a value into a variable you must\
        \ declare, or create it. How?\n  - First describe the \"type\" of information\
        \ it will hold, for example:\n    - String or int\n  - Next give it a \"meaningful\"\
        \ name or identifier, for example:\n    - nameOfSchool or numberOfStudents\n\
        \    \n    ```java\n    String nameOfSchool;\n    Int numberOfStudents;\n\
        \    ```\n\n- Rules for naming variables\n  - Start with a lowercase letter\n\
        \  - Use camel case\n  - Can include numbers and underscores, but not spaces\
        \ or special characters\n  - Should be meaningful, i.e. self-documenting\n\
        \  - You declare a variable once, but you can use it many times in the code\n\
        \n## Using a Variable\n\nAfter you have declared a variable, you need to give\
        \ it a value before it can be useful to your program. The first time you put\
        \ a value in a variable, is called \"variable initialization\". See example\
        \ below:\n\n```java\nnameOfSchool = \"Queen Mary\";\nnumberOfStudents = 1000;\n\
        ```\n\n**Note:** The type of information you put into the variable must match\
        \ the type you gave the variable when you declared it.\n\nYou can also initialize\
        \ a variable in the same line of code that you declared it as follows:\n\n\
        ```java\nString nameOfSchool = \"Queen Mary\";\nInt numberOfStudents = 1000;\n\
        ```\n\nIf you try to use a variable that has no value, you might get an error\
        \ like this:\n\n```\nException in thread \"main\" java.lang.NullPointerException\n\
        ```\n"
      assignments:
      - assignment: 01_variables
        dir: levels/Level0/Module1/src/_01_variables
        lesson: 01_variables
        level: Level0
        module: Module1
        oassignment: 01_variables
        opath: levels/Level0/Module1/src/_01_variables
        resources:
        - levels/Level0/Module1/src/_01_variables/.web/Variables1.png
        - levels/Level0/Module1/src/_01_variables/.web/Variables2.png
        text: "\n# What is a Variable?\n\n- Variables are used to hold values in your\
          \ Java program\n- Before you can put a value into a variable you must declare,\
          \ or create it. How?\n  - First describe the \"type\" of information it\
          \ will hold, for example:\n    - String or int\n  - Next give it a \"meaningful\"\
          \ name or identifier, for example:\n    - nameOfSchool or numberOfStudents\n\
          \    \n    ```java\n    String nameOfSchool;\n    Int numberOfStudents;\n\
          \    ```\n\n- Rules for naming variables\n  - Start with a lowercase letter\n\
          \  - Use camel case\n  - Can include numbers and underscores, but not spaces\
          \ or special characters\n  - Should be meaningful, i.e. self-documenting\n\
          \  - You declare a variable once, but you can use it many times in the code\n\
          \n## Using a Variable\n\nAfter you have declared a variable, you need to\
          \ give it a value before it can be useful to your program. The first time\
          \ you put a value in a variable, is called \"variable initialization\".\
          \ See example below:\n\n```java\nnameOfSchool = \"Queen Mary\";\nnumberOfStudents\
          \ = 1000;\n```\n\n**Note:** The type of information you put into the variable\
          \ must match the type you gave the variable when you declared it.\n\nYou\
          \ can also initialize a variable in the same line of code that you declared\
          \ it as follows:\n\n```java\nString nameOfSchool = \"Queen Mary\";\nInt\
          \ numberOfStudents = 1000;\n```\n\nIf you try to use a variable that has\
          \ no value, you might get an error like this:\n\n```\nException in thread\
          \ \"main\" java.lang.NullPointerException\n```\n"
        title: 01 Variables
    02_colors:
      _readme: ''
      assignments:
      - assignment: 02_colors
        dir: levels/Level0/Module1/src/_02_colors/VennDiagram
        lesson: 02_colors
        level: Level0
        module: Module1
        oassignment: VennDiagram
        opath: levels/Level0/Module1/src/_02_colors/VennDiagram
        resources:
        - levels/Level0/Module1/src/_02_colors/VennDiagram/.web/whiteCircles.png
        - levels/Level0/Module1/src/_02_colors/VennDiagram/.web/colorfulCircles.png
        - levels/Level0/Module1/src/_02_colors/VennDiagram/.web/redCircles.png
        - levels/Level0/Module1/src/_02_colors/VennDiagram/.web/vennDiagram.png
        text: "\n\n# Venn Diagram of Me\n\nNote: This lesson uses Processing, which\
          \ is not used in every class. If your\ninstructor has not introduced you\
          \ to Processing, you can skip this lesson. \n\n## Goal\n\nUse the RGB color\
          \ model to create a Venn Diagram that showcases your personality.\n\n##\
          \ Steps\n\n1. Find the Venn Diagram recipe program ( VennDiagram.pde ) and\
          \ open it using Processing.\n2. Run the program and you should see an empty\
          \ gray window.\n3. After the size() command, add code to draw 3 circles\
          \ to form a Venn Diagram (see picture).\nThe command to draw a circle in\
          \ Processing is:\n\n```\nellipse (centerX, centerY, circleWidth, circleHeight);\n\
          ```\n\nChange the values of `centerX`, `centerY`, `circleWidth` and `circleHeight`\
          \ of each\nellipse until they overlap as in the picture.\n\nRun the program.\
          \ It should look a bit like this.\n\n<center><img src=\"./whiteCircles.png\"\
          \ width=\"400px\"></center> \n\n\nNow to add the colors. Processing uses\
          \ the following command to draw in color:\n```\nfill(red, green, blue, opacity);\n\
          ```\n\nwhere red, green, blue, and opacity are all numbers between 0 and\
          \ 255. So to make see-through red circles, we add the following line of\
          \ code BEFORE we draw the circles.\n```\nfill(255, 0, 0, 100);\n```\n\n\
          Run the program. It should look a bit like this.\n\n\n We can now see the\
          \ edges of all the circles because we made\n them \"see-through\" by setting\
          \ the opacity to 100 (which is < 255) Add more\n fill commands (you will\
          \ have to figure out where to put them) so that each\n ellipse has its own\
          \ unique color. Label each of the circles with an aspect\n of your personality.\
          \ Processing uses the following command to draw text. You\n will need to\
          \ put numbers in place of xLocation, and yLocation. Play around\n with the\
          \ x and y until it works with your diagram.\n\n  ``` text\n (\"TEXT\", xLocation,\
          \ yLocation); \n ```\n\nYou can also make the text larger by changing the\
          \ sizeOfLetters (you will have to figure out where to put this)\n```\ntextSize(sizeOfLetters);\n\
          ```\n4. Change the x and y of each ellipse until they overlap as in the\
          \ picture.\n5. Run the program. It should look a bit like this\n6. Now to\
          \ add the colors. Processing uses the following command to draw in color:\n\
          ```\nfill(red, green, blue, opacity);\n```\n\nwhere red, green, blue, and\
          \ opacity are all numbers between 0 and 255. So to make see-through red\
          \ circles, we add the following line of code BEFORE we draw the circles.\n\
          ```\nfill(255, 0, 0, 100);\n```\n\nRun the program. It should look a bit\
          \ like this We can now see the edges of\nall the circles because we made\
          \ them \"see-through\" by setting the opacity to\n100 (which is < 255) Add\
          \ more fill commands (you will have to figure out\nwhere to put them) so\
          \ that each ellipse has its own unique color.\n\nLabel each of the circles\
          \ with an aspect of your personality. Processing uses\nthe following command\
          \ to draw text. You will need to put numbers in place of\nxLocation, and\
          \ yLocation. Play around with the x and y until it works with\nyour diagram.\n\
          \n```\ntext(\"TEXT\", xLocation, yLocation);\n```\n\nYou can also make the\
          \ text larger by changing the sizeOfLetters (you will have\nto figure out\
          \ where to put this)\n\n```\ntextSize(sizeOfLetters);\n```\nRun the program.\
          \ It should look a bit like this:\n\n\n<center><img src=\"./redCircles.png\"\
          \ width=\"400px\"></center> \n\n We can now see the edges of all the circles\
          \ because we made\n them \"see-through\" by setting the opacity to 100 (which\
          \ is < 255)\n\nAdd more fill commands (you will have to figure out where\
          \ to put them) so that\neach ellipse has its own unique color.\n\n<center><img\
          \ src=\"./colorfulCircles.png\" width=\"400px\"></center> \n\nLabel each\
          \ of the circles with an aspect of your personality. Processing uses\nthe\
          \ following command to draw text. You will need to put numbers in place\
          \ of\nxLocation, and yLocation. Play around with the x and y until it works\
          \ with\nyour diagram.\n\n```\ntext(\"TEXT\", xLocation, yLocation);\n\n\
          ```\n\nYou can also make the text larger by changing the sizeOfLetters (you\
          \ will have\nto figure out where to put this)\n\n```\ntextSize(sizeOfLetters);\n\
          ```\n\n\n\n"
        title: 02 Colors
    03_if_else:
      _readme: '

        [Open in Codespaces](https://codespaces.new/League-Java/Level0-Module1)


        '
      assignments:
      - assignment: 03_if_else
        dir: levels/Level0/Module1/src/_03_if_else/_1_unbirthday
        lesson: 03_if_else
        level: Level0
        module: Module1
        oassignment: 1_unbirthday
        opath: levels/Level0/Module1/src/_03_if_else/_1_unbirthday
        resources:
        - levels/Level0/Module1/src/_03_if_else/_1_unbirthday/.web/unbirthday.jpg
        text: '


          # Unbirthday


          <hr/>

          <img src="./images/unbirthday.jpg"/>


          ## Goal:


          Find out if today is the user''s birthday!


          ## Steps:


          1. Ask the user for their birthday (mm/dd), e.g. 06/09

          2. If it matches today''s date, wish them a happy birthday

          3. otherwise, wish them a very merry UNbirthday



          Optional: Watch [this video](https://www.youtube.com/watch?v=iL2Wm-PcfPo).




          '
        title: 03 If Else
      - assignment: 03_if_else
        dir: levels/Level0/Module1/src/_03_if_else/_2_remarkable
        lesson: 03_if_else
        level: Level0
        module: Module1
        oassignment: 2_remarkable
        opath: levels/Level0/Module1/src/_03_if_else/_2_remarkable
        resources:
        - levels/Level0/Module1/src/_03_if_else/_2_remarkable/.web/wow.jpg
        text: '


          # Remarkable


          <hr/>

          <img src="./images/wow.jpg"/>


          ## Goal:


          Find out something remarkable about the people in your class. When the user
          enters a name into your program, they will learn something remarkable about
          that person.


          ## Steps:


          1. Write the names of all the students on the white board

          2. Depending on which user types their name, tell them something remarkable
          about themselves

          3. Have students walk round and try each other''s programs




          '
        title: 03 If Else
      - assignment: 03_if_else
        dir: levels/Level0/Module1/src/_03_if_else/_3_secret_message_box
        lesson: 03_if_else
        level: Level0
        module: Module1
        oassignment: 3_secret_message_box
        opath: levels/Level0/Module1/src/_03_if_else/_3_secret_message_box
        resources:
        - levels/Level0/Module1/src/_03_if_else/_3_secret_message_box/.web/messageBox.jpg
        text: '


          # Secret Message Box


          <hr/>

          <img src="./images/messageBox.jpg"/>


          ## Goal:


          Share a secret message!


          ## Steps:


          1. Create a password and store it in a String variable.

          2. Using a pop-up, ask the first person for a secret message and store it
          in a variable.

          3. Now use a pop-up to tell the NEXT user that they can only see the secret
          message if they can guess the passcode.

          4. If their guess matches the password, show them the secret message.

          5. If the password does not match, pop-up "INTRUDER!!"




          '
        title: 03 If Else
      - assignment: 03_if_else
        dir: levels/Level0/Module1/src/_03_if_else/_4_tasty_tomato/tasty_tomato
        lesson: 03_if_else
        level: Level0
        module: Module1
        oassignment: 4_tasty_tomato
        opath: levels/Level0/Module1/src/_03_if_else/_4_tasty_tomato/tasty_tomato
        resources:
        - levels/Level0/Module1/src/_03_if_else/_4_tasty_tomato/tasty_tomato/.web/tomato.png
        text: '


          # Tasty Tomato


          <hr/>

          <img alt="Tasty Tomato image.." src="./images/tomato.png"/>


          ## Goal:


          Draw a tomato and take a bite out of it!


          ## Steps:


          1. Find the Tasty Tomato recipe program ( tasty_tomato.pde ) and open it
          using Processing.

          2. Make the tomato red.

          3. Make the stem green.

          4. Take a bite out of the tomato (see the picture).

          5. Only bite the tomato when the mouse is pressed.

          6. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 03 If Else
      - assignment: 03_if_else
        dir: levels/Level0/Module1/src/_03_if_else/_5_pizza/pizza
        lesson: 03_if_else
        level: Level0
        module: Module1
        oassignment: 5_pizza
        opath: levels/Level0/Module1/src/_03_if_else/_5_pizza/pizza
        resources:
        - levels/Level0/Module1/src/_03_if_else/_5_pizza/pizza/.web/pizza.jpeg
        text: "\n\n# Pizza\n\n<hr/>\n<img src=\"./images/pizza.jpeg\"/>\n\n## Goal:\n\
          \nMake a pizza with whatever toppings you can imagine!\n\n## Steps:\n\n\
          1. Find the Pizza recipe program ( pizza.pde ) and open it using Processing.\n\
          2. Set your canvas size in the setup method.\n```\n\nsize(width, height);\n\
          ```\n3. Draw a biscuit colored ellipse for the pizza base, a red ellipse\
          \ for sauce and a yellow ellipse inside (for the cheese).\nDo this in the\
          \ setup method. You can use R,G,B values or the Processing Color Selector\
          \ Tool to help you find the right colors.\n```\n\nfill(color);\nellipse(x,\
          \ y, width, height);\n```\n4. Get some topping images for your pizza. Some\
          \ examples are provided for you, but if you want to choose your own toppings\
          \ you can.\n\n\nMake a PImage variable for each type of topping at the top\
          \ of the sketch:\n```\nPImage pepperoni;\n```\nDrag and drop the topping\
          \ image file onto your sketch.\nLoad the topping image (in the setup method):```\n\
          pepperoni = loadImage(\"pepperoni.png\");\n```\nIn the draw method, use\
          \ the image command to draw the topping somewhere on your pizza:\n```\n\
          image(pepperoni,200,200);\n```\nIf your topping is too big for the pizza,\
          \ resize the topping image. Do this in the setup method.\n```\npepperoni.resize(30,\
          \ 30);\n```\n\nRepeat the above steps for more toppings.\n\nAdd more code\
          \ so that the toppings are only drawn when the user clicks the mouse (in\
          \ draw method).\nMake sure you SAVE YOUR CODE when you are done. \n    \
          \                            \nOPTIONAL Add a different topping with the\
          \ right mouse click.\n```\n\nif (mousePressed && (mouseButton == RIGHT))\
          \ {}\n```\n\nOPTIONAL Use a background image to put the pizza in a box.\n\
          ```\n\nPImage pizzaBox = loadImage(\"box.jpg\");     //in setup method\n\
          pizzaBox.resize(width, height);      //to match your canvas size\nbackground(pizzaBox);\
          \       //in setup method\n```\n\nOPTIONAL: To play a sound when you add\
          \ a topping....\n                                    First download a sound\
          \ from freesound.org and drop it onto your sketch\n\n                  \
          \                  Import the minim library Pocessing > tools > add tools\
          \ > libraries (search minim)\n```\n\nimport ddf.minim.*;     //at the top\
          \ of the sketch\nMinim minim;     //at the top of the sketch\nAudioPlayer\
          \ sound;    //at the top of the sketch\n\nminim = new Minim(this);     \
          \ //in the setup method\nsound = minim.loadFile(\"ding.wav\");      //in\
          \ the setup method\n\n// Put next 2 lines where you want the sound to play\n\
          sound.play();\nsound.rewind();\n```\n5. Make a PImage variable for each\
          \ type of topping at the top of the sketch:\n```\nPImage pepperoni;\n```\n\
          6. Drag and drop the topping image file onto your sketch.\n7. Load the topping\
          \ image (in the setup method):```\npepperoni = loadImage(\"pepperoni.png\"\
          );\n```\n8. In the draw method, use the image command to draw the topping\
          \ somewhere on your pizza:\n```\nimage(pepperoni,200,200);\n```\n9. If your\
          \ topping is too big for the pizza, resize the topping image. Do this in\
          \ the setup method.\n```\npepperoni.resize(30, 30);\n```\n10. Repeat the\
          \ above steps for more toppings.\n11. Add more code so that the toppings\
          \ are only drawn when the user clicks the mouse (in draw method).\n12. Make\
          \ sure you SAVE YOUR CODE when you are done.\n13. OPTIONAL Add a different\
          \ topping with the right mouse click.\n```\n\nif (mousePressed && (mouseButton\
          \ == RIGHT)) {}\n```\n14. OPTIONAL Use a background image to put the pizza\
          \ in a box.\n```\n\nPImage pizzaBox = loadImage(\"box.jpg\");     //in setup\
          \ method\npizzaBox.resize(width, height);      //to match your canvas size\n\
          background(pizzaBox);       //in setup method\n```\n15. OPTIONAL: To play\
          \ a sound when you add a topping....\nFirst download a sound from freesound.org\
          \ and drop it onto your sketch\n\nImport the minim library Pocessing > tools\
          \ > add tools > libraries (search minim)\n```\n\nimport ddf.minim.*;   \
          \  //at the top of the sketch\nMinim minim;     //at the top of the sketch\n\
          AudioPlayer sound;    //at the top of the sketch\n\nminim = new Minim(this);\
          \      //in the setup method\nsound = minim.loadFile(\"ding.wav\");    \
          \  //in the setup method\n\n// Put next 2 lines where you want the sound\
          \ to play\nsound.play();\nsound.rewind();\n```\n\n\n\n"
        title: 03 If Else
    04_int:
      _readme: ''
      assignments:
      - assignment: 04_int
        dir: levels/Level0/Module1/src/_04_int/_1_riddler
        lesson: 04_int
        level: Level0
        module: Module1
        oassignment: 1_riddler
        opath: levels/Level0/Module1/src/_04_int/_1_riddler
        resources:
        - levels/Level0/Module1/src/_04_int/_1_riddler/.web/riddler.jpg
        text: '


          # The Riddler


          <hr/>

          <img src="./images/riddler.jpg"/>


          ## Goal:


          Ask the user some riddles!


          ## Steps:


          1. Make a variable to hold the player''s score.

          ```


          int score = 0;

          ```

          2. Ask the player a riddle. [Here](http://brainden.com/logic-riddles.htm)
          are some ideas.

          3. If they get the answer right, pop up "correct!" and increase the score
          by one

          ```


          score++;

          ```

          4. Otherwise, tell them they are "wrong" and also tell them the correct
          answer

          5. Add some more riddles




          '
        title: 04 Int
      - assignment: 04_int
        dir: levels/Level0/Module1/src/_04_int/_2_robot_in_space
        lesson: 04_int
        level: Level0
        module: Module1
        oassignment: 2_robot_in_space
        opath: levels/Level0/Module1/src/_04_int/_2_robot_in_space
        resources: []
        text: '# 04 Int 2 Robot In Space


          '
        title: 04 Int
      - assignment: 04_int
        dir: levels/Level0/Module1/src/_04_int/_3_zombie_eyes/zombie_eyes
        lesson: 04_int
        level: Level0
        module: Module1
        oassignment: 3_zombie_eyes
        opath: levels/Level0/Module1/src/_04_int/_3_zombie_eyes/zombie_eyes
        resources: []
        text: '


          # Zombie Eyes


          <hr/>

          <img alt="Zombie Eyes image" src="http://level0.jointheleague.org/modules/Mod1Recipes/images/zombieEyes.png       "/>


          ## Goal:


          You are going to make a face with animated eyes. You could use your own
          face (if you have a photo) or a zombie, a cat, or whatever you like. Whatever
          you choose, the eyes should be prominent (large).


          ## Steps:


          1. Find the Zombie Eyes recipe program ( zombie_eyes.pde ) and open it using
          Processing.

          2. Drop the image of a face onto your sketch. Load it like this in the setup
          method:

          ```


          PImage face = loadImage("face.jpeg");

          ```

          3. Adjust the size of your sketch if necessary.

          ```


          size(width, height);

          ```

          4. Adjust the size of your image so that the size matches the sketch and
          draw it using the image command.

          ```


          face.resize(width, height);

          image(face, 0, 0);

          ```

          5. Place 2 ellipses over the irises of the eyes in the draw method.

          ```


          ellipse(x, y, width, height);

          ```

          6. Give the irises a color with the fill command (use numbers in place of
          red, green, blue).

          ```


          fill(red, green, blue);

          ```

          7. Use mouseX and mouseY to change the color of the irises when the mouse
          moves.

          8. Draw black pupils on top of the irises.

          9. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 04 Int
      - assignment: 04_int
        dir: levels/Level0/Module1/src/_04_int/_4_rocket_ship/rocket_ship
        lesson: 04_int
        level: Level0
        module: Module1
        oassignment: 4_rocket_ship
        opath: levels/Level0/Module1/src/_04_int/_4_rocket_ship/rocket_ship
        resources: []
        text: '


          # Rock Ship Blastoff


          <hr/>

          <img alt="Rock Ship Blastoff image" src="http://level0.jointheleague.org/modules/Mod1Recipes/images/rocketship.png
          "/>


          ## Goal:


          The goal is to make the Rocketship blast off and move from the bottom of
          the screen to the top of the screen.


          ## Steps:


          1. Find the Rocket Ship recipe program ( rocket_ship.pde ) and open it using
          Processing.

          2. Change the code to make the rocket ship take off.

          3. Optional: Add a moon and stars to the sky (see picture)

          4. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 04 Int
    05_for_loops:
      _readme: ''
      assignments:
      - assignment: 05_for_loops
        dir: levels/Level0/Module1/src/_05_for_loops/_1_my_ages
        lesson: 05_for_loops
        level: Level0
        module: Module1
        oassignment: 1_my_ages
        opath: levels/Level0/Module1/src/_05_for_loops/_1_my_ages
        resources:
        - levels/Level0/Module1/src/_05_for_loops/_1_my_ages/.web/ages.jpeg
        text: '


          # My Ages


          <hr/>

          <img src="./images/ages.jpeg"/>


          ## Goal:


          Practice using for loops!


          ## Steps:


          1. Using a for loop, print out all the ages you have been alive, up to your
          current age.




          '
        title: 05 For Loops
      - assignment: 05_for_loops
        dir: levels/Level0/Module1/src/_05_for_loops/_2_badgers
        lesson: 05_for_loops
        level: Level0
        module: Module1
        oassignment: 2_badgers
        opath: levels/Level0/Module1/src/_05_for_loops/_2_badgers
        resources:
        - levels/Level0/Module1/src/_05_for_loops/_2_badgers/.web/badgers.png
        text: "\n\n# Badgers\n\n<hr/>\n<img src=\"./images/badgers.png\"/>\n\n## Goal:\n\
          \nPrint the lyrics to the\nBadgers song!\n\n## Steps:\n\n1. Use for loops\
          \ (you will need more than one) to print the following lyrics from the Badger\
          \ Song.  You can only use the words \u201CBadger\u201D, \u201CMushroom\u201D\
          \ and \u201CSnake\u201D once each in your code.\n\n\nPrint 2 verses of the\
          \ song as follows:\n\n\nBadger, Badger, Badger, Badger, Badger, Badger,\
          \ Badger,Badger, Badger,Badger, Badger, Badger\n\nMushroom, Mushroom\n\n\
          Badger, Badger, Badger,Badger, Badger, Badger, Badger,Badger, Badger, Badger,\
          \ Badger, Badger\n\nMushroom, Mushroom\n\nA Snake!!!\n\n\n\n"
        title: 05 For Loops
      - assignment: 05_for_loops
        dir: levels/Level0/Module1/src/_05_for_loops/_3_bananas_4eva/bananas_4eva
        lesson: 05_for_loops
        level: Level0
        module: Module1
        oassignment: 3_bananas_4eva
        opath: levels/Level0/Module1/src/_05_for_loops/_3_bananas_4eva/bananas_4eva
        resources:
        - levels/Level0/Module1/src/_05_for_loops/_3_bananas_4eva/bananas_4eva/.web/bananas.jpg
        text: '


          # Bananas 4eva


          <hr/>

          <img alt="bananas" src="./images/bananas.jpg"/>


          ## Goal:


          Practice using for loops!


          ## Steps:


          1. Find the Bananas 4Eva recipe program ( bananas_4eva.pde ) and open it
          using Processing.

          2. Write a for loop that prints "banana" 1000 times.

          3. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 05 For Loops
      - assignment: 05_for_loops
        dir: levels/Level0/Module1/src/_05_for_loops/_4_banana_split/banana_split
        lesson: 05_for_loops
        level: Level0
        module: Module1
        oassignment: 4_banana_split
        opath: levels/Level0/Module1/src/_05_for_loops/_4_banana_split/banana_split
        resources:
        - levels/Level0/Module1/src/_05_for_loops/_4_banana_split/banana_split/.web/splitOutput.png
        text: "\n\n# Banana Split\n\n<hr/>\n<img alt=\"Banana Split image\" src=\"\
          http://level0.jointheleague.org/modules/Mod1Recipes/images/splitOutput.png\"\
          />\n\n## Goal:\n\nUse for loops to recreate the image above!\n\n## Steps:\n\
          \n1. Find the Banana Split recipe program ( banana_split.pde ) and open\
          \ it using Processing.\n2. Use the code below to help you print \u201Cice\
          \ cream ice cream ice cream banana\u201D on the sketch.  However, you can\
          \ only use the words \"ice cream\" once in your code so you'll need a loop.\n\
          ```\n\ntext(\"word\", xPos, yPos);\n```\n3. Make sure you SAVE YOUR CODE\
          \ when you are done.\n\n\n\n"
        title: 05 For Loops
    06_spot_the_error:
      _readme: '


        # Spot the Errors



        Fix the errors in the programs:


        * Fix the Print

        * Hello Bob

        * Make It Count


        <hr/>



        '
      assignments:
      - assignment: 06_spot_the_error
        dir: levels/Level0/Module1/src/_06_spot_the_error
        lesson: 06_spot_the_error
        level: Level0
        module: Module1
        oassignment: 06_spot_the_error
        opath: levels/Level0/Module1/src/_06_spot_the_error
        resources:
        - levels/Level0/Module1/src/_06_spot_the_error/.web/bug.jpg
        text: '


          # Spot the Errors



          Fix the errors in the programs:


          * Fix the Print

          * Hello Bob

          * Make It Count


          <hr/>



          '
        title: 06 Spot The Error
    _readme: "# Level 0 - Module 1\n\nRecipes for Level 0 - Module 1 students.\n\n\
      Contains: RobotInSpace.java, SecretMessageBox.java, TheRiddler.java, XGeeks.java\n\
      \nAt the end of this module, students will be able to:\n  * Use an if/else statement\
      \ to control program flow\n  * Create and initialize int variables\n  * Use\
      \ a for loop to repeat blocks of code\n  * Use int variables in simple math\
      \ statements\n  * Know where curly brackets {} are required in a simple program\n\
      \  * Draw simple graphics using Processing\n  \n---\n\nThis version of The LEAGUE's\
      \ curriculum is generously funded by the Itzkowitch Foundation."
  Module2:
    01_random:
      _readme: ''
      assignments:
      - assignment: 01_random
        dir: levels/Level0/Module2/src/_01_random/_1_intro_to_random
        lesson: 01_random
        level: Level0
        module: Module2
        oassignment: 1_intro_to_random
        opath: levels/Level0/Module2/src/_01_random/_1_intro_to_random
        resources:
        - levels/Level0/Module2/src/_01_random/_1_intro_to_random/.web/random.jpg
        text: '


          # Intro to Random


          <hr/>

          <img src="./images/random.jpg"/>


          ## Goal:


          Learn how to use a Random object to generate random integers within specified
          number ranges.


          ## Steps:


          1. Generate a random integer without limits.

          2. Generate a random positive integer with an upper limit.

          3. Generate a random integer with an upper and lower (positive) limit.

          4. Generate a random integer with an upper and lower (negative) limit




          '
        title: 01 Random
      - assignment: 01_random
        dir: levels/Level0/Module2/src/_01_random/_2_rock_paper_scissors
        lesson: 01_random
        level: Level0
        module: Module2
        oassignment: 2_rock_paper_scissors
        opath: levels/Level0/Module2/src/_01_random/_2_rock_paper_scissors
        resources:
        - levels/Level0/Module2/src/_01_random/_2_rock_paper_scissors/.web/paper.jpeg
        - levels/Level0/Module2/src/_01_random/_2_rock_paper_scissors/.web/rock.png
        - levels/Level0/Module2/src/_01_random/_2_rock_paper_scissors/.web/scissors.jpeg
        text: '


          # Rock Paper Scissors


          <hr/>

          <img src="./images/rock.png"/>

          <img src="./images/paper.jpeg"/>

          <img src="./images/scissors.jpeg"/>


          ## Goal:


          Use a Random object to generate random integers so your code can play Rock
          Paper Scissors with you.


          ## Steps:


          1. Create a Random object.

          2. Generate a random number to represent rock, paper, or scissors in a game.

          3. Play Rock Paper Scissors against the computer to test your code.




          '
        title: 01 Random
      - assignment: 01_random
        dir: levels/Level0/Module2/src/_01_random/_3_dice_roll
        lesson: 01_random
        level: Level0
        module: Module2
        oassignment: 3_dice_roll
        opath: levels/Level0/Module2/src/_01_random/_3_dice_roll
        resources:
        - levels/Level0/Module2/src/_01_random/_3_dice_roll/.web/dice.png
        text: '


          # Dice Roll


          <hr/>

          <img src="./images/dice.png"/>


          ## Goal:


          Use a Random object to generate random integers so your code can roll different
          numbers on a dice.


          ## Steps:


          1. Create a Random object.

          2. Generate a random number between 1 and 6.

          3. Change the code to display the dice image to match the number each time
          the "CLICK HERE TO ROLL" button is pressed.

          4. Test your code to make sure all 6 sides are displayed.




          '
        title: 01 Random
      - assignment: 01_random
        dir: levels/Level0/Module2/src/_01_random/_4_validation
        lesson: 01_random
        level: Level0
        module: Module2
        oassignment: 4_validation
        opath: levels/Level0/Module2/src/_01_random/_4_validation
        resources:
        - levels/Level0/Module2/src/_01_random/_4_validation/.web/validation.png
        text: '


          # Validation


          <hr/>

          <img src="./images/validation.png"/>


          ## Goal:


          Use a Random object to generate random integers so your code can generate
          random compliments.


          ## Steps:


          1. Create a Random object.

          2. Generate a random number between 0 and 4.

          3. Map each value (0-4) to a unique compliment.

          4. Print a random compliment 10 times (using a loop)

          5. Test your code and receive some compliments.




          '
        title: 01 Random
      - assignment: 01_random
        dir: levels/Level0/Module2/src/_01_random/_5_magic_8_ball
        lesson: 01_random
        level: Level0
        module: Module2
        oassignment: 5_magic_8_ball
        opath: levels/Level0/Module2/src/_01_random/_5_magic_8_ball
        resources:
        - levels/Level0/Module2/src/_01_random/_5_magic_8_ball/.web/magic8ball.jpeg
        text: '


          # Magic 8 Ball


          <hr/>

          <img src="./images/magic8ball.jpeg"/>


          ## Goal:


          Use a Random object to generate random integers so your code can generate
          random messages from the Magic 8 Ball.


          ## Steps:


          1. Create a Random object.

          2. Generate a random number between 0 and 3.

          3. Map each value (0-3) to a unique message.

          4. Test your code and receive some magic answers from the 8 ball.




          '
        title: 01 Random
      - assignment: 01_random
        dir: levels/Level0/Module2/src/_01_random/_6_lottery_numbers
        lesson: 01_random
        level: Level0
        module: Module2
        oassignment: 6_lottery_numbers
        opath: levels/Level0/Module2/src/_01_random/_6_lottery_numbers
        resources:
        - levels/Level0/Module2/src/_01_random/_6_lottery_numbers/.web/lottery.png
        - levels/Level0/Module2/src/_01_random/_6_lottery_numbers/.web/lotteryNumbers.png
        text: '


          # Lottery Numbers


          <hr/>

          <img src="./images/lottery.png"/>


          ## Goal:


          Use random numbers to make a lottery ticket!


          ## Steps:


          1. Add a new class for the Lottery Numbers recipe.

          2. Get 6 random numbers to put on your lottery ticket

          3. Display the selected numbers to the user in a pop-up (see below)


          (All 6 random numbers must appear on the same pop-up [i.e. the user should
          not have to click "ok" 6 times])

          4. Bonus: set the title of the pop-up to show it is a lottery ticket.




          '
        title: 01 Random
    02_methods:
      _readme: ''
      assignments:
      - assignment: 02_methods
        dir: levels/Level0/Module2/src/_02_methods/_1_animal_farm
        lesson: 02_methods
        level: Level0
        module: Module2
        oassignment: 1_animal_farm
        opath: levels/Level0/Module2/src/_02_methods/_1_animal_farm
        resources:
        - levels/Level0/Module2/src/_02_methods/_1_animal_farm/.web/animalFarm.jpg
        text: '


          # Animal Farm


          <hr/>

          <img src="./images/animalFarm.jpg"/>


          ## Goal:


          Method calls. Call a method that shows an image and makes the sound of an
          animal as selected by the user in a pop-up.


          ## Steps:


          1. Ask the user to enter the name of an animal on this farm.

          2. Use if statements to call the method that matches the animal they chose.

          3. Loop the program so the user can choose more than one time.

          4. Test your code to make sure all animal choices work correctly.

          5. What happens if the user does not enter the name of an animal on the
          farm?




          '
        title: 02 Methods
      - assignment: 02_methods
        dir: levels/Level0/Module2/src/_02_methods/_2_safe_cracker
        lesson: 02_methods
        level: Level0
        module: Module2
        oassignment: 2_safe_cracker
        opath: levels/Level0/Module2/src/_02_methods/_2_safe_cracker
        resources:
        - levels/Level0/Module2/src/_02_methods/_2_safe_cracker/.web/safeCracker.jpg
        text: '


          # Safe Cracker


          <hr/>

          <img src="./images/safeCracker.jpg"/>


          ## Goal:


          Method calls - call a method passing a parameter. Your mission: use the
          tryCode method to crack the safe by trying all possible numbers.


          ## Steps:


          1. Create a for loop that will repeat until the program ends.

          2. Inside the loop, call the tryCode method using the for loop variable
          for the code.

          3. The tryCode method will end the program when the correct code is guessed.

          4. Run the program and see all the guesses being printed to the console.

          5. Bonus: Can you change the loop so that the safe will be cracked more
          quickly?




          '
        title: 02 Methods
      - assignment: 02_methods
        dir: levels/Level0/Module2/src/_02_methods/_3_dot_race/dot_race
        lesson: 02_methods
        level: Level0
        module: Module2
        oassignment: 3_dot_race
        opath: levels/Level0/Module2/src/_02_methods/_3_dot_race/dot_race
        resources:
        - levels/Level0/Module2/src/_02_methods/_3_dot_race/dot_race/.web/dotRace.png
        text: '


          # Dot Race


          <hr/>

          <img src="./images/dotRace.png"/>


          ## Goal:


          Make the dot move across the screen when you press the mouse.


          ## Steps:


          1. Find the Dot Race recipe program ( dot_race.pde ) and open it using Processing.

          2. Follow the instructions in the code to make a dot race across the screen.

          3. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 02 Methods
      - assignment: 02_methods
        dir: levels/Level0/Module2/src/_02_methods/_4_moles_in_holes/moles_in_holes
        lesson: 02_methods
        level: Level0
        module: Module2
        oassignment: 4_moles_in_holes
        opath: levels/Level0/Module2/src/_02_methods/_4_moles_in_holes/moles_in_holes
        resources:
        - levels/Level0/Module2/src/_02_methods/_4_moles_in_holes/moles_in_holes/.web/molesInHoles.png
        text: '


          # Moles in Holes


          <hr/>

          <img alt="Moles in Holes image" src="./images/molesInHoles.png"/>


          ## Goal:


          Put the moles in their holes!


          ## Steps:


          1. Find the Moles In Holes recipe program ( moles_in_holes.pde ) and open
          it using Processing.

          2. Follow the instructions in the code to put moles in the holes.

          3. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 02 Methods
      - assignment: 02_methods
        dir: levels/Level0/Module2/src/_02_methods/_5_ice_cream_shop/ice_cream_shop
        lesson: 02_methods
        level: Level0
        module: Module2
        oassignment: 5_ice_cream_shop
        opath: levels/Level0/Module2/src/_02_methods/_5_ice_cream_shop/ice_cream_shop
        resources:
        - levels/Level0/Module2/src/_02_methods/_5_ice_cream_shop/ice_cream_shop/.web/iceCreamShop.png
        text: '


          # Ice Cream Shop


          <hr/>

          <img src="./images/iceCreamShop.png"/>


          ## Goal:


          Make an ice cream cone!


          ## Steps:


          1. Find the Ice Cream Shop recipe program ( ice_cream_shop.pde ) and open
          it using Processing.

          2. Follow the instructions in the code to make a delicious ice cream cone
          with sprinkles.

          3. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 02 Methods
      - assignment: 02_methods
        dir: levels/Level0/Module2/src/_02_methods/_6_slippery_dot/slippery_dot
        lesson: 02_methods
        level: Level0
        module: Module2
        oassignment: 6_slippery_dot
        opath: levels/Level0/Module2/src/_02_methods/_6_slippery_dot/slippery_dot
        resources:
        - levels/Level0/Module2/src/_02_methods/_6_slippery_dot/slippery_dot/.web/slipperyDot.png
        text: '


          # Slippery Dot


          <hr/>

          <img src="./images/slipperyDot.png"/>


          ## Goal:


          Make a slippery dot!


          ## Steps:


          1. Find the Slippery Dot recipe program ( slippery_dot.pde ) and open it
          using Processing.

          2. Follow the instructions in the code to make a dot slide away each time
          you click on it.

          3. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 02 Methods
    03_string_conversion:
      _readme: ''
      assignments:
      - assignment: 03_string_conversion
        dir: levels/Level0/Module2/src/_03_string_conversion/_1_intro
        lesson: 03_string_conversion
        level: Level0
        module: Module2
        oassignment: 1_intro
        opath: levels/Level0/Module2/src/_03_string_conversion/_1_intro
        resources:
        - levels/Level0/Module2/src/_03_string_conversion/_1_intro/.web/parseInt3.png
        - levels/Level0/Module2/src/_03_string_conversion/_1_intro/.web/parseInt2.png
        - levels/Level0/Module2/src/_03_string_conversion/_1_intro/.web/paresInt1.png
        text: '


          # Converting a String to an int


          <img alt="images/paresInt1.png" src="./images/paresInt1.png" style="width:
          964.00px; height: 477.00px; margin-left: 0.00px; margin-top: 0.00px; transform:
          rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
          title=""/>

          <img alt="images/parseInt2.png" src="./images/parseInt2.png" style="width:
          962.00px; height: 473.00px; margin-left: 0.00px; margin-top: 0.00px; transform:
          rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
          title=""/>

          <img alt="images/parseInt3.png" src="./images/parseInt3.png" style="width:
          958.00px; height: 470.00px; margin-left: 0.00px; margin-top: 0.00px; transform:
          rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
          title=""/>


          '
        title: 03 String Conversion
      - assignment: 03_string_conversion
        dir: levels/Level0/Module2/src/_03_string_conversion/_2_strings_cannot_add
        lesson: 03_string_conversion
        level: Level0
        module: Module2
        oassignment: 2_strings_cannot_add
        opath: levels/Level0/Module2/src/_03_string_conversion/_2_strings_cannot_add
        resources:
        - levels/Level0/Module2/src/_03_string_conversion/_2_strings_cannot_add/.web/stringsCannotAdd.jpg
        text: '


          # Strings Cannot Add


          <hr/>

          <img src="./images/stringsCannotAdd.jpg"/>


          ## Goal:


          Learn how the + operator works differently with Strings and numbers. Learn
          how to convert String objects to numbers when math operations are needed.


          ## Steps:


          1. Follow all the instructions in the main method.

          2. Observe how the + operator joins Strings to produce a new (longer) String.

          3. Use the Integer.parseInt() method to convert Strings to numbers.

          4. Observe how the + operator adds numbers to produce a sum.




          '
        title: 03 String Conversion
      - assignment: 03_string_conversion
        dir: levels/Level0/Module2/src/_03_string_conversion/_3_rollercoaster
        lesson: 03_string_conversion
        level: Level0
        module: Module2
        oassignment: 3_rollercoaster
        opath: levels/Level0/Module2/src/_03_string_conversion/_3_rollercoaster
        resources:
        - levels/Level0/Module2/src/_03_string_conversion/_3_rollercoaster/.web/rollercoaster.jpeg
        text: '


          # Roller Coaster


          <hr/>

          <img src="./images/rollercoaster.jpeg"/>


          ## Goal:


          Check if a person is tall enough to ride the roller coaster!


          ## Steps:


          1. Ask the user what height they are (in inches)

          2. If they are 48" or taller, tell them they can go on the coaster alone.

          3. If they are between 42" and 47" tall, tell them they need to ride with
          someone else.

          4. If they are less than 42" tall, tell them they need to grow more.




          '
        title: 03 String Conversion
      - assignment: 03_string_conversion
        dir: levels/Level0/Module2/src/_03_string_conversion/_4_voting_booth
        lesson: 03_string_conversion
        level: Level0
        module: Module2
        oassignment: 4_voting_booth
        opath: levels/Level0/Module2/src/_03_string_conversion/_4_voting_booth
        resources:
        - levels/Level0/Module2/src/_03_string_conversion/_4_voting_booth/.web/vote.jpg
        text: '


          # Voting Booth


          <hr/>

          <img src="./images/vote.jpg"/>


          ## Goal:


          Check if a person is old enough to vote!


          ## Steps:


          1. Ask the user how old they are (in years)

          2. If they are over 18, ask them who the next president should be

          3. If they are younger, tell them nobody cares what they think




          '
        title: 03 String Conversion
    04_spot_the_error:
      _readme: '


        # Spot the Errors


        <hr/>


        ### Fix the Random



        ### How Many?



        ### Method Call


        <hr/>



        '
      assignments:
      - assignment: 04_spot_the_error
        dir: levels/Level0/Module2/src/_04_spot_the_error
        lesson: 04_spot_the_error
        level: Level0
        module: Module2
        oassignment: 04_spot_the_error
        opath: levels/Level0/Module2/src/_04_spot_the_error
        resources:
        - levels/Level0/Module2/src/_04_spot_the_error/.web/bug.jpg
        text: '


          # Spot the Errors


          <hr/>


          ### Fix the Random



          ### How Many?



          ### Method Call


          <hr/>



          '
        title: 04 Spot The Error
    99_extra:
      _readme: '# 99 Extra


        '
      assignments:
      - assignment: 99_extra
        dir: levels/Level0/Module2/src/_99_extra
        lesson: 99_extra
        level: Level0
        module: Module2
        oassignment: 99_extra
        opath: levels/Level0/Module2/src/_99_extra
        resources: []
        text: '# 99 Extra


          '
        title: 99 Extra
  Module3:
    01_else_if:
      _readme: ''
      assignments:
      - assignment: 01_else_if
        dir: levels/Level0/Module3/src/_01_else_if/_1_robot_color_chooser
        lesson: 01_else_if
        level: Level0
        module: Module3
        oassignment: 1_robot_color_chooser
        opath: levels/Level0/Module3/src/_01_else_if/_1_robot_color_chooser
        resources:
        - levels/Level0/Module3/src/_01_else_if/_1_robot_color_chooser/.web/robotColorChooser.png
        text: '


          # Robot Color Chooser


          <hr/>

          <img src="./images/robotColorChooser.png"/>


          ## Goal:


          Use if and else if statements to set a Robot''s pen to a chosen color before
          drawing a shape.


          ## Steps:


          1. Ask the user to choose a color.

          2. Set the Robot''s pen to the chosen color.

          3. Have the Robot draw a shape.

          4. Repeat the above in a loop to test all the supported colors.

          5. Don''t forget to use an else statement in case the user enters an unrecognized
          color.




          '
        title: 01 Else If
      - assignment: 01_else_if
        dir: levels/Level0/Module3/src/_01_else_if/_2_crazy_cat_lady
        lesson: 01_else_if
        level: Level0
        module: Module3
        oassignment: 2_crazy_cat_lady
        opath: levels/Level0/Module3/src/_01_else_if/_2_crazy_cat_lady
        resources:
        - levels/Level0/Module3/src/_01_else_if/_2_crazy_cat_lady/.web/crazyCatLady.jpg
        text: '


          # Crazy Cat Lady


          <hr/>

          <img src="./images/crazyCatLady.jpg"/>


          ## Goal:


          Use if and else if statements to provide different responses to a user based
          on how they answer the question, "How many cats do you have?".


          ## Steps:


          1. Ask the user how many cats they have.

          2. Convert their answer into a number (int).

          3. If they have 3 or more cats, they might be a crazy cat lady.

          4. If they have less than 3 cats AND more than 0 cats, they are a cat lover.

          5. If they have 0 cats, maybe they have a different pet.




          '
        title: 01 Else If
      - assignment: 01_else_if
        dir: levels/Level0/Module3/src/_01_else_if/_3_high_low
        lesson: 01_else_if
        level: Level0
        module: Module3
        oassignment: 3_high_low
        opath: levels/Level0/Module3/src/_01_else_if/_3_high_low
        resources:
        - levels/Level0/Module3/src/_01_else_if/_3_high_low/.web/highLowGame.jpg
        text: '


          # High Low Game


          <hr/>

          <img src="./images/highLowGame.jpg"/>


          ## Goal:


          Use if and else if statements in a loop until the user correctly guesses
          the secret number in a high low game.


          ## Steps:


          1. Get a random number between 1 and 100. Hint: use a Random object

          2. Ask the user to guess what the number is.

          3. If their guess is correct, tell them they won and end the game.

          4. If their guess is too high, tell them it is too high.

          5. If their guess is too low, tell them it is too low.

          6. Use a for loop to repeat the above code 10 times. If they don''t find
          the number after 10 tries, tell them they lost the game and tell them the
          number.




          '
        title: 01 Else If
      - assignment: 01_else_if
        dir: levels/Level0/Module3/src/_01_else_if/_4_are_you_happy
        lesson: 01_else_if
        level: Level0
        module: Module3
        oassignment: 4_are_you_happy
        opath: levels/Level0/Module3/src/_01_else_if/_4_are_you_happy
        resources:
        - levels/Level0/Module3/src/_01_else_if/_4_are_you_happy/.web/AreYouHappy.png
        text: '


          # Are You Happy?


          <hr/>

          <img alt="Are You Happy? image" src="./images/AreYouHappy.png"/>


          ## Goal:


          Create a program that mimics the chart above using if and else if statements.


          ## Steps:


          1. Use JOptionPanes and if / else if /else statements to recreate [this
          chart](images/AreYouHappy.png).




          '
        title: 01 Else If
      - assignment: 01_else_if
        dir: levels/Level0/Module3/src/_01_else_if/_5_own_adventure
        lesson: 01_else_if
        level: Level0
        module: Module3
        oassignment: 5_own_adventure
        opath: levels/Level0/Module3/src/_01_else_if/_5_own_adventure
        resources:
        - levels/Level0/Module3/src/_01_else_if/_5_own_adventure/.web/leagueOversized.jpeg
        text: '


          # Choose Your Own Adventure


          <hr/>

          <img src="https://league-central.github.io/curriculum/img/leagueOversized.jpeg"/>


          ## Goal:


          Tell the user a story, but give them options so they can decide the path
          of the plot.


          ## Steps:


          1. Use JOptionPanes, if statements, and your imagination to make an interesting
          story.




          '
        title: 01 Else If
    02_loop_variables:
      _readme: ''
      assignments:
      - assignment: 02_loop_variables
        dir: levels/Level0/Module3/src/_02_loop_variables/_1_years_alive
        lesson: 02_loop_variables
        level: Level0
        module: Module3
        oassignment: 1_years_alive
        opath: levels/Level0/Module3/src/_02_loop_variables/_1_years_alive
        resources:
        - levels/Level0/Module3/src/_02_loop_variables/_1_years_alive/.web/leagueOversized.jpeg
        text: "\n\n# Years Alive\n\n<hr/>\n<img src=\"https://league-central.github.io/curriculum/img/leagueOversized.jpeg\"\
          />\n\n## Goal:\n\nPrint out all the years you have been alive (e.g. 2005,\
          \ 2006, etc).\tUse a for loop and the for loop variable should be the year\n\
          \n## Steps:\n\n1. Use a for loop to print out all of the years you have\
          \ been alive. Use the for loop variable in your print statement.\n\n\n\n"
        title: 02 Loop Variables
      - assignment: 02_loop_variables
        dir: levels/Level0/Module3/src/_02_loop_variables/_2_shiny_objects
        lesson: 02_loop_variables
        level: Level0
        module: Module3
        oassignment: 2_shiny_objects
        opath: levels/Level0/Module3/src/_02_loop_variables/_2_shiny_objects
        resources:
        - levels/Level0/Module3/src/_02_loop_variables/_2_shiny_objects/.web/shinyObjets.png
        text: '


          # Shiny Objects


          <hr/>

          <img src="./images/shinyObjets.png"/>


          ## Goal:


          Use input from a user to control the number of repetitions of a for loop.


          ## Steps:


          1. Call the playMisterZee method. Run the program to make sure it works.

          2. Ask the user how many shiny objects they would like

          3. Use a for loop that repeats the method call for as many times as the
          user specified.




          '
        title: 02 Loop Variables
      - assignment: 02_loop_variables
        dir: levels/Level0/Module3/src/_02_loop_variables/_3_robot_walk_of_fame
        lesson: 02_loop_variables
        level: Level0
        module: Module3
        oassignment: 3_robot_walk_of_fame
        opath: levels/Level0/Module3/src/_02_loop_variables/_3_robot_walk_of_fame
        resources:
        - levels/Level0/Module3/src/_02_loop_variables/_3_robot_walk_of_fame/.web/walkOfFame.png
        text: '


          # Robot Walk of Fame


          <hr/>

          <img src="./images/walkOfFame.png"/>


          ## Goal:


          Use a for loop to make a robot draw a line of stars.


          ## Steps:


          1. Create a Robot and place it at the left of the window.

          2. Write code so the Robot draws a 5-point star (Hint: turn angle will be
          144)

          3. Use a for loop to repeat the above code so a line of stars is drawn across
          the window (see image).




          '
        title: 02 Loop Variables
      - assignment: 02_loop_variables
        dir: levels/Level0/Module3/src/_02_loop_variables/_4_99_bottles/bottles
        lesson: 02_loop_variables
        level: Level0
        module: Module3
        oassignment: 4_99_bottles
        opath: levels/Level0/Module3/src/_02_loop_variables/_4_99_bottles/bottles
        resources: []
        text: '


          # 99 Bottles


          <hr/>


          ## Description


          <hr/>

          Print the words to the "99 bottles" song in a for loop.

          99 bottles of beer on the wall, 99 bottles of beer.

          Take one down and pass it around, 98 bottles of beer on the wall.

          98 bottles of beer on the wall, 98 bottles of beer.

          Take one down and pass it around, 97 bottles of beer on the wall.

          ...

          1 bottle of beer on the wall, 1 bottle of beer.

          Take one down and pass it around, no more bottles of beer on the wall.

          No more bottles of beer on the wall, no more bottles of beer.

          Go to the store and buy some more, 99 bottles of beer on the wall.


          ## Instructions


          <hr/>

          1. Find the 99 Bottles recipe program ( bottles.pde ) and open it using
          Processing.

          2. You can find help for printing the lyrics to this song [here](https://academickids.com/encyclopedia/index.php/99_Bottles_of_Beer).

          3. Do not repeat any of the lyrics in your code - use a for loop!

          4. Look out for the changes you will need to make to the lyrics when you
          get down to 1 or zero

          bottles.




          '
        title: 02 Loop Variables
    03_remainder:
      _readme: ''
      assignments:
      - assignment: 03_remainder
        dir: levels/Level0/Module3/src/_03_remainder/_1_intro_to_remainder
        lesson: 03_remainder
        level: Level0
        module: Module3
        oassignment: 1_intro_to_remainder
        opath: levels/Level0/Module3/src/_03_remainder/_1_intro_to_remainder
        resources: []
        text: "\n\n# Introduction to Remainder\n\nThe remainder operator is represented\
          \ as the percent sign %. This just means the remainder after division. You\
          \ may also hear this be called modulo.\nA common use for remainder is to\
          \ test if a number is odd or even.\nTo do this test, you divide the number\
          \ by 2.\nIf the remainder is zero, the number is even, but if the remainder\
          \ is one, the number is odd. In code this would look like this:\n```\nint\
          \ number = new Random().nextInt(100);\n if (number % 2 == 0) {\n     System.out.println(\"\
          number is even\");\n }\n else {\n     System.out.println(\"number is odd\"\
          );\n }\n```\nAnother use for remainder could be to track every 20 times\
          \ a loop is executed, as follows:\n```\nfor (int i=1; i<=1000; i++) {\n\
          \    // do some code\n    if (i % 20 == 0){\n        System.out.println(\"\
          20 more repeats completed\");\n    }\n}\n```\n\n## Eclipse Recipes\n\nFizzBuzz\n\
          \n## Processing Recipes\n\nBullseye\nBumble Bee\n\n\n"
        title: 03 Remainder
      - assignment: 03_remainder
        dir: levels/Level0/Module3/src/_03_remainder/_2_bullseye/bullseye
        lesson: 03_remainder
        level: Level0
        module: Module3
        oassignment: 2_bullseye
        opath: levels/Level0/Module3/src/_03_remainder/_2_bullseye/bullseye
        resources:
        - levels/Level0/Module3/src/_03_remainder/_2_bullseye/bullseye/.web/bullseye.png
        text: '


          # Bullseye


          <hr/>

          <img alt="Bullseye image" src="http://level0.jointheleague.org/modules/Mod3Recipes/images/bullseye.png"/>


          ## Goal:


          Use remainder to make a bullseye like the image above.


          ## Steps:


          1. This recipe practices using remainder to detect odd and even numbers.

          2. Find the Bullseye recipe program ( bullseye.pde ) and open it using Processing.

          3. Follow the instructions in the code to make a striped bullseye like the
          one in the picture.

          4. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 03 Remainder
      - assignment: 03_remainder
        dir: levels/Level0/Module3/src/_03_remainder/_3_bumble_bee/bumble_bee
        lesson: 03_remainder
        level: Level0
        module: Module3
        oassignment: 3_bumble_bee
        opath: levels/Level0/Module3/src/_03_remainder/_3_bumble_bee/bumble_bee
        resources:
        - levels/Level0/Module3/src/_03_remainder/_3_bumble_bee/bumble_bee/.web/bumbleBee.png
        text: '


          # Bumblebee


          <hr/>

          <img alt="Bumblebee image" src="./images/bumbleBee.png"/>


          ## Goal:


          Draw the bumblebee using a for loop and remainder


          ## Steps:


          1. This recipe practices using remainder and calling methods that use parameters.

          2. Find the Bumble Bee recipe program ( bumble_bee.pde ) and open it using
          Processing.

          3. Follow the instructions in the code to make a long stripy bumble bee
          like the one in the picture.

          4. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 03 Remainder
      - assignment: 03_remainder
        dir: levels/Level0/Module3/src/_03_remainder/_4_fizz_buzz
        lesson: 03_remainder
        level: Level0
        module: Module3
        oassignment: 4_fizz_buzz
        opath: levels/Level0/Module3/src/_03_remainder/_4_fizz_buzz
        resources: []
        text: '


          # Fizz Buzz


          <hr/>

          1, 2, fizz, 4, buzz, ...


          ## Goal:


          Use a for loop and remainder (%) to build FizzBuzz - a children''s counting
          game.


          ## Steps:


          1. Write a loop to print all the numbers between 1 and 20.

          2. Now modify the  program so that any time a number is divisible by 3,
          print "fizz" in place of the number. And instead of printing numbers that
          are divisible by 5, print "buzz". For numbers that are divisible by both
          3 and 5, print "fizzbuzz".

          3. If your code is correct, the program will now print:


          1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz,
          16, 17, fizz, 19, buzz




          '
        title: 03 Remainder
    99_extra:
      _readme: '# 99 Extra


        '
      assignments:
      - assignment: 99_extra
        dir: levels/Level0/Module3/src/_99_extra
        lesson: 99_extra
        level: Level0
        module: Module3
        oassignment: 99_extra
        opath: levels/Level0/Module3/src/_99_extra
        resources: []
        text: '# 99 Extra


          '
        title: 99 Extra
  Module4:
    01_double:
      _readme: ''
      assignments:
      - assignment: 01_double
        dir: levels/Level0/Module4/src/_01_double/_1_change_calculator
        lesson: 01_double
        level: Level0
        module: Module4
        oassignment: 1_change_calculator
        opath: levels/Level0/Module4/src/_01_double/_1_change_calculator
        resources:
        - levels/Level0/Module4/src/_01_double/_1_change_calculator/.web/changeCalculator.jpg
        text: '


          # Change Calculator


          <hr/>

          <img src="./images/changeCalculator.jpg"/>


          ## Goal:


          Use the variable type double to store decimal values and calculate the value
          of the change (coins) the user has.


          ## Steps:


          1. Ask the user how many nickels they have.

          2. Multiply the number of nickels by 0.05 to calculate the dollar value
          of the nickels (i.e. it will be a decimal).

          3. Repeat the above steps for dimes (multiply by 0.10) and quarters (multiply
          by 0.25).

          4. Now calculate the total value of the money and tell the user how much
          they have in dollars and cents format:   e.g.  $3.75




          '
        title: 01 Double
      - assignment: 01_double
        dir: levels/Level0/Module4/src/_01_double/_2_test_scores
        lesson: 01_double
        level: Level0
        module: Module4
        oassignment: 2_test_scores
        opath: levels/Level0/Module4/src/_01_double/_2_test_scores
        resources:
        - levels/Level0/Module4/src/_01_double/_2_test_scores/.web/testScore.png
        text: '


          # Test Scores


          <hr/>

          <img src="./images/testScore.png"/>


          ## Goal:


          Tell the user their grade! Use double variables to allow for decimals,


          ## Steps:


          1. Write code to ask the user for their test score.


          Your program MUST allow the user to enter a test score that has a DECIMAL,
          e.g. 75.5

          2. Give them a different message according to their score.


          Example, for a good score: "Wow! You must have studied really hard for that
          test!"


          HINT: Think about how you would convert a String to an int and use SIMILAR
          code to convert their test score to a double.




          '
        title: 01 Double
    02_boolean:
      _readme: ''
      assignments:
      - assignment: 02_boolean
        dir: levels/Level0/Module4/src/_02_boolean/_1_sleepy_head
        lesson: 02_boolean
        level: Level0
        module: Module4
        oassignment: 1_sleepy_head
        opath: levels/Level0/Module4/src/_02_boolean/_1_sleepy_head
        resources: []
        text: '# 02 Boolean 1 Sleepy Head


          '
        title: 02 Boolean
      - assignment: 02_boolean
        dir: levels/Level0/Module4/src/_02_boolean/_2_star_student
        lesson: 02_boolean
        level: Level0
        module: Module4
        oassignment: 2_star_student
        opath: levels/Level0/Module4/src/_02_boolean/_2_star_student
        resources: []
        text: '# 02 Boolean 2 Star Student


          '
        title: 02 Boolean
      - assignment: 02_boolean
        dir: levels/Level0/Module4/src/_02_boolean/_3_game_over
        lesson: 02_boolean
        level: Level0
        module: Module4
        oassignment: 3_game_over
        opath: levels/Level0/Module4/src/_02_boolean/_3_game_over
        resources: []
        text: '# 02 Boolean 3 Game Over


          '
        title: 02 Boolean
      - assignment: 02_boolean
        dir: levels/Level0/Module4/src/_02_boolean/_4_red_square
        lesson: 02_boolean
        level: Level0
        module: Module4
        oassignment: 4_red_square
        opath: levels/Level0/Module4/src/_02_boolean/_4_red_square
        resources: []
        text: '# 02 Boolean 4 Red Square


          '
        title: 02 Boolean
      - assignment: 02_boolean
        dir: levels/Level0/Module4/src/_02_boolean/_5_googly_eyes
        lesson: 02_boolean
        level: Level0
        module: Module4
        oassignment: 5_googly_eyes
        opath: levels/Level0/Module4/src/_02_boolean/_5_googly_eyes
        resources:
        - levels/Level0/Module4/src/_02_boolean/_5_googly_eyes/.web/googlyEyes.png
        text: "\n\n# Googly Eyes\n\n<hr/>\n<img alt=\"Googly image\" src=\"./images/googlyEyes.png\"\
          />\n\n## Goal:\n\nYou\u2019re going to draw a face with eyes that will follow\
          \ the mouse!\n\n## Steps:\n\n1. Find the Googly Eyes recipe program in Eclipse.\n\
          2. Find an image on the internet and copy it to the /images folder. It can\
          \ be anything as long as it has large eyes!\n3. On line 1 of your program\
          \ (outside of the methods) declare a variable for the image:\n```\n   PImage\
          \ face;\n```\n4. In your setup() method, import your image using the following\
          \ code:\n```\n\n    face = loadImage(\u201Cface.jpg\u201D);\n```\n5. If\
          \ you need to, change the code you just entered so that \"face.jpg\" matches\
          \ the name of your picture.\n6. Set the size of your window and the size\
          \ of your image to be the same by entering the following code in the setup\
          \ method.\n```\n    size(800,600);\n    face.resize(width,height);\n```\n\
          7. In the draw() method, place a white ellipse over the left eye of your\
          \ image.\nHINT: To find out where to put it, add code to print the mouseX\
          \ and mouseY where you click the mouse.\n8. Now add a pupil (the black part)\
          \ to the left eye earlier.\n9. Use mouseX and mouseY to move the left pupil\
          \ where the mouse moves.\n10. Add a white ellipse over the right eye using\
          \ the same technique used for the left eye.\n11. Add a right pupil and make\
          \ it move by using mouseX + [distance from left eye] and mouseY + [distance\
          \ from left eye].\n12. Here\u2019s the tricky part: stop the pupils from\
          \ going outside of the white circles!  To do this, imagine a rectangle that\
          \ the pupil should stay within.  When mouseX and mouseY goes outside of\
          \ these bounds, set it back to the boundary.  Put this code before you draw\
          \ the pupils.\n13. Make sure you SAVE YOUR CODE when you are done.\n\n\n\
          \n"
        title: 02 Boolean
      - assignment: 02_boolean
        dir: levels/Level0/Module4/src/_02_boolean/_6_wheres_waldo
        lesson: 02_boolean
        level: Level0
        module: Module4
        oassignment: 6_wheres_waldo
        opath: levels/Level0/Module4/src/_02_boolean/_6_wheres_waldo
        resources:
        - levels/Level0/Module4/src/_02_boolean/_6_wheres_waldo/.web/waldo.jpg
        text: '


          # Where''s Waldo?


          <hr/>

          <img src="./images/waldo.jpg"/>


          ## Goal:


          Make a program where the user has to find Waldo!


          ## Steps:


          1. Find the Where''s Waldo recipe program in Eclipse.

          2. Find a Where''s Waldo picture and add it to the /images folder.

          3. Follow the instructions in the code to play a sound when the user finds
          Waldo!

          4. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 02 Boolean
    03_char:
      _readme: ''
      assignments:
      - assignment: 03_char
        dir: levels/Level0/Module4/src/_03_char/_2_string_methods
        lesson: 03_char
        level: Level0
        module: Module4
        oassignment: 2_string_methods
        opath: levels/Level0/Module4/src/_03_char/_2_string_methods
        resources: []
        text: '


          # String Methods


          <hr/>

          charAt()length()


          ## Goal:


          Use charAt and length methods to access information in a String variable.


          ## Steps:


          1. Create a String variable and initialize it with some characters (at least
          3).

          2. Use the charAt method to print the 3rd character in the String (remember,
          computers start counting at zero).

          3. Use the length method to print how many characters are in the String.

          4. Use a for loop to examine each character in the String, and when you
          find one that matches the character you are looking for, print its index.




          '
        title: 03 Char
      - assignment: 03_char
        dir: levels/Level0/Module4/src/_03_char/_3_pi_aloud
        lesson: 03_char
        level: Level0
        module: Module4
        oassignment: 3_pi_aloud
        opath: levels/Level0/Module4/src/_03_char/_3_pi_aloud
        resources:
        - levels/Level0/Module4/src/_03_char/_3_pi_aloud/.web/piAloud.png
        text: '


          # Pi Aloud


          <hr/>

          <img src="./images/piAloud.png"/>


          ## Goal:


          Use charAt and length methods to access the digits of pi in a String variable.


          ## Steps:


          1. Place the first 20 digits of pi into a String variable.

          2. Print out the first 3 digits of pi. Remember the first digit will be
          pi.charAt(0).

          3. Use a for loop to print each digit of pi on a new line.

          4. If your computer can play sounds, use the speak method to say each digit
          of pi using a loop.

          5. [CHALLENGE]


          After printing the first 3 digits of pi, ask the user for the next digit
          using the getInputFromUser() method


          Compare the users'' char to the next digit of pi


          If they are correct, print out "correct". If they are not, print "incorrect"




          '
        title: 03 Char
    04_variables_check:
      _readme: '<html>

        <head>

        <title>

        Level 0 - Variable Types Quiz

        </title>

        <meta charset="utf-8"/>

        <meta content="width=device-width, initial-scale=1" name="viewport"/>

        <link href="https://league-central.github.io/curriculum/style/style.css" rel="stylesheet"/>

        <link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet"/>

        <style>


        #quiz {


        margin-left:50px;

        }


        #nav {


        margin-left:50px;

        position: relative;

        }


        #footer {


        position: absolute;

        bottom: -100;

        width: 100%;

        }

        button {background-color:yellow; border-radius: 3px; font-size: 125%;

        }

        code {font-size: 125%; color: forestgreen}

        </style>

        </head>


        <center>


        #


        Level 0 - Variable Types Quiz

        <hr/>

        </center>


        </html>

        '
      assignments:
      - assignment: 04_variables_check
        dir: levels/Level0/Module4/src/_04_variables_check
        lesson: 04_variables_check
        level: Level0
        module: Module4
        oassignment: 04_variables_check
        opath: levels/Level0/Module4/src/_04_variables_check
        resources: []
        text: '<html>

          <head>

          <title>

          Level 0 - Variable Types Quiz

          </title>

          <meta charset="utf-8"/>

          <meta content="width=device-width, initial-scale=1" name="viewport"/>

          <link href="https://league-central.github.io/curriculum/style/style.css"
          rel="stylesheet"/>

          <link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet"/>

          <style>


          #quiz {


          margin-left:50px;

          }


          #nav {


          margin-left:50px;

          position: relative;

          }


          #footer {


          position: absolute;

          bottom: -100;

          width: 100%;

          }

          button {background-color:yellow; border-radius: 3px; font-size: 125%;

          }

          code {font-size: 125%; color: forestgreen}

          </style>

          </head>


          <center>


          #


          Level 0 - Variable Types Quiz

          <hr/>

          </center>


          </html>

          '
        title: 04 Variables Check
    99_extra:
      _readme: "\n\n# Hide The Creeper\n\n<hr/>\n<img src=\"./images/creeper.jpg\"\
        />\n\n## Goal:\n\nFind the Creeper!\n\n## Steps:\n\n1. Find the Hide the Creeper\
        \ recipe program in Eclipse.\n2. Set your canvas size\n```\n\nsize(width,\
        \ height) //in settings method\n```\n3. Download a background image. Something\
        \ with green where creeper can hide.\n\nSave the image.\nDrop the file into\
        \ the /images folder.\nLoad it as the background (it must be same size as\
        \ your canvas)\n```\n\nPImage minecraft = loadImage(\"minecraft.png\");  \
        \   //in setup method\nminecraft.resize(width, height);          //in setup\
        \ method\nbackground(minecraft);          //in setup method\n```\n4. Save\
        \ the image.\n5. Drop the file into the /images folder.\n6. Load it as the\
        \ background (it must be same size as your canvas)\n7. Load the creeper image\
        \ into your sketch\n\nDownload a Creeper image\nDrop the image onto your sketch\n\
        Use the code below to draw the image (make sure you put the code in the right\
        \ place)\n```\n\nPImage creeper;     //at the top of your program\ncreeper=loadImage(\"\
        creeper.png\");     //in setup method\nimage(creeper, mouseX, mouseY);   \
        \  //in draw method\n```\n8. Download a Creeper image\n9. Drop the image onto\
        \ your sketch\n10. Use the code below to draw the image (make sure you put\
        \ the code in the right place)\n11. Right after it\u2019s loaded, resize the\
        \ creeper image so that it is small and can hide.\n```\n\ncreeper.resize(width,\
        \ height);     //in setup method\n```\n12. Pick a place to hide your creeper.\n\
        \nUse two variables to store the location (x and y) of the creeper, and initialize\
        \ them (at the top of your sketch).\nChange your code so that the creeper\
        \ image is drawn at this location.\n13. Use two variables to store the location\
        \ (x and y) of the creeper, and initialize them (at the top of your sketch).\n\
        14. Change your code so that the creeper image is drawn at this location.\n\
        15. In the draw method, draw a small red ellipse where the mouse clicks.\n\
        16. If mouseX and mouseY are near the location of your creeper, make the circle\
        \ green.\nNote: you will need to check the x and y values separately if you\
        \ use the code below.\n```\n\nboolean isNear(int a, int b) {\nif (abs(a -\
        \ b) < 10)\n     return true;\nelse\n     return false;\n}\n```\n17. Let the\
        \ user know that they found the creeper.\n18. Option: Add more creepers, or\
        \ move the creeper after they find it.\n\n\n\n"
      assignments:
      - assignment: 99_extra
        dir: levels/Level0/Module4/src/_99_extra
        lesson: 99_extra
        level: Level0
        module: Module4
        oassignment: 99_extra
        opath: levels/Level0/Module4/src/_99_extra
        resources:
        - levels/Level0/Module4/src/_99_extra/.web/PinTheTail.png
        - levels/Level0/Module4/src/_99_extra/.web/creeper.jpg
        text: "\n\n# Hide The Creeper\n\n<hr/>\n<img src=\"./images/creeper.jpg\"\
          />\n\n## Goal:\n\nFind the Creeper!\n\n## Steps:\n\n1. Find the Hide the\
          \ Creeper recipe program in Eclipse.\n2. Set your canvas size\n```\n\nsize(width,\
          \ height) //in settings method\n```\n3. Download a background image. Something\
          \ with green where creeper can hide.\n\nSave the image.\nDrop the file into\
          \ the /images folder.\nLoad it as the background (it must be same size as\
          \ your canvas)\n```\n\nPImage minecraft = loadImage(\"minecraft.png\");\
          \     //in setup method\nminecraft.resize(width, height);          //in\
          \ setup method\nbackground(minecraft);          //in setup method\n```\n\
          4. Save the image.\n5. Drop the file into the /images folder.\n6. Load it\
          \ as the background (it must be same size as your canvas)\n7. Load the creeper\
          \ image into your sketch\n\nDownload a Creeper image\nDrop the image onto\
          \ your sketch\nUse the code below to draw the image (make sure you put the\
          \ code in the right place)\n```\n\nPImage creeper;     //at the top of your\
          \ program\ncreeper=loadImage(\"creeper.png\");     //in setup method\nimage(creeper,\
          \ mouseX, mouseY);     //in draw method\n```\n8. Download a Creeper image\n\
          9. Drop the image onto your sketch\n10. Use the code below to draw the image\
          \ (make sure you put the code in the right place)\n11. Right after it\u2019\
          s loaded, resize the creeper image so that it is small and can hide.\n```\n\
          \ncreeper.resize(width, height);     //in setup method\n```\n12. Pick a\
          \ place to hide your creeper.\n\nUse two variables to store the location\
          \ (x and y) of the creeper, and initialize them (at the top of your sketch).\n\
          Change your code so that the creeper image is drawn at this location.\n\
          13. Use two variables to store the location (x and y) of the creeper, and\
          \ initialize them (at the top of your sketch).\n14. Change your code so\
          \ that the creeper image is drawn at this location.\n15. In the draw method,\
          \ draw a small red ellipse where the mouse clicks.\n16. If mouseX and mouseY\
          \ are near the location of your creeper, make the circle green.\nNote: you\
          \ will need to check the x and y values separately if you use the code below.\n\
          ```\n\nboolean isNear(int a, int b) {\nif (abs(a - b) < 10)\n     return\
          \ true;\nelse\n     return false;\n}\n```\n17. Let the user know that they\
          \ found the creeper.\n18. Option: Add more creepers, or move the creeper\
          \ after they find it.\n\n\n\n"
        title: 99 Extra
      - assignment: 99_extra
        dir: levels/Level0/Module4/src/_99_extra/hide_the_creeper
        lesson: 99_extra
        level: Level0
        module: Module4
        oassignment: hide_the_creeper
        opath: levels/Level0/Module4/src/_99_extra/hide_the_creeper
        resources:
        - levels/Level0/Module4/src/_99_extra/hide_the_creeper/.web/creeper.jpg
        text: "\n\n# Hide The Creeper\n\n<hr/>\n<img src=\"./images/creeper.jpg\"\
          />\n\n## Goal:\n\nFind the Creeper!\n\n## Steps:\n\n1. Find the Hide the\
          \ Creeper recipe program in Eclipse.\n2. Set your canvas size\n```\n\nsize(width,\
          \ height) //in settings method\n```\n3. Download a background image. Something\
          \ with green where creeper can hide.\n\nSave the image.\nDrop the file into\
          \ the /images folder.\nLoad it as the background (it must be same size as\
          \ your canvas)\n```\n\nPImage minecraft = loadImage(\"minecraft.png\");\
          \     //in setup method\nminecraft.resize(width, height);          //in\
          \ setup method\nbackground(minecraft);          //in setup method\n```\n\
          4. Save the image.\n5. Drop the file into the /images folder.\n6. Load it\
          \ as the background (it must be same size as your canvas)\n7. Load the creeper\
          \ image into your sketch\n\nDownload a Creeper image\nDrop the image onto\
          \ your sketch\nUse the code below to draw the image (make sure you put the\
          \ code in the right place)\n```\n\nPImage creeper;     //at the top of your\
          \ program\ncreeper=loadImage(\"creeper.png\");     //in setup method\nimage(creeper,\
          \ mouseX, mouseY);     //in draw method\n```\n8. Download a Creeper image\n\
          9. Drop the image onto your sketch\n10. Use the code below to draw the image\
          \ (make sure you put the code in the right place)\n11. Right after it\u2019\
          s loaded, resize the creeper image so that it is small and can hide.\n```\n\
          \ncreeper.resize(width, height);     //in setup method\n```\n12. Pick a\
          \ place to hide your creeper.\n\nUse two variables to store the location\
          \ (x and y) of the creeper, and initialize them (at the top of your sketch).\n\
          Change your code so that the creeper image is drawn at this location.\n\
          13. Use two variables to store the location (x and y) of the creeper, and\
          \ initialize them (at the top of your sketch).\n14. Change your code so\
          \ that the creeper image is drawn at this location.\n15. In the draw method,\
          \ draw a small red ellipse where the mouse clicks.\n16. If mouseX and mouseY\
          \ are near the location of your creeper, make the circle green.\nNote: you\
          \ will need to check the x and y values separately if you use the code below.\n\
          ```\n\nboolean isNear(int a, int b) {\nif (abs(a - b) < 10)\n     return\
          \ true;\nelse\n     return false;\n}\n```\n17. Let the user know that they\
          \ found the creeper.\n18. Option: Add more creepers, or move the creeper\
          \ after they find it.\n\n\n\n"
        title: 99 Extra
      - assignment: 99_extra
        dir: levels/Level0/Module4/src/_99_extra/pin_the_tail
        lesson: 99_extra
        level: Level0
        module: Module4
        oassignment: pin_the_tail
        opath: levels/Level0/Module4/src/_99_extra/pin_the_tail
        resources:
        - levels/Level0/Module4/src/_99_extra/pin_the_tail/.web/PinTheTail.png
        text: "\n\n# Pin the Tail on the Donkey\n\n<hr/>\n<img src=\"./images/PinTheTail.png\"\
          />\n\n## Goal:\n\nThe player of the game has to click the mouse where the\
          \ donkey's tail will go. The problem is, the picture keeps disappearing!\n\
          \n## Steps:\n\nThis recipe uses two bounding boxes. One is in the top left\
          \ corner of the sketch, the other is a target area where the donkey tail\
          \ should be pinned. In the recipe image, the bounding boxes are colored\
          \ green to help demonstrate the concept, but you won't see them when playing\
          \ the actual game.\n1. Find the Pin the Tail recipe program in Eclipse.\n\
          2. Find a picture of a donkey and a separate picture of a tail (tail needs\
          \ a transparent background).\n\nSave the images to your Desktop.\nDrag and\
          \ drop each file onto your sketch.\n3. Save the images to your Desktop.\n\
          4. Drag and drop each file onto your sketch.\n5. Load the pictures into\
          \ variables as follows.\n\nFirst create (declare) variables to hold the\
          \ images at the top of the sketch.\n```\n\nPImage donkey;\nPImage tail;\n\
          ```\n\nIn the setup() method, set the variables to hold the images.\n```\n\
          \ndonkey = loadImage(\"donkey.jpg\");      //change the file name if you\
          \ need to\ntail = loadImage(\"tail.png\");      //change the file name if\
          \ you need to\n```\n6. First create (declare) variables to hold the images\
          \ at the top of the sketch.\n```\n\nPImage donkey;\nPImage tail;\n```\n\
          7. In the setup() method, set the variables to hold the images.\n```\n\n\
          donkey = loadImage(\"donkey.jpg\");      //change the file name if you need\
          \ to\ntail = loadImage(\"tail.png\");      //change the file name if you\
          \ need to\n```\n8. In the setup() method, set your canvas size to EXACTLY\
          \ match the size of the donkey image. You can get the size of the image\
          \ from the file information on the Desktop.\n```\n\nsize(width, height);\
          \     //replace width, height with your picture's dimensions\n```\n9. Draw\
          \ the donkey and tail in the draw() method. The tail should move around\
          \ with the mouse. Try it!\n```\n\nbackground (donkey);\nimage(tail, mouseX,\
          \ mouseY);\n```\n10. If you need to, resize the tail to fit onto the donkey.\
          \ Since this is done ONCE, put this code into the setup() method.\nNote:\
          \ if you leave height or width as zero, the image will scale proportionally.\n\
          ```\n\ntail.resize(width, height);     //replace width, height with your\
          \ tail's dimensions\n```\n11. If the top of the tail is not in the top left\
          \ corner of your image, you will have to adjust the x and y values so that\
          \ the top of the tail is drawn where you click the mouse. To do this, you\
          \ would need to adjust the x and y values to make your image work as shown\
          \ below.\n```\n\nimage(tail, mouseX-10, mouseY-20);\n```\n12. Now we are\
          \ going to start adding bounding boxes! These should go in the draw() method,\
          \ AFTER the background is drawn!\n\nFirst draw a bounding box (rectangle)\
          \ in the top left corner of the sketch.\n```\n\nrect(0, 0, 30, 30);\n```\n\
          \nNow we need to draw another bounding box where the tail should go. You\
          \ can use mousePressed to help you figure out the x and y coordinates of\
          \ the corner of this rectangle (see the picture at the top of this page\
          \ for an idea of what this will look like). Example:\n```\n\nrect(454, 75,\
          \ 40, 40);\n```\n13. First draw a bounding box (rectangle) in the top left\
          \ corner of the sketch.\n```\n\nrect(0, 0, 30, 30);\n```\n14. Now we need\
          \ to draw another bounding box where the tail should go. You can use mousePressed\
          \ to help you figure out the x and y coordinates of the corner of this rectangle\
          \ (see the picture at the top of this page for an idea of what this will\
          \ look like). Example:\n```\n\nrect(454, 75, 40, 40);\n```\n15. Now, change\
          \ your code so the donkey is only shown when the mouse is inside the corner\
          \ bounding box. Hint: use the dist() command:\n```\n\ndist(0, 0, mouseX,\
          \ mouseY) < 30\n```\n\nWhen the mouse is outside the corner box, you should\
          \ show a solid color background.\n16. Now, adjust your code so the tail\
          \ sticks when you click the mouse (this means it will no longer move when\
          \ the mouse moves). Hint: you will need to save the x and y values in variables\
          \ at the top of your sketch.\n17. When the tail has been pinned, write code\
          \ to check if the tail was pinned inside the target bounding box. You can\
          \ use dist() like you did earlier, or you can write your own code to check\
          \ it another way. Show the donkey so the user knows where they pinned the\
          \ tail.\n18. If the tail is in the right place, the player wins and you\
          \ play a sound. To play a sound use the following code\n```\n\n    playWhoohoo()\n\
          ```\n19. When you have tested that your pogram works, remove the line of\
          \ code that draws the tail target bounding box and see if you can pin the\
          \ tail on the donkey.\n20. Make sure you SAVE YOUR CODE when you are done.\n\
          21. OPTION: Add some text to give the user instructions on how to play the\
          \ game.\n```\n\ntextSize(24);\ntext(\"Message\",100,20);\n```\n\n\n\n"
        title: 99 Extra
      - assignment: 99_extra
        dir: levels/Level0/Module4/src/_99_extra/pong
        lesson: 99_extra
        level: Level0
        module: Module4
        oassignment: pong
        opath: levels/Level0/Module4/src/_99_extra/pong
        resources:
        - levels/Level0/Module4/src/_99_extra/pong/.web/pong.png
        text: "\n\n# Pong\n\n<hr/>\n<img src=\"./images/pong.png\"/>\n\n## Goal:\n\
          \nMake a Pong game using Processing!\n\n## Steps:\n\n1. Draw a ball on the\
          \ screen.\n```\n\nellipse(x, y, width, height) //in draw method\nfill(red,\
          \ green, blue) //in draw method\nstroke(red, green, blue) //in draw method\n\
          ```\n2. Make the ball move across the screen (left to right).\n...make a\
          \ variable for the ball's X position and change it in the draw method.\n\
          3. Change the speed of the ball.\n\nmake a variable for the speed of the\
          \ ball in the X direction (from left to right).\nchanging this variable\
          \ should change the speed of your ball\n4. make a variable for the speed\
          \ of the ball in the X direction (from left to right).\n5. changing this\
          \ variable should change the speed of your ball\n6. Make the ball bounce\
          \ off of the walls.\n```\n\nif(x > width){\n    xSpeed = -xSpeed;\n}\n```\n\
          7. Do the same in the Y (up and down) direction.\n(hint) height\n8. Add\
          \ a background image for your game.\n```\n\nPImage backgroundImage; //at\
          \ the top of your sketch\nbackgroundImage = loadImage(\"image.jpg\"); //in\
          \ the setup method\nimage(backgroundImage, 0, 0); //in draw method\nimage(backgroundImage,\
          \ 0, 0, width, height); //if you want to resize\n```\n9. Draw a paddle at\
          \ the bottom of the screen\n```\n\nrect(x, y, width, height);\n```\n10.\
          \ Use mouseX to make the paddle move over and back with the mouse.\n11.\
          \ Make the ball change Y direction when it hits the paddle. Figure it out\
          \ by yourself, or use this\nmethod:\n```\n\nboolean intersects(int ballX,\
          \ int ballY, int paddleX, int paddleY,\nint paddleLength) {\n    if (ballY\
          \ > paddleY && ballX > paddleX && ballX < paddleX + paddleLength)\n    \
          \    return true;\n    else\n        return false;\n}\n```\n12. Make sure\
          \ you SAVE YOUR CODE when you are done.\n\n\n\n"
        title: 99 Extra
  Module5:
    01_algorithms:
      _readme: ''
      assignments:
      - assignment: 01_algorithms
        dir: levels/Level0/Module5/src/_01_algorithms/_1_prime_or_not
        lesson: 01_algorithms
        level: Level0
        module: Module5
        oassignment: 1_prime_or_not
        opath: levels/Level0/Module5/src/_01_algorithms/_1_prime_or_not
        resources:
        - levels/Level0/Module5/src/_01_algorithms/_1_prime_or_not/.web/prime.png
        text: '


          # Prime or Not


          <hr/>

          <img src="./images/prime.png"/>


          ## Goal:


          Ask the user for a number, then tell them if the number is prime!

          A prime number is a number that is only divisible by 1 and itself.


          ## Steps:


          1. Ask the user for a number (JOptionPane).

          2. Use a for loop, if statement, and modulo to find if the number is prime.

          3. If the number is divisible by any number other than 1 or itself, the
          number is not prime.




          '
        title: 01 Algorithms
      - assignment: 01_algorithms
        dir: levels/Level0/Module5/src/_01_algorithms/_2_fibonacci
        lesson: 01_algorithms
        level: Level0
        module: Module5
        oassignment: 2_fibonacci
        opath: levels/Level0/Module5/src/_01_algorithms/_2_fibonacci
        resources:
        - levels/Level0/Module5/src/_01_algorithms/_2_fibonacci/.web/fibonacci.png
        text: '


          # Fibonacci


          <hr/>

          <img src="./images/fibonacci.png"/>


          ## Goal:


          Print out the first 12 numbers of the fibonacci sequence.


          ## Steps:


          1. There is more than one way to code a solution to this. The following
          steps give you some guidelines for one of them.

          2. Declare and initialize three int variables: number1, number2, and sum.

          3. Initialize number1 and number2 to the first two numbers of the fibonacci
          sequence (0 and 1) and print both numbers.

          4. Use a for loop that calculates the sum of the two numbers and prints
          it. The for loop should repeat 10 times.

          5. Now try to figure out how to change the variables before the for loop
          repeats so the sequence of numbers is correct.




          '
        title: 01 Algorithms
      - assignment: 01_algorithms
        dir: levels/Level0/Module5/src/_01_algorithms/_3_goofy_names
        lesson: 01_algorithms
        level: Level0
        module: Module5
        oassignment: 3_goofy_names
        opath: levels/Level0/Module5/src/_01_algorithms/_3_goofy_names
        resources: []
        text: '


          # Goofy Names


          <hr/>

          GoOfY NaMeS


          ## Goal:


          Write an algorithm to change a String into a "goofy" version.


          ## Steps:


          1. Ask the user to enter their name.

          2. Use a loop to alternately modify each character of the name into uppercase
          and lowercase letters until a new "goofy" representation of their name has
          been constructed.


          For example, if they enter their name as Alexander Hamilton


          their goofy name will be AlExAnDeR HaMiLtOn

          3. Show the user the goofy version of their name in a pop-up.




          '
        title: 01 Algorithms
    02_nested_loops:
      _readme: ''
      assignments:
      - assignment: 02_nested_loops
        dir: levels/Level0/Module5/src/_02_nested_loops/_1_snowflake
        lesson: 02_nested_loops
        level: Level0
        module: Module5
        oassignment: 1_snowflake
        opath: levels/Level0/Module5/src/_02_nested_loops/_1_snowflake
        resources:
        - levels/Level0/Module5/src/_02_nested_loops/_1_snowflake/.web/snowflake.png
        text: '


          # Snowflake


          <hr/>

          <img src="./images/snowflake.png"/>


          ## Goal:


          Use nested for loops to draw a multi-colored snowflake.


          ## Steps:


          1. This recipe introduces using nested for loops (where one for loop is
          inside another for loop).

          2. Follow the instructions in the code to complete this recipe.

          3. When complete the Robot should draw the pattern shown here.




          '
        title: 02 Nested Loops
      - assignment: 02_nested_loops
        dir: levels/Level0/Module5/src/_02_nested_loops/_2_amazing_rings
        lesson: 02_nested_loops
        level: Level0
        module: Module5
        oassignment: 2_amazing_rings
        opath: levels/Level0/Module5/src/_02_nested_loops/_2_amazing_rings
        resources:
        - levels/Level0/Module5/src/_02_nested_loops/_2_amazing_rings/.web/amazingRings.png
        text: '


          # Amazing Rings


          <hr/>

          <img alt="Amazing Rings image" src="./images/amazingRings.png"/>


          ## Goal:


          Use Processing to make this using for loops and if statements.


          ## Steps:


          1. This recipe practices using for loops and if statements.

          2. Find the Amazing Rings recipe program in Eclipse.

          3. Follow the instructions in the code to make the rings move from side
          to side in the sketch.

          4. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 02 Nested Loops
      - assignment: 02_nested_loops
        dir: levels/Level0/Module5/src/_02_nested_loops/_3_for_loop_gauntlet
        lesson: 02_nested_loops
        level: Level0
        module: Module5
        oassignment: 3_for_loop_gauntlet
        opath: levels/Level0/Module5/src/_02_nested_loops/_3_for_loop_gauntlet
        resources: []
        text: "\n\n# For Loop Gauntlet\n\nThe goal of this assignment is to make you\
          \ a master of utilizing for loops. Complete all the for loop challenges\
          \ on the paper. Please read each challenge carefully and make sure that\
          \ your for loops display exactly what is asked. If you finish them all,\
          \ try the bonus challenge.\n\n### Single For-Loops\n\nWrite a for loop to\
          \ do each the following:\n1. Display all numbers from 0 to 100\n2. Display\
          \ all numbers from 100 to 0\n3. Display all even numbers from 2 to 100\n\
          4. Display all odd numbers from 1 to 99\n5. Display all numbers from 1 to\
          \ 500. If the number is odd, print \u201Codd\u201D next to the number. If\
          \ the number is even, print \u201Ceven\u201D next to the number.\nEg:\n\
          1 is odd\n2 is even\n3 is odd\n4 is even\n5 is odd...etc.\n6. Display all\
          \ multiples of 7 from 0 to 777.\n7. Print all the years you were alive and\
          \ how old you were in each. e.g. \u201CIn 1979, i was 2 years old.\u201D\
          \ (for a really old person)\n\n### Nested For-Loops\n\nWrite nested for\
          \ loops (a for loop inside another for loop) to do the following:\n\n1.\
          \ Display this output:\n0  0\n0  1\n0  2\n1  0\n1  1\n1  2\n2  0\n2  1\n\
          2  2\n2. Display the numbers 1 through 9 in a 3x3 square grid like this:\n\
          1  2  3\n4  5  6\n7  8  9\n3. Display the numbers 1 through 100 in a 10x10\
          \ square grid.\n4. Display the following output:\n*\n*  *\n*  *  *\n*  *\
          \  *  *\n*  *  *  *  *\n*  *  *  *  *  *\n\n### **Bonus**\n\nWrite a for\
          \ loop that counts down from 100 to 0. However, the for loop must start\
          \ with for(int i = 0;  and you may NOT have any code ABOVE your for loop.\n\
          \n"
        title: 02 Nested Loops
    03_method_writing:
      _readme: ''
      assignments:
      - assignment: 03_method_writing
        dir: levels/Level0/Module5/src/_03_method_writing/_1_intro_to_methods
        lesson: 03_method_writing
        level: Level0
        module: Module5
        oassignment: 1_intro_to_methods
        opath: levels/Level0/Module5/src/_03_method_writing/_1_intro_to_methods
        resources: []
        text: '# 03 Method Writing 1 Intro To Methods


          '
        title: 03 Method Writing
      - assignment: 03_method_writing
        dir: levels/Level0/Module5/src/_03_method_writing/_1_obedient_robot
        lesson: 03_method_writing
        level: Level0
        module: Module5
        oassignment: 1_obedient_robot
        opath: levels/Level0/Module5/src/_03_method_writing/_1_obedient_robot
        resources:
        - levels/Level0/Module5/src/_03_method_writing/_1_obedient_robot/.web/robot.png
        text: '


          # Obedient Robot


          <hr/>

          <img src="./images/robot.png"/>


          ## Goal:


          Make an obedient robot that will obey commands to draw shapes.


          ## Steps:


          1. This recipe practices writing and calling void methods.

          2. Make a new class, create a main method, and show the robot.

          3. Have the robot draw a square.

          4. Put this code into a drawSquare() method.

          5. Have the robot draw a triangle.

          6. Put this code into a drawTriangle() method.

          7. Have the robot draw a circle.

          8. Put this code into a drawCircle() method.

          9. Ask the user which shape they want. Draw the appropriate shape depending
          on their answer (call the right method).

          10. Ask the user which color they want. Give them some choices so you don''t
          have to accomodate every possible color. Color the the shape depending on
          their answer.




          '
        title: 03 Method Writing
      - assignment: 03_method_writing
        dir: levels/Level0/Module5/src/_03_method_writing/_2_happy_pet
        lesson: 03_method_writing
        level: Level0
        module: Module5
        oassignment: 2_happy_pet
        opath: levels/Level0/Module5/src/_03_method_writing/_2_happy_pet
        resources:
        - levels/Level0/Module5/src/_03_method_writing/_2_happy_pet/.web/happyPet.png
        text: '


          # Happy Pet


          <hr/>

          <img src="./images/happyPet.png"/>


          ## Goal:


          Write methods to represent the activities that will make the user''s pet
          happy.


          ## Steps:


          1. Ask the user to enter the type of pet they want (give them a few choices).

          2. Use a loop (maybe a while loop?) to keep offering interactions with their
          pet until the desired pet happiness level has been reached. Examples of
          activities are:   Feed, Walk, Play

          3. Write a method for each of the pet activities offered. Each activity
          should increase (or decrease) the pet''s happiness level by a different
          amount, depending on the kind of pet they have. For example, a fish might
          not enjoy a walk!




          '
        title: 03 Method Writing
      - assignment: 03_method_writing
        dir: levels/Level0/Module5/src/_03_method_writing/_4_calculator
        lesson: 03_method_writing
        level: Level0
        module: Module5
        oassignment: 4_calculator
        opath: levels/Level0/Module5/src/_03_method_writing/_4_calculator
        resources: []
        text: '# 03 Method Writing 4 Calculator


          '
        title: 03 Method Writing
    04_practice:
      _readme: ''
      assignments:
      - assignment: 04_practice
        dir: levels/Level0/Module5/src/_04_practice/_1_skill_practice
        lesson: 04_practice
        level: Level0
        module: Module5
        oassignment: 1_skill_practice
        opath: levels/Level0/Module5/src/_04_practice/_1_skill_practice
        resources: []
        text: '


          # Skill Practice Worksheet


          public class SkillPractice {

          public static void main(String[] args) {


          SkillPractice skills = new SkillPractice();

          skills.skill1();

          skills.skill2();

          skills.skill3();

          skills.skill4();

          skills.skill5();

          }


          void skill1() {

          // Use pop-ups for the following.

          // Ask the user how many dimes they have


          // Tell them how many cents they have (hint multiply by 10)


          // Ask the user how tall they are (inches)


          // If they are shorter than 36 inches, tell them to eat their Wheaties


          }


          void skill2() {

          // Write a loop to print every third number between 1 and 30 to the console


          }


          void skill3() {

          // Get a random number that is less than 20 and print it to the console


          // Get another random number that is less than 10 and print it to the console


          // Using a pop-up, tell the user the difference between the numbers

          // Hint: use subtraction


          }


          void skill4() {

          // In a pop-up, ask the user for the city they live in


          // If they answered "San Diego", tell them they live in America''s Finest
          City


          // Otherwise, tell them to move to San Diego


          // Create a variable - cars - and initialize it to the number of cars your
          family has.

          // If there are 0 cars, use a pop-up to display, "I bet you use public transportation."


          // If there is 1 car, use a pop-up to display the make/model of the car


          // If there is more than 1 car, use a pop-up to display how many wheels
          the

          // cars have between them.


          }


          void skill5() {

          // In a pop-up, ask the user for the name of their school


          // In another pop-up, tell the user, that their school is a fantastic school.

          // You must include the name of the school in the message.


          }


          }


          '
        title: 04 Practice
      - assignment: 04_practice
        dir: levels/Level0/Module5/src/_04_practice/_2_code_4_life
        lesson: 04_practice
        level: Level0
        module: Module5
        oassignment: 2_code_4_life
        opath: levels/Level0/Module5/src/_04_practice/_2_code_4_life
        resources: []
        text: '# 04 Practice 2 Code 4 Life


          '
        title: 04 Practice
    05_self_tests:
      _readme: ''
      assignments:
      - assignment: 05_self_tests
        dir: levels/Level0/Module5/src/_05_self_tests/_1_which_data_type_1
        lesson: 05_self_tests
        level: Level0
        module: Module5
        oassignment: 1_which_data_type_1
        opath: levels/Level0/Module5/src/_05_self_tests/_1_which_data_type_1
        resources: []
        text: "\n\n# The League of Amazing Programmers\n\n\n## Which Data Type?\n\n\
          \n### Fill in the blank with the correct data type.\n\n```\n\n   x = 5;\
          \ \n\n  \n   age = 12; \n\n  \n   name = \"Thadius\"; \n\n  \n   location\
          \ = \"San Diego\"; \n\n  \n   totalParties = 5400; \n\n  \n   value =  JOptionPane.showInputDialog(\"\
          Enter some data\");\n\n  \n   input = JOptionPane.showInputDialog(\"Enter\
          \ your age\"); \n\n   inputAsInteger = Integer.parseInt(input); \n\n  \n\
          \nSUBMIT YOUR ANSWERS\n```\n<hr size=\"3\"/>\n\n"
        title: 05 Self Tests
      - assignment: 05_self_tests
        dir: levels/Level0/Module5/src/_05_self_tests/_2_which_data_type_2
        lesson: 05_self_tests
        level: Level0
        module: Module5
        oassignment: 2_which_data_type_2
        opath: levels/Level0/Module5/src/_05_self_tests/_2_which_data_type_2
        resources: []
        text: "\n\n# The League of Amazing Programmers\n\n\n## Which Data Type? Part\
          \ 2\n\n\n### Fill in the blank with the correct data type.\n\n```\n\n  \
          \ maxValue = 1000000; \n\n  \n   someWords = \"Here are some words\"; \n\
          \n  \n   c3PO = new Robot(); \n\n  \n   rand = new Random(); \n\n  \n  \
          \ minValue = -23; \n\n  \n   value =  JOptionPane.showInputDialog(\"Enter\
          \ some data\");\n\n  \n   myObject = new Object(); \n\n  \n   randValue\
          \ = random.nextInt(); \n\n  \n\nSUBMIT YOUR ANSWERS\n```\n<hr size=\"3\"\
          />\n\n"
        title: 05 Self Tests
      - assignment: 05_self_tests
        dir: levels/Level0/Module5/src/_05_self_tests/_3_whats_the_output
        lesson: 05_self_tests
        level: Level0
        module: Module5
        oassignment: 3_whats_the_output
        opath: levels/Level0/Module5/src/_05_self_tests/_3_whats_the_output
        resources: []
        text: "\n\n# The League of Amazing Programmers\n\n\n## What's the Output?\n\
          \n\n### Each number is a complete Java program. If you were to run this\
          \ program, what output would show up on the screen?\n\nType your answers\
          \ in the box. Read each question carefully. Your answers must be exact.\n\
          ```\n\n1.\nclass MyJavaProgram{\n\tpublic static void main(String[] args){\n\
          \t\tSystem.out.println(\"Tacos\");\n\t}\n}\n\n2.\nclass MyJavaProgram{\n\
          \tpublic static void main(String[] args){\n\t\tString book = \"Cat in the\
          \ Hat\";\n\t\tSystem.out.println(book);\n\t}\n}\n\n3.\nclass MyJavaProgram{\n\
          \tpublic static void main(String[] args){\n\t\tString book = \"Frankenstein\"\
          ;\n\t\tSystem.out.println(book + \" \" + book);\n\t}\n}\n\n4.\nclass MyJavaProgram{\n\
          \tpublic static void main(String[] args){\n\t\tString book = \"Tale of Two\
          \ Cities\";\n\t\tSystem.out.println(\"book\");\n\t}\n}\n\n5.\nclass MyJavaProgram{\n\
          \tpublic static void main(String[] args){\n\t\tint i = 5;\n\t\tSystem.out.println(i);\n\
          \t}\n}\n\n6.\nclass MyJavaProgram{\n\tpublic static void main(String[] args){\n\
          \t\tint x = -3;\n\t\tint y = 6;\n\t\tSystem.out.println(x + y);\n\t}\n}\n\
          \n7.\nclass MyJavaProgram{\n\tpublic static void main(String[] args){\n\t\
          \tint s = 4;\n\n\t\tif(s == 4){\n\t\t\tSystem.out.println(\"FOUR\");\n\t\
          \t} \n\t\telse {\n\t\t\tSystem.out.println(\"FIVE\");\n\t\t}\n\t}\n}\n\n\
          8.\nclass MyJavaProgram{\n\tpublic static void main(String[] args){\n\t\t\
          int j = 1;\n\n\t\tif(j > 0){\n\t\t\tSystem.out.println(\"CLICK\");\n\t\t\
          } \n\t\telse if ( j == 2){\n\t\t\tSystem.out.println(\"CLICK\");\n\t\t}\n\
          \n\t\tSystem.out.println(\"CLICK\");\n\n\t}\n}\n\n9.\nclass MyJavaProgram{\n\
          \tpublic static void main(String[] args){\n\t\tint j = 1;\n\t\tint k = 2;\n\
          \n\t\tif(j != k){\n\t\t\tSystem.out.println(\"1\");\n\t\t} \n\t\telse if\
          \ (k != j){\n\t\t\tSystem.out.println(\"2\");\n\t\t}\n\t\telse{\n\t\t\t\
          System.out.println(\"3\");\n\n\t\t}\n\n\t\tSystem.out.println(\"4\");\n\n\
          \t}\n}\n\n10.\nclass MyJavaProgram{\n\tpublic static void main(String[]\
          \ args){\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tint k = 2;\n\n\t\tif(i ==\
          \ 0){\n\t\t\tSystem.out.println(i);\n\t\t}\n\t\tif(j == 1){\n\t\t\tSystem.out.println(j);\n\
          \t\t}\n\t\tif(k == 2){\n\t\t\tSystem.out.println(k);\n\t\t}\n\t}\n}\n\n\
          11.\nclass MyJavaProgram{\n\tpublic static void main(String[] args){\n\t\
          \tString x = \"X\";\n\t\tString y = \"Y\";\n\n\t\tSystem.out.print(x);\n\
          \t\tSystem.out.print(y);\n\t}\n}\n\n12.\nclass MyJavaProgram{\n\tpublic\
          \ static void main(String[] args){\n\t\tString a = \"A\";\n\t\tString b\
          \ = \"B\";\n\t\tString c = \"C\";\n\n\t\tSystem.out.print(c + a + b);\n\t\
          }\n}\n\n13.\nclass MyJavaProgram{\n\tpublic static void main(String[] args){\n\
          \t\tString a = \"C\";\n\t\tString b = \"B\";\n\t\tString c = \"A\";\n\n\t\
          \tSystem.out.print(c + a + b);\n\t}\n}\n\n14.\nclass MyJavaProgram{\n\t\
          public static void main(String[] args){\n\t\tfor(int i = 0; i < 5; i++){\n\
          \t\t\tSystem.out.print(i);\n\t\t}\n\t}\n}\n\n15.\nclass MyJavaProgram{\n\
          \tpublic static void main(String[] args){\n\t\tfor(int i = 5; i >= 0; i--){\n\
          \t\t\tSystem.out.println(i);\n\t\t}\n\t}\n}\n\n16.\nclass MyJavaProgram{\n\
          \tpublic static void main(String[] args){\n\t\tString h = \"horse\";\n\t\
          \tfor(int i = 5; i >= 0; i--){\n\t\t\tSystem.out.println(h);\n\t\t}\n\t\
          }\n}\n\n17.\nclass MyJavaProgram{\n\tpublic static void main(String[] args){\n\
          \t\tString d = \"dynomite\";\n\t\tfor(int i = 5; i >= 0; i--){\n\t\t\tSystem.out.println(i);\n\
          \t\t}\n\t\tSystem.out.println(d);\n\t}\n}\n\n18.\nclass MyJavaProgram{\n\
          \tpublic static void main(String[] args){\n\t\tfor(int i = 0; i < 20; i++){\n\
          \t\t\tif(i % 2 == 0){\n\t\t\t\tSystem.out.print(i + \", \");\n\t\t\t}\n\t\
          \t}\n\t}\n}\n\n19.\nclass MyJavaProgram{\n\tpublic static void main(String[]\
          \ args){\n\t\tString count = \"\";\n\t\tfor(int i = 5; i >= 0; i--){\n\t\
          \t\tcount += \"count\" + i + \" \";\n\t\t}\n\t\tSystem.out.println(count);\n\
          \t}\n}\n\n20.\nclass MyJavaProgram{\n\tpublic static void main(String[]\
          \ args){\n\t\tint x = 7;\n\n\t\tfor(int i = 0; i < 22; i++){\n\t\t\tif(i\
          \ % x == 0){\n\t\t\t\tSystem.out.print(i + \", \");\n\t\t\t}\n\t\t}\n\t\
          }\n}\n\nSUBMIT YOUR ANSWERS\n```\n<hr size=\"3\"/>\n\n"
        title: 05 Self Tests
      - assignment: 05_self_tests
        dir: levels/Level0/Module5/src/_05_self_tests/_4_missing_mustaches
        lesson: 05_self_tests
        level: Level0
        module: Module5
        oassignment: 4_missing_mustaches
        opath: levels/Level0/Module5/src/_05_self_tests/_4_missing_mustaches
        resources: []
        text: "\n\n# The League of Amazing Programmers\n\n\n## Moustaches\n\n\n###\
          \ Put the moustaches where they belong\n\n```\n\n  \npublic class Moustache2\n\
          \n      public static void main(String[] args) \n\n          \tfor (int\
          \ j = 0; j < 10; j++) \n\n                  if (input.equals(\"are cool\"\
          ))\n\n                      for (int i = 0; i < 50; i++) \n\n          \
          \                  System.out.println(\"{}\");\n\n                  else\
          \ \n\n                        System.out.println(\"you don't like moustaches...\
          \ no soup for you\");\n\n \n\n  \n  \n\nSUBMIT YOUR ANSWER\n```\n<hr size=\"\
          3\"/>\n\n"
        title: 05 Self Tests
      - assignment: 05_self_tests
        dir: levels/Level0/Module5/src/_05_self_tests/_5_for_loop_onslaught
        lesson: 05_self_tests
        level: Level0
        module: Module5
        oassignment: 5_for_loop_onslaught
        opath: levels/Level0/Module5/src/_05_self_tests/_5_for_loop_onslaught
        resources: []
        text: '<html>

          <link href="https://league-central.github.io/curriculum/style/style.css"
          rel="stylesheet"/>

          <link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet"/>

          <link href="onslaught_style.css" rel="stylesheet"/>

          <style>


          #questionDiv {


          margin-left:50px;

          }


          #copyright {


          position: fixed;

          bottom: 0;

          width: 100%;

          }


          button {background-color:yellow; border-radius: 5px; font-size: 100%;}

          </style>

          <header>


          # For Loop Onslaught


          <hr/>

          </header>

          </html>

          '
        title: 05 Self Tests
      - assignment: 05_self_tests
        dir: levels/Level0/Module5/src/_05_self_tests/_6_level0_summary
        lesson: 05_self_tests
        level: Level0
        module: Module5
        oassignment: 6_level0_summary
        opath: levels/Level0/Module5/src/_05_self_tests/_6_level0_summary
        resources: []
        text: '


          # Level 0 Summary



          ## Module 0



          ###



          ### Robot



          ### Strings



          ### JOptionPane



          ### print to console



          ## Module 1



          ###



          ### main method



          ### color



          ### if statements



          ### int



          ### increment



          ### for loop



          ###



          ## Module 2



          ###



          ### Random



          ### call methods



          ### Integer.parseInt



          ## Module 3



          ###



          ### if / else if / else



          ### for loop variables



          ### modulo



          ###



          ###



          ## Module 4/5



          ###



          ### double,boolean,char



          ### nested loops



          ### writing methods





          '
        title: 05 Self Tests
      - assignment: 05_self_tests
        dir: levels/Level0/Module5/src/_05_self_tests/_7_study_guide
        lesson: 05_self_tests
        level: Level0
        module: Module5
        oassignment: 7_study_guide
        opath: levels/Level0/Module5/src/_05_self_tests/_7_study_guide
        resources: []
        text: "\n\n# Level 0 Study Guide\n\n\n###\n\nVariables\n\u2018Declare and\
          \ initialize a variable\u2019 means make a variable and give it a value.\n\
          int age = 12;\nString name = \u201CSarah\u201D;\nRemember, String is capitalized\
          \ and the value always has quotes around it.\nEvery time you want to hold\
          \ a new piece of information you need to declare the variable and initialize\
          \ it, by setting it equal to something.\nIf you want to generate a random\
          \ number you do it like this.\nint x = new Random().nextInt(10);\nThe number\
          \ in parenthesis limits the value of the random number you will get. In\
          \ this case, x will be a number between 0 and 9.\n\n###\n\nif Statements\n\
          if (condition){\n\n}\nelse if (next condition){\n\n}\nelse{\n\n}\nThe question\
          \ looks like this for a String\n(name .equals (\u201CSarah\u201D))\nYou\
          \ use .equals to compare a String. The String value is in parenthesis and\
          \ in quotes.\nThe question looks like this for an int\n(age == 12)\nRemember\
          \ you use == for a comparison.\nIt is a good idea to use an else with an\
          \ if statement to catch any options you didn\u2019t think of.\n\n###\n\n\
          for loop\nfor ( int i = 0; i<10; i++){\n\n}\n<font color=\"green\">\nint\
          \ i = 0;\n</font>\nThis is the starting point of the loop. You must declare\
          \ the int.\n<font color=\"green\">\ni<10;\n</font>\nThis is the finishing\
          \ point for the loop. The loop will continue as long as i is less than 10.\n\
          i++ This is how much the loop counter changes by each time. In this case\
          \ it increments (goes up) by 1.\nfor ( int i = 10; i>0; i-=2){\n\n}\nThis\
          \ loop counts down in 2s starting at 10.\n10, 8 , 6, 4, 2.  It doesn\u2019\
          t go to 0 because it must be greater than 0.\nNotice that you have to change\
          \ from less than (<) to greater than (>) when you count down.\n\n###\n\n\
          JOptionPane\nIf you want a pop up to give the user a message use\nJOptionPane.showMessageDialog(null,\
          \ \u201CHello \u201D+ name);\nDon\u2019t forget the\n<b>\nnull\n</b>\n,\
          \ or that any text needs to be in quotes.\nIf you want to get an answer\
          \ from the user, use:\nString ageString = JOptionPane.showInputDialog(\u201C\
          How old are you?\u201D);\nRemember you must catch the user\u2019s answer\
          \ in a String, otherwise you can\u2019t use it.\nBecause the answer is always\
          \ a String, you sometimes want to convert it to a number so you can do a\
          \ calculation. This is how you do it.\nint age = Integer.parseInt(ageString);\n\
          If you want to write something to the console, instead of using a pop-up\n\
          System.out.println(age);\n\n### Methods\n\nYou must have a\n<b>\nmain method\n\
          </b>\nin order to start your class running.\npublic static void main(String[]\
          \ args){\n\n}\nOther methods looks like this\nvoid drawSquare(){\nfor (int\
          \ i= 0; i<4; i++){\nTortoise.move(100);\nTortoise.turn(90);\n}\n}\n<font\
          \ color=\"green\">\nvoid\n</font>\nThis tells you what the method will return\
          \ - in this case nothing.\n<font color=\"green\">\ndrawSquare\n</font>\n\
          This is the name of the method, that you use to call it.\n<font color=\"\
          green\">\n(  )\n</font>\nThis tells you what parameters the method needs.\
          \ In this case it doesn\u2019t need any.\nYou call the method like this:\n\
          drawSquare();\nLook at this method:\nint sevenTimes(int number){\nreturn\
          \ number * 7;\n}\n<font color=\"green\">\nint\n</font>\nThis method is going\
          \ to a return an int so you need to create an int variable to store it.\
          \ In the example below, the variable is named \"answer\".\n<font color=\"\
          green\">\nsevenTimes\n</font>\nThis is the name of the method, that you\
          \ use when you call it.\n<font color=\"green\">\n(int number)\n</font>\n\
          This tells you what parameters the method needs. In this case it needs you\
          \ to give an int. In the example below, the int is the number 2.\nint answer\
          \ = sevenTimes(2);\nThe value of answer will be 14.\n\n###\n\nModulo\n\n\
          Modulo means remainder.\nThe value of 11%5 is 1, because 5 goes into 11,\
          \ 2 times (5x2=10) with a remainder of 1.\n\nIt is useful to use modulo\
          \ to alternate between options. e.g.\n\nfor (int i = 0; i<1000;i+=10){\n\
          if (i%3==0){\nfill(255,0,0);\n}\nelse if (i%3==1){\nfill(0,255,0);\n}\n\
          else if (i%3==2){\nfill(0,0,255);\n}\nellipse(i,i,10,10);\n}\n\nThis code\
          \ will draw a line of circles alternating in red, green and blue.\n\n"
        title: 05 Self Tests
      - assignment: 05_self_tests
        dir: levels/Level0/Module5/src/_05_self_tests/_8_online_practice_test1
        lesson: 05_self_tests
        level: Level0
        module: Module5
        oassignment: 8_online_practice_test1
        opath: levels/Level0/Module5/src/_05_self_tests/_8_online_practice_test1
        resources: []
        text: '<body onload="startup()" style="background-color:lightblue">

          ```

          ```


          '
        title: 05 Self Tests
      - assignment: 05_self_tests
        dir: levels/Level0/Module5/src/_05_self_tests/_9_online_practice_test2
        lesson: 05_self_tests
        level: Level0
        module: Module5
        oassignment: 9_online_practice_test2
        opath: levels/Level0/Module5/src/_05_self_tests/_9_online_practice_test2
        resources: []
        text: '<body onload="startup()" style="background-color:#bbccdd;font-weight:bold;font-size:22px;">

          ```

          ```


          '
        title: 05 Self Tests
    99_extra:
      _readme: '# 99 Extra


        '
      assignments:
      - assignment: 99_extra
        dir: levels/Level0/Module5/src/_99_extra
        lesson: 99_extra
        level: Level0
        module: Module5
        oassignment: 99_extra
        opath: levels/Level0/Module5/src/_99_extra
        resources: []
        text: '# 99 Extra


          '
        title: 99 Extra
    _readme: '# Module 5


      In module 5 we will learn:


      * Algorithms

      * Nested loops

      * Class methods

      '
  _readme: '# Java Level 0



    In Java Level 0, you will learn:


    * Module 0        drawing, code flow, Strings, games

    * Module 1        int variables, if/else, for loops, ++, --

    * Module 2        Random, methods, String-to-int

    * Module 3        else if, loop variables, modulo

    * Module 4        double, boolean, charAt, option dialog

    * Module 5        algorithms, nested loops, practice


    ## Before you start



    All of these lessons will require that you have a  <img :src="$withBase(''/assets/github-mark.png'')"
    alt="github logo" style="width:20px;

    vertical-align: middle;"> [Github account](https://github.com). If you don''t

    have one, visit [Github.com](https://github.com) and create an account?


    ---


    This version of The LEAGUE''s curriculum is generously funded by the Itzkowitch
    Foundation.


    '
Level0PDE:
  Module0:
    99_extra:
      _readme: ''
      assignments:
      - assignment: 99_extra
        dir: levels/Level0PDE/Module0/src/_99_extra/z_UnicornsOnARainbow
        lesson: 99_extra
        level: Level0PDE
        module: Module0
        oassignment: z_UnicornsOnARainbow
        opath: levels/Level0PDE/Module0/src/_99_extra/z_UnicornsOnARainbow
        resources:
        - levels/Level0PDE/Module0/src/_99_extra/z_UnicornsOnARainbow/.web/unicornOnRainbow.png
        text: '


          # Unicorns on a Rainbow


          <hr/>

          <img alt="unicorn rainbow image" src="./images/unicornOnRainbow.png"/>


          ## Goal:


          Draw a rainbow, then put a unicorn on it.


          ## Steps:


          1. Find the Unicorns on a Rainbow recipe program ( z_UnicornsOnARainbow.pde
          ) and open it using Processing.

          2. Follow the instructions in the program to help you draw a rainbow and
          put a unicorn on it.

          3. Make sure you SAVE YOUR CODE when you are done.




          '
        title: 99 Extra
  _readme: '# Level0PDE


    '
Level1:
  Module0:
    01_methods:
      _readme: ''
      assignments:
      - assignment: 01_methods
        dir: levels/Level1/Module0/src/_01_methods/_1_houses
        lesson: 01_methods
        level: Level1
        module: Module0
        oassignment: 1_houses
        opath: levels/Level1/Module0/src/_01_methods/_1_houses
        resources:
        - levels/Level1/Module0/src/_01_methods/_1_houses/.web/houses.jpg
        text: "\n\n# Houses\n\n1. Have a robot start on the left side of the window\
          \ near the bottom.\n\n2. Draw a flat-topped house of height 100 with grass\
          \ after it (see picture).\n\n3. Extract the piece of code that draws the\
          \ house into a method. Draw 10 houses.\n\n4. Change the method to take (int\
          \ height) as a parameter. Draw 9 houses of different heights\n\n5. Make\
          \ the method take a String instead of an int.\n\n6. Make the method take\
          \ a color as well as a height. The houses are drawn in that color.\n\n[optional]\
          \ Set the scene to night by setting the background to black\n\n7. Give the\
          \ houses peaked roofs\n\n8. Extract that roof code into a method \u201C\
          drawPointyRoof\u201D and create a new method: \u201CdrawFlatRoof\u201D.\n\
          \n9. Make large houses have flat roofs\n\n\n"
        title: 01 Methods
      - assignment: 01_methods
        dir: levels/Level1/Module0/src/_01_methods/_2_spinning_record
        lesson: 01_methods
        level: Level1
        module: Module0
        oassignment: 2_spinning_record
        opath: levels/Level1/Module0/src/_01_methods/_2_spinning_record
        resources:
        - levels/Level1/Module0/src/_01_methods/_2_spinning_record/.web/spinningRecord.png
        text: "\n\n# Spinning Record\n\n<img align=\"left\" alt=\"\" src=\"./images/spinningRecord.png\"\
          \ style=\"width: 200.00px; height: 207.00px;  margin: 0px 20px\" title=\"\
          \"/>\nWe are going to make a virtual record player that spins and plays\
          \ your song when you click on it.\n1. Use the given record.png image or\
          \ find your own image of a record.\n\ni) If using your own image, copy the\
          \ file onto the /images folder.\nii) Load the image into your code using\
          \ the code below:\n```\n\tPImage pictureOfRecord;                      \
          \  //as member variable\n        size(600,600);                        \
          \         //in setup method\n        pictureOfRecord= loadImage(\"record.png\"\
          );      //in setup method\n        image(pictureOfRecord, xPosition, yPosition);\
          \  //in draw method\n```\n2. Set the size of your image to match the size\
          \ of your canvas (after you have loaded it).\n```\n        pictureOfRecord.resize(height,width);\
          \     //in setup method\n```\n3. Use this method to rotate your image. Make\
          \ sure you use the image() command after you call rotateImage().\n```\n\
          \   void rotateImage(PImage image, int amountToRotate) {\n        translate(width/2,\
          \ height/2);\n        rotate(amountToRotate*TWO_PI/360);\n        translate(-image.width/2,\
          \ -image.height/2);\n    }\n```\n5. Adjust the speed of the record player.\
          \ Make the record spin.\ni) Make a variable to keep track of the image angle.\n\
          ii) Increase this variable in the draw method.\niii) Use this variable when\
          \ you call the rotateImage() method.\n6. Only spin the record when the user\
          \ clicks the mouse button. Hint: use mousePressed\n7. Add a song.  Use the\
          \ sound file already in the project, awesomeTrack.mp3, or add a different\
          \ one.\n8. Only play the song when the mouse is pressed. Hint: use the method\
          \ below.\n```\n\n    song.play()\n```\n9. Make the record spin as fast as\
          \ possible\n\n\n"
        title: 01 Methods
      - assignment: 01_methods
        dir: levels/Level1/Module0/src/_01_methods/_3_rain_game
        lesson: 01_methods
        level: Level1
        module: Module0
        oassignment: 3_rain_game
        opath: levels/Level1/Module0/src/_01_methods/_3_rain_game
        resources: []
        text: "\n\n# Rain Game\n\n1. Start a new sketch with draw, setup, and settings\
          \ methods.\n\n2. Set your canvas size in the settings() method\n```\n  \
          \  size(width, height)\n```\nand your background color in the draw method\n\
          ```\n    background(red, green, blue)\n```\n3. Draw a raindrop at the top\
          \ of the screen in the draw() method.\n```\n\n    fill(red, green, blue);\n\
          \    stroke(red, green, blue);\n    ellipse(x, y, width, height);\n```\n\
          4. Make the rain fall down the screen.\nHint: make a variable for the raindrop's\
          \ Y position and change it in the draw method.\n5. When the rain falls off\
          \ the bottom of the canvas, start a new rain drop falling from the top.\n\
          6.  Make the rain start at a random position (X position) at the top. This\
          \ code will give you a random number between 0 and the width of your sketch.\n\
          ```\n      int randomNumber = (int) random(width);\n```\n7. Draw a bucket\
          \ at the bottom of the screen.\n```\n        rect(int x, int y, int width,\
          \ int height);\n```\n8. Make the bucket move over and back with the mouse.\
          \ Hint: mouseX\n9. Add an int variable to hold the score (above the setup\
          \ method). If the rain falls in the bucket increase the score by 1. If it\
          \ doesn\u2019t, decrease the score by 1, but don\u2019t let the score go\
          \ negative. Figure it out by yourself or use this method\u2026\n\nvoid checkCatch(int\
          \ x){\nif (x > mouseX && x < mouseX+100)\nscore++;\nelse if (score > 0)\n\
          score--;\nprintln(\"Your score is now: \" + score);\n}\n\n10. Print the\
          \ score on the screen.\n\nfill(0, 0, 0);\ntextSize(16);\ntext(\"Score: \"\
          \ + score, 20, 20);\n\n\n"
        title: 01 Methods
      - assignment: 01_methods
        dir: levels/Level1/Module0/src/_01_methods/_4_magic_worms
        lesson: 01_methods
        level: Level1
        module: Module0
        oassignment: 4_magic_worms
        opath: levels/Level1/Module0/src/_01_methods/_4_magic_worms
        resources:
        - levels/Level1/Module0/src/_01_methods/_4_magic_worms/.web/magicWorms.png
        text: "\n\n# Magic Worms\n\n1. Start a new sketch with draw, setup, and settings\
          \ methods.\n\n2. Set your canvas size and background color in the settings()\
          \ method\n```\n    size(width, height\n    background(red, green, blue)\n\
          ```\n3. In your draw method, use a for loop to draw 300 ellipses in a diagonal\
          \ line across the canvas.\nRUN THE PROGRAM TO CHECK IT.\n4. Now change the\
          \ x and y location of each ellipse to \"different\" random numbers that\
          \ are inside the canvas. Note: random() returns values that are type float\
          \ so your x and y variable types should also be float.\nRUN THE PROGRAM\
          \ TO CHECK IT.\n```\n   random(int maxValue)\n```\n5. Set the color of each\
          \ ellipse.\nRUN THE PROGRAM TO CHECK IT.\n```\n    fill(red, green, blue)\n\
          ```\n6.  If this code isn't already in your file, paste this code at the\
          \ bottom.\n```\n    float frequency = .001;\n    float noiseInterval = PI;\n\
          \n    void makeMagical() {\n        fill( 0, 0, 0, 10 );\n        rect(0,\
          \ 0, width, height);\n        noStroke();\n    }\n\n    float getWormX(int\
          \ i) {\n        return map(noise(i*noiseInterval + frameCount * frequency),\
          \ 0, 1, 0, width);\n    }\n\n    float getWormY(int i) {\n        return\
          \ map(noise(i*noiseInterval+1 + frameCount * frequency), 0, 1, 0, height);\n\
          \    }\n```\n7. Now change the x and y location of each ellipse to the value\
          \ returned by the getWormX() and getWormY() methods (use the for loop variable\
          \ as the parameter to these methods).\nRUN THE PROGRAM TO CHECK IT.\n8.\
          \ Call makeMagical() in your draw method before the for loop.  OPTIONS:\
          \ Pass in frameCount or another variable for the ellipse \"red value\",\
          \ and i as the \"green value\" for some extra color coolness.\nRUN THE PROGRAM\
          \ TO CHECK IT.\n10. You can adjust the frequency and noiseInterval variables\
          \ to your liking. Also play with the number and size of particles (ellipses)\
          \ until it looks amazing.\n11. [Optional] Add another worm every time the\
          \ user clicks the mouse.\n\n\n"
        title: 01 Methods
      - assignment: 01_methods
        dir: levels/Level1/Module0/src/_01_methods/_5_FlappyBird
        lesson: 01_methods
        level: Level1
        module: Module0
        oassignment: 5_FlappyBird
        opath: levels/Level1/Module0/src/_01_methods/_5_FlappyBird
        resources:
        - levels/Level1/Module0/src/_01_methods/_5_FlappyBird/.web/FlappyBirdScreenShot.png
        text: "\n\n# Flappy Bird\n\n1. Start a new sketch with draw and setup methods.\n\
          \n2. Set your canvas size in the setup method\nsize(width, height)\n3. In\
          \ your draw method, set a background, and draw a ball (bird) on the screen.\n\
          ```\nbackground(red, green, blue);\nfill(red, green, blue);\nstroke(red,\
          \ green, blue);\nellipse(x, y, width, height);\n```\n4. Make the bird fall\
          \ down\nHint: make variables for the bird's X and Y position and use them\
          \ for the ellipse in the draw method.\n5. Add velocity to the bird.\nHint:\
          \ make a variable for the velocity of the bird in the Y direction (up).\
          \ Changing its value should change the velocity of your bird.\nint birdYVelocity\
          \ = -10;\n6.  Give the bird gravity.\nHint: make a variable for the gravity\
          \ pulling the bird down. Gravity should continually increase the value of\
          \ birdYVelocity.\nint gravity = 1;\n7. Make the bird jump (flap) when the\
          \ mouse is clicked.\nHint: construct a mousePressed() method the same way\
          \ setup() and draw() were made.\nIn this method, reset the bird\u2019s velocity\
          \ to make the bird rise.\n8.  Draw a pipe coming down from the top of the\
          \ sketch.\n\nIn the draw() method:\nfill(red, green, blue);\nrect(x, y,\
          \ width, height);\n9. Make the pipe move from right to left.\n\nHint: make\
          \ a variable for the pipe X position and change it in the draw method.\n\
          10. Make the pipe teleport back to the right side of the screen once it\
          \ has passed through the left. This will simulate the repeating pipes coming\
          \ from the right of the screen.\nTip: Put this code into a teleportPipes()\
          \ method and you can also call it from the setup() method to create the\
          \ first pipes.\n11. Set the upper pipe's height to a new random number each\
          \ time it teleports\nint upperPipeHeight = (int) random(100, 400);\n12.\
          \ Create a variable, pipeGap, to represent the gap between the pipes. Make\
          \ sure the gap is big enough for the ball to go through. The gap between\
          \ the pipes will not change.\n13. Make a second pipe that will go down to\
          \ the bottom of the sketch, leaving a space between the two pipes that is\
          \ the size of the gap (see step 12). Make sure both pipes use the same value\
          \ for their x position. Set the lower pipe y value by adding the upper pipe\
          \ height and pipe gap. Ex:\nlowerY = upperPipeHeight + pipeGap;\n14. Make\
          \ the game end when the bird hits the pipe. Figure it out by yourself, or\
          \ use this method:\n```\nboolean intersectsPipes() { \n         if (birdY\
          \ < upperPipeHeight && birdX > pipeX && birdX < (pipeX+pipeWidth)){\n  \
          \          return true; }\n        else if (birdY>lowerPipeTop && birdX\
          \ > pipeX && birdX < (pipeX+pipeWidth)) {\n            return true; }\n\
          \        else { return false; }\n}\n```\n15. End the game when the bird\
          \ hits the ground.\nMake a rectangle for the ground.\nUse a boolean variable\
          \ at the top of the sketch to indicate if game has ended.\n17.  Create a\
          \ score and make it increase each time the bird passes through a pipe.\n\
          text(text, xPosition, yPosition);\n18. OPTIONAL.   Use images for the background,\
          \ pipes and bird (see image at top). You can find your own images, or those\
          \ provided in the Module 3 Java project. See below for code snippets to\
          \ load and draw images.\n\nPImage back;\nPImage pipeBottom;\nPImage pipeTop;\n\
          PImage bird;\nvoid setup() {\nback = loadImage(\"flappyBackground.jpg\"\
          );\npipeBottom = loadImage(\"bottomPipe.png\");\npipeTop = loadImage(\"\
          topPipe.png\");\nbird = loadImage(\"bird.png\");\nbird.resize(50,50);\n\
          }\nvoid draw() {\nbackground(back);\nimage (pipeBottom,250,375);\nimage\
          \ (pipeTop,250,-130);\nimage (bird, 250, 300);\n}\n\n\n"
        title: 01 Methods
    02_return_types:
      _readme: ''
      assignments:
      - assignment: 02_return_types
        dir: levels/Level1/Module0/src/_02_return_types/_1_finish_line
        lesson: 02_return_types
        level: Level1
        module: Module0
        oassignment: 1_finish_line
        opath: levels/Level1/Module0/src/_02_return_types/_1_finish_line
        resources: []
        text: '# 02 Return Types 1 Finish Line


          '
        title: 02 Return Types
      - assignment: 02_return_types
        dir: levels/Level1/Module0/src/_02_return_types/_2_list_of_goals
        lesson: 02_return_types
        level: Level1
        module: Module0
        oassignment: 2_list_of_goals
        opath: levels/Level1/Module0/src/_02_return_types/_2_list_of_goals
        resources: []
        text: '# 02 Return Types 2 List Of Goals


          '
        title: 02 Return Types
      - assignment: 02_return_types
        dir: levels/Level1/Module0/src/_02_return_types/_3_too_many_shapes
        lesson: 02_return_types
        level: Level1
        module: Module0
        oassignment: 3_too_many_shapes
        opath: levels/Level1/Module0/src/_02_return_types/_3_too_many_shapes
        resources: []
        text: '# 02 Return Types 3 Too Many Shapes


          '
        title: 02 Return Types
    03_gui_with_help:
      _readme: ''
      assignments:
      - assignment: 03_gui_with_help
        dir: levels/Level1/Module0/src/_03_gui_with_help/_1_my_first_swing_gui
        lesson: 03_gui_with_help
        level: Level1
        module: Module0
        oassignment: 1_my_first_swing_gui
        opath: levels/Level1/Module0/src/_03_gui_with_help/_1_my_first_swing_gui
        resources:
        - levels/Level1/Module0/src/_03_gui_with_help/_1_my_first_swing_gui/.web/myFirstSwingGui.png
        text: '


          # My First Swing GUI


          <hr/>

          <img src="./images/myFirstSwingGui.png"/>


          ## Goal:


          We are going to make a simple GUI (pronounced gooey). GUI stands for Graphical
          User Interface, which in this case means a window and everything that is
          drawn on it. The user will see a window (frame) with a greeting and image
          similar to the one shown above.


          ## Steps:


          1. Create a JFrame. A JFrame is a window that has a border and title. It
          will contain one component of your GUI. In this program, it will contain
          a JPanel (see next). JFrames are invisible when you create them, so you
          will need to make it visible (follow instructions in the code).

          2. Create a JPanel and add it to the JFrame. A JPanel is a simple container
          that provides space for your program to add more components. In this program,
          it will contain a JLabel (see next).

          3. Create a JLabel and add it to the JPanel. A JLabel allows you to display
          small amounts of text, and/or an image. In this program, both will be displayed
          (follow instructions in the code).

          4. Packing a JFrame causes it to resize itself so that the its components
          are visible. If you do anything to change the size of its contents, a JFrame
          should be packed again.




          '
        title: 03 Gui With Help
      - assignment: 03_gui_with_help
        dir: levels/Level1/Module0/src/_03_gui_with_help/_2_photo_quiz
        lesson: 03_gui_with_help
        level: Level1
        module: Module0
        oassignment: 2_photo_quiz
        opath: levels/Level1/Module0/src/_03_gui_with_help/_2_photo_quiz
        resources:
        - levels/Level1/Module0/src/_03_gui_with_help/_2_photo_quiz/.web/photoQuiz.png
        text: '


          # Photo Quiz


          <hr/>

          <img src="./images/photoQuiz.png"/>


          ## Goal:


          We are going to use GUI components to make quiz that shows images to the
          player and asks them questions relating to the images they see.


          ## Steps:


          1. Create a JFrame. A JFrame is a window that has a border and title. JFrames
          are invisible when you create them, so you will need to make it visible
          (follow instructions in the code).

          2. Create a Component. Call the method provided, to put an image (icon)
          into the Component (follow instructions in the code).

          3. Add the Component to the JFrame (follow instructions in the code).

          4. Packing a JFrame causes it to resize itself so that its components are
          visible. If you do anything to change the size of its contents, a JFrame
          should be packed again.

          5. Use a pop-up to ask the user a question relating to the image and tell
          them if they get the right answer.

          6. Replace the Component with another that has a different image and ask
          a new question (follow instructions in the code).




          '
        title: 03 Gui With Help
      - assignment: 03_gui_with_help
        dir: levels/Level1/Module0/src/_03_gui_with_help/_3_drum_kit
        lesson: 03_gui_with_help
        level: Level1
        module: Module0
        oassignment: 3_drum_kit
        opath: levels/Level1/Module0/src/_03_gui_with_help/_3_drum_kit
        resources:
        - levels/Level1/Module0/src/_03_gui_with_help/_3_drum_kit/.web/drumKit.png
        - levels/Level1/Module0/src/_03_gui_with_help/_3_drum_kit/.web/drum.png
        text: '


          # Drum Kit


          <hr/>

          <img src="./images/drumKit.png"/>


          ## Goal:


          We are going to use GUI components to make drum kit. When different images
          of the drum kit are clicked, they will play appropriate sounds.


          ## Steps:


          1. Create a JFrame. A JFrame is a window that has a border and title. It
          will contain one component of your GUI. In this program, it will contain
          a JPanel (see next). JFrames are invisible when you create them, so you
          will need to make it visible (follow instructions in the code).

          2. Create a JPanel and add it to the JFrame.

          3. Create a JLabel that shows the image of a drum (follow instructions in
          the code) and add it to the JPanel.



          Packing a JFrame causes it to resize itself so that its components are visible.
          If you do anything to change the size of its contents, a JFrame should be
          packed again.

          When you run the program you should see the drum

          4. Packing a JFrame causes it to resize itself so that its components are
          visible. If you do anything to change the size of its contents, a JFrame
          should be packed again.

          5. When you run the program you should see the drum

          6. Add a MouseListener to the JLabel and complete the mouseClicked() method
          so that a drum sound is played when the drum image is clicked (follow instructions
          in the code).

          7. Repeat the above steps for a second JLabel that shows the image of a
          cymbal (follow instructions in the code).

          8. Your drum kit is complete!




          '
        title: 03 Gui With Help
      - assignment: 03_gui_with_help
        dir: levels/Level1/Module0/src/_03_gui_with_help/_4_body_part_quiz
        lesson: 03_gui_with_help
        level: Level1
        module: Module0
        oassignment: 4_body_part_quiz
        opath: levels/Level1/Module0/src/_03_gui_with_help/_4_body_part_quiz
        resources:
        - levels/Level1/Module0/src/_03_gui_with_help/_4_body_part_quiz/.web/bodyPart.png
        text: '


          # Body Part Quiz


          <hr/>

          <img src="./images/bodyPart.png"/>


          ## Goal:


          We are going to use GUI components to make a quiz in which only part of
          an image is displayed (like the one shown above). The player has to guess
          the name of each celebrity shown.


          ## Steps:


          1. The program already contains a JFrame and JPanel. There is also a selection
          of celebrity photos which you can use for the quiz (or replace them with
          your own selection).

          2. Your challenge is to resize the frame so that only part of the celebrity''s
          face is shown.

          3. Ask the user to guess who each person is and keep a score of how many
          they get correct.


          End the program when there are no more images to display.

          4. End the program when there are no more images to display.




          '
        title: 03 Gui With Help
      - assignment: 03_gui_with_help
        dir: levels/Level1/Module0/src/_03_gui_with_help/_5_duelling_buttons
        lesson: 03_gui_with_help
        level: Level1
        module: Module0
        oassignment: 5_duelling_buttons
        opath: levels/Level1/Module0/src/_03_gui_with_help/_5_duelling_buttons
        resources:
        - levels/Level1/Module0/src/_03_gui_with_help/_5_duelling_buttons/.web/duellingButtons.png
        - levels/Level1/Module0/src/_03_gui_with_help/_5_duelling_buttons/.web/sameSizeButtons.png
        text: '


          # Duelling Buttons


          <hr/>

          <img src="./images/duellingButtons.png"/>


          ## Goal:


          We are going to use GUI components to make demanding buttons that will compete
          in a duel for the uer''s attention. When the user clicks on one button,
          the other button will demand to be clicked on!


          ## Steps:


          1. A JFrame, JPanel, and two JButtons have already been created. You set
          the text of both buttons to "Click Me". When you pack the JFrame and run
          the program, it should look like this:

          2. Add this ActionListener to both buttons. Then modify the actionPerformed()
          method to make the buttons change their text and size when the user clicks
          (follow instructions in the code).




          '
        title: 03 Gui With Help
    04_gui_from_scratch:
      _readme: ''
      assignments:
      - assignment: 04_gui_from_scratch
        dir: levels/Level1/Module0/src/_04_gui_from_scratch/_1_fortune_cookie
        lesson: 04_gui_from_scratch
        level: Level1
        module: Module0
        oassignment: 1_fortune_cookie
        opath: levels/Level1/Module0/src/_04_gui_from_scratch/_1_fortune_cookie
        resources: []
        text: "\n\n# Fortune Cookie\n\nGoal: Make a Swing program from scratch.\n\
          The program will have a window (frame) with a button that gives one of five\
          \ random fortunes when clicked.\n1. Make a FortuneCookie class, with a showButton()\
          \ method like the one below:\n\npublic class FortuneCookie {\npublic void\
          \ showButton() {\nSystem.out.println(\"Button clicked\");\n}\n}\n\n2. Now\
          \ make a runner class to run the code above, like the one below:\n\npublic\
          \ class FortuneCookieRunner {\npublic static void main(String[] args) {\n\
          new FortuneCookie().showButton();\n}\n}\n\n3. Now change the showButton()\
          \ method in Step 1, to make a JFrame and get it to show up when you run\
          \ the program. Hint:\nframe.setVisible(true);\n\n4. Make a JButton and add\
          \ it to the JFrame.\nJButton button = new JButton();\nframe.add(button);\n\
          frame.pack();\n\n5. The next 4 steps make a pop-up appear that says, \u201C\
          Woohoo\u201D when the button is clicked\n\na. Add an action listener to\
          \ the button:\nbutton.addActionListener(this);\n\nb. Have your class implement\
          \ ActionListener [use Eclipse quick fix]\n\nc. Add the unimplemented methods\
          \ [use Eclipse quick fix]\n\nd. Put a JOptionPane pop-up inside the actionPerformed()\
          \ method that says \"Woohoo\".\n\n6. Generate a random number between 0\
          \ and 4:\nint rand = new Random().nextInt(5);\n7. Depending on which random\
          \ number, show one of the five fortunes.\n\n[optional] 8. Run other student's\
          \ programs to receive fortunes from them.\n\n\n"
        title: 04 Gui From Scratch
      - assignment: 04_gui_from_scratch
        dir: levels/Level1/Module0/src/_04_gui_from_scratch/_2_jack_in_the_box
        lesson: 04_gui_from_scratch
        level: Level1
        module: Module0
        oassignment: 2_jack_in_the_box
        opath: levels/Level1/Module0/src/_04_gui_from_scratch/_2_jack_in_the_box
        resources: []
        text: '


          # Jack-in-the-Box


          1. Create a user interface (GUI) that has a single button labeled "Surprise".

          If you need help, take a look at the instructions for the Fortune Cookie
          recipe.

          2. When the user presses the button 5 times, show them a jack-in-the-box
          using the methods below.

          (A sample jackInTheBox.png file is provided in the default package)

          private void showPicture(String fileName) {

          try {


          JLabel imageLabel = createLabelImage(fileName);

          JFrame frame = new JFrame();

          frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

          frame.add(imageLabel);

          frame.setVisible(true);

          frame.pack();

          } catch (Exception e) {

          e.printStackTrace();

          }

          }

          private JLabel createLabelImage(String fileName) {

          try {

          URL imageURL = getClass().getResource(fileName);

          if (imageURL == null) {

          System.err.println("Could not find image " + fileName);

          return new JLabel();

          } else {

          Icon icon = new ImageIcon(imageURL);

          JLabel imageLabel = new JLabel(icon);

          return imageLabel;

          }

          } catch (Exception e) {

          System.err.println("Could not find image " + fileName);

          return new JLabel();

          }

          }

          3. Also play a sound when the jack-in-the-box pops up using this method.

          (A sample sound homer-woohoo.wav is provided in the default package)


          private void playSound(String soundFile) {

          try {

          AudioClip sound = JApplet.newAudioClip(getClass().getResource(soundFile));

          sound.play();

          } catch (Exception e) {

          e.printStackTrace();

          }

          }



          '
        title: 04 Gui From Scratch
      - assignment: 04_gui_from_scratch
        dir: levels/Level1/Module0/src/_04_gui_from_scratch/_3_sound_effects_machine
        lesson: 04_gui_from_scratch
        level: Level1
        module: Module0
        oassignment: 3_sound_effects_machine
        opath: levels/Level1/Module0/src/_04_gui_from_scratch/_3_sound_effects_machine
        resources: []
        text: "\n\n# Sound Effects Machine\n\n1.  Create a GUI for a sound effects\
          \ machine that will play different sounds when the buttons are pressed.\n\
          If you need help, take a look at the instructions for the Fortune Cookie\
          \ recipe.\n\nNOTE: because this GUI has more than one button, you must add\
          \ a JPanel to your JFrame and put the buttons on the panel!\n\n2. Gather\
          \ sound bites. They must be .wav files. Free sound effects can be found\
          \ here. The League also has an account at freesound. Ask your teacher for\
          \ our login.\nThe .wav files must be placed into your recipe package(_3_sound_effects_machine)\
          \ (drag and drop).\n\n3. Call this playSound() method when they click on\
          \ a button. You will need to import java.applet.AudioClip\n```\n\n\tprivate\
          \ void playSound(String soundFile) {\n\t\tString path = \"src/_03_gui_from_scratch/_3_sound_effects_machine/\"\
          ;\n\t\t\tFile sound = new File(path+soundFile);\n\t\t\tif (sound.exists())\
          \ {\n\t\t\t\tnew Thread(() -> {\n\t\t\t\ttry {\n\t\t\t\t\tClip clip = AudioSystem.getClip();\n\
          \t\t\t\t\tclip.open(AudioSystem.getAudioInputStream(sound));\n\t\t\t\t\t\
          clip.start();\n\t\t\t\t\tThread.sleep(clip.getMicrosecondLength()/1000);\n\
          \t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\tSystem.out.println(\"\
          Could not play this sound\");\n\t\t\t\t}}).start();\n\t \t\t}\n\t\t\telse\
          \ {\n\t\t\t\tSystem.out.println(\"File does not exist\");\n\t\t\t}\n\t\t\
          \n\t}\n```\n\n\n"
        title: 04 Gui From Scratch
      - assignment: 04_gui_from_scratch
        dir: levels/Level1/Module0/src/_04_gui_from_scratch/_4_cuteness_tv
        lesson: 04_gui_from_scratch
        level: Level1
        module: Module0
        oassignment: 4_cuteness_tv
        opath: levels/Level1/Module0/src/_04_gui_from_scratch/_4_cuteness_tv
        resources: []
        text: '


          # Cuteness TV


          1. Make a user interface with 3 buttons that will play different videos
          depending on which button is clicked.


          If you need help, take a look at the instructions for the Fortune Cookie
          recipe.


          2.  Use the methods below to play the cutest videos ever.

          void showDucks() {

          playVideo("https://www.youtube.com/watch?v=MtN1YnoL46Q");

          }


          void showFrog() {

          playVideo("https://www.youtube.com/watch?v=cBkWhkAZ9ds");

          }


          void showFluffyUnicorns() {

          playVideo("https://www.youtube.com/watch?v=a-xWhG4UU_Y");

          }


          void playVideo(String videoID) {


          // Workaround for Linux because "Desktop.getDesktop().browse()" doesn''t

          //work on some Linux implementations

          try {

          if (System.getProperty("os.name").toLowerCase().contains("linux")) {

          if (Runtime.getRuntime().exec(new String[] {

          "which", "xdg- open" }).getInputStream().read() != -1) {

          Runtime.getRuntime().exec(new String[] { "xdg-open", videoID });


          }

          } else {


          URI uri = new URI(videoID);

          java.awt.Desktop.getDesktop().browse(uri);

          }

          } catch (Exception e) {

          e.printStackTrace();


          }

          }

          Note: If any of these video links no longer work, go to youtube and get
          replacements. Use the method names to give you a hint about what the videos
          should contain :)



          '
        title: 04 Gui From Scratch
  Module1:
    01_asteroids:
      _readme: '# 01 Asteroids


        '
      assignments:
      - assignment: 01_asteroids
        dir: levels/Level1/Module1/src/_01_asteroids
        lesson: 01_asteroids
        level: Level1
        module: Module1
        oassignment: 01_asteroids
        opath: levels/Level1/Module1/src/_01_asteroids
        resources: []
        text: '# 01 Asteroids


          '
        title: 01 Asteroids
    02_race_car:
      _readme: '# 02 Race Car


        '
      assignments:
      - assignment: 02_race_car
        dir: levels/Level1/Module1/src/_02_race_car
        lesson: 02_race_car
        level: Level1
        module: Module1
        oassignment: 02_race_car
        opath: levels/Level1/Module1/src/_02_race_car
        resources: []
        text: '# 02 Race Car


          '
        title: 02 Race Car
    03_cat:
      _readme: '# 03 Cat


        '
      assignments:
      - assignment: 03_cat
        dir: levels/Level1/Module1/src/_03_cat
        lesson: 03_cat
        level: Level1
        module: Module1
        oassignment: 03_cat
        opath: levels/Level1/Module1/src/_03_cat
        resources: []
        text: '# 03 Cat


          '
        title: 03 Cat
    04_harry_potter:
      _readme: '# 04 Harry Potter


        '
      assignments:
      - assignment: 04_harry_potter
        dir: levels/Level1/Module1/src/_04_harry_potter
        lesson: 04_harry_potter
        level: Level1
        module: Module1
        oassignment: 04_harry_potter
        opath: levels/Level1/Module1/src/_04_harry_potter
        resources: []
        text: '# 04 Harry Potter


          '
        title: 04 Harry Potter
    05_popcorn:
      _readme: '# 05 Popcorn


        '
      assignments:
      - assignment: 05_popcorn
        dir: levels/Level1/Module1/src/_05_popcorn
        lesson: 05_popcorn
        level: Level1
        module: Module1
        oassignment: 05_popcorn
        opath: levels/Level1/Module1/src/_05_popcorn
        resources: []
        text: '# 05 Popcorn


          '
        title: 05 Popcorn
    06_vault:
      _readme: '


        # Vault


        A vault stands in the way of your progress. We need a secret agent to find
        the code to get through.

        1. You have been given a Vault class that describes how the vault will work.
        It has a secret code that will be randomly chosen each time the program is
        run.

        It also contains a tryCode() method that takes a number as a parameter and
        returns true if that number opens the vault, false otherwise.


        2. Create a Runner class with a main method. Create a vault object and call
        the tryCode() method. Print out the answer to see if you successfully opened
        the vault.


        3. Make a SecretAgent class that has a method findCode() that takes a Vault
        as a parameter.

        The codes are between 0 and 1 million. This method will try all the codes,
        and return the first code that opens the vault, or -1 if no code opened the
        vault.


        4. Add the SecretAgent object to main. Use a syso to print the result from
        findCode()




        '
      assignments:
      - assignment: 06_vault
        dir: levels/Level1/Module1/src/_06_vault
        lesson: 06_vault
        level: Level1
        module: Module1
        oassignment: 06_vault
        opath: levels/Level1/Module1/src/_06_vault
        resources: []
        text: '


          # Vault


          A vault stands in the way of your progress. We need a secret agent to find
          the code to get through.

          1. You have been given a Vault class that describes how the vault will work.
          It has a secret code that will be randomly chosen each time the program
          is run.

          It also contains a tryCode() method that takes a number as a parameter and
          returns true if that number opens the vault, false otherwise.


          2. Create a Runner class with a main method. Create a vault object and call
          the tryCode() method. Print out the answer to see if you successfully opened
          the vault.


          3. Make a SecretAgent class that has a method findCode() that takes a Vault
          as a parameter.

          The codes are between 0 and 1 million. This method will try all the codes,
          and return the first code that opens the vault, or -1 if no code opened
          the vault.


          4. Add the SecretAgent object to main. Use a syso to print the result from
          findCode()




          '
        title: 06 Vault
    07_duck:
      _readme: '


        # Introduction to Objects


        <img src="./images/duck.png" style="width: 400px; height: 190px;"/>

        1. Create a Duck class in your java project. Add its member variables and
        methods to match the picture above. Now add the code for the constructor of
        the Duck class:

        Duck(String favoriteFood, int numberOfFriends) {

        this.favoriteFood = favoriteFood;

        this.numberOfFriends = numberOfFriends;

        }

        2. Now pick your favorite animal and describe it with at least 2 member variables
        and 2 methods.


        3. Create a java class for your animal including:

        member variables

        methods(with sysouts)

        a constructor that sets the member variables


        4. Create a new java class. This will be a "runner" or "driver" class, so
        it will need a main method.


        5. In your runner class, create a Duck object (instance) by calling its constructor
        as follows:

        Duck daffy = new Duck("donuts",5);

        Now you have a duck object, you can make it quack:

        daffy.quack();

        6. Now create an instance of your animal (Hint: see step 5 above) and call
        its methods.



        '
      assignments:
      - assignment: 07_duck
        dir: levels/Level1/Module1/src/_07_duck
        lesson: 07_duck
        level: Level1
        module: Module1
        oassignment: 07_duck
        opath: levels/Level1/Module1/src/_07_duck
        resources:
        - levels/Level1/Module1/src/_07_duck/.web/duck.png
        text: '


          # Introduction to Objects


          <img src="./images/duck.png" style="width: 400px; height: 190px;"/>

          1. Create a Duck class in your java project. Add its member variables and
          methods to match the picture above. Now add the code for the constructor
          of the Duck class:

          Duck(String favoriteFood, int numberOfFriends) {

          this.favoriteFood = favoriteFood;

          this.numberOfFriends = numberOfFriends;

          }

          2. Now pick your favorite animal and describe it with at least 2 member
          variables and 2 methods.


          3. Create a java class for your animal including:

          member variables

          methods(with sysouts)

          a constructor that sets the member variables


          4. Create a new java class. This will be a "runner" or "driver" class, so
          it will need a main method.


          5. In your runner class, create a Duck object (instance) by calling its
          constructor as follows:

          Duck daffy = new Duck("donuts",5);

          Now you have a duck object, you can make it quack:

          daffy.quack();

          6. Now create an instance of your animal (Hint: see step 5 above) and call
          its methods.



          '
        title: 07 Duck
    08_SolarSystem:
      _readme: '# 08 Solarsystem


        '
      assignments:
      - assignment: 08_SolarSystem
        dir: levels/Level1/Module1/src/_08_SolarSystem
        lesson: 08_SolarSystem
        level: Level1
        module: Module1
        oassignment: 08_SolarSystem
        opath: levels/Level1/Module1/src/_08_SolarSystem
        resources: []
        text: '# 08 Solarsystem


          '
        title: 08 Solarsystem
    09_HungryHungryHippos:
      _readme: '# 09 Hungryhungryhippos


        '
      assignments:
      - assignment: 09_HungryHungryHippos
        dir: levels/Level1/Module1/src/_09_HungryHungryHippos
        lesson: 09_HungryHungryHippos
        level: Level1
        module: Module1
        oassignment: 09_HungryHungryHippos
        opath: levels/Level1/Module1/src/_09_HungryHungryHippos
        resources: []
        text: '# 09 Hungryhungryhippos


          '
        title: 09 Hungryhungryhippos
    10_turf_war:
      _readme: '# 10 Turf War


        '
      assignments:
      - assignment: 10_turf_war
        dir: levels/Level1/Module1/src/_10_turf_war
        lesson: 10_turf_war
        level: Level1
        module: Module1
        oassignment: 10_turf_war
        opath: levels/Level1/Module1/src/_10_turf_war
        resources: []
        text: '# 10 Turf War


          '
        title: 10 Turf War
    11_binary_converter:
      _readme: "\n\n# Flappy Bird\n\n1. Start a new sketch with draw and setup methods.\n\
        \n2. Set your canvas size in the setup method\nsize(width, height)\n3. In\
        \ your draw method, set a background, and draw a ball (bird) on the screen.\n\
        ```\nbackground(red, green, blue);\nfill(red, green, blue);\nstroke(red, green,\
        \ blue);\nellipse(x, y, width, height);\n```\n4. Make the bird fall down\n\
        Hint: make variables for the bird's X and Y position and use them for the\
        \ ellipse in the draw method.\n5. Add velocity to the bird.\nHint: make a\
        \ variable for the velocity of the bird in the Y direction (up). Changing\
        \ its value should change the velocity of your bird.\nint birdYVelocity =\
        \ -10;\n6.  Give the bird gravity.\nHint: make a variable for the gravity\
        \ pulling the bird down. Gravity should continually increase the value of\
        \ birdYVelocity.\nint gravity = 1;\n7. Make the bird jump (flap) when the\
        \ mouse is clicked.\nHint: construct a mousePressed() method the same way\
        \ setup() and draw() were made.\nIn this method, reset the bird\u2019s velocity\
        \ to make the bird rise.\n8.  Draw a pipe coming down from the top of the\
        \ sketch.\n\nIn the draw() method:\nfill(red, green, blue);\nrect(x, y, width,\
        \ height);\n9. Make the pipe move from right to left.\n\nHint: make a variable\
        \ for the pipe X position and change it in the draw method.\n10. Make the\
        \ pipe teleport back to the right side of the screen once it has passed through\
        \ the left. This will simulate the repeating pipes coming from the right of\
        \ the screen.\nTip: Put this code into a teleportPipes() method and you can\
        \ also call it from the setup() method to create the first pipes.\n11. Set\
        \ the upper pipe's height to a new random number each time it teleports\n\
        int upperPipeHeight = (int) random(100, 400);\n12. Create a variable, pipeGap,\
        \ to represent the gap between the pipes. Make sure the gap is big enough\
        \ for the ball to go through. The gap between the pipes will not change.\n\
        13. Make a second pipe that will go down to the bottom of the sketch, leaving\
        \ a space between the two pipes that is the size of the gap (see step 12).\
        \ Make sure both pipes use the same value for their x position. Set the lower\
        \ pipe y value by adding the upper pipe height and pipe gap. Ex:\nlowerY =\
        \ upperPipeHeight + pipeGap;\n14. Make the game end when the bird hits the\
        \ pipe. Figure it out by yourself, or use this method:\n```\nboolean intersectsPipes()\
        \ { \n         if (birdY < upperPipeHeight && birdX > pipeX && birdX < (pipeX+pipeWidth)){\n\
        \            return true; }\n        else if (birdY>lowerPipeTop && birdX\
        \ > pipeX && birdX < (pipeX+pipeWidth)) {\n            return true; }\n  \
        \      else { return false; }\n}\n```\n15. End the game when the bird hits\
        \ the ground.\nMake a rectangle for the ground.\nUse a boolean variable at\
        \ the top of the sketch to indicate if game has ended.\n17.  Create a score\
        \ and make it increase each time the bird passes through a pipe.\ntext(text,\
        \ xPosition, yPosition);\n18. OPTIONAL.   Use images for the background, pipes\
        \ and bird (see image at top). You can find your own images, or those provided\
        \ in the Module 3 Java project. See below for code snippets to load and draw\
        \ images.\n\nPImage back;\nPImage pipeBottom;\nPImage pipeTop;\nPImage bird;\n\
        void setup() {\nback = loadImage(\"flappyBackground.jpg\");\npipeBottom =\
        \ loadImage(\"bottomPipe.png\");\npipeTop = loadImage(\"topPipe.png\");\n\
        bird = loadImage(\"bird.png\");\nbird.resize(50,50);\n}\nvoid draw() {\nbackground(back);\n\
        image (pipeBottom,250,375);\nimage (pipeTop,250,-130);\nimage (bird, 250,\
        \ 300);\n}\n\n\n"
      assignments:
      - assignment: 11_binary_converter
        dir: levels/Level1/Module1/src/_11_binary_converter
        lesson: 11_binary_converter
        level: Level1
        module: Module1
        oassignment: 11_binary_converter
        opath: levels/Level1/Module1/src/_11_binary_converter
        resources:
        - levels/Level1/Module1/src/_11_binary_converter/.web/FlappyBirdScreenShot.png
        text: "\n\n# Flappy Bird\n\n1. Start a new sketch with draw and setup methods.\n\
          \n2. Set your canvas size in the setup method\nsize(width, height)\n3. In\
          \ your draw method, set a background, and draw a ball (bird) on the screen.\n\
          ```\nbackground(red, green, blue);\nfill(red, green, blue);\nstroke(red,\
          \ green, blue);\nellipse(x, y, width, height);\n```\n4. Make the bird fall\
          \ down\nHint: make variables for the bird's X and Y position and use them\
          \ for the ellipse in the draw method.\n5. Add velocity to the bird.\nHint:\
          \ make a variable for the velocity of the bird in the Y direction (up).\
          \ Changing its value should change the velocity of your bird.\nint birdYVelocity\
          \ = -10;\n6.  Give the bird gravity.\nHint: make a variable for the gravity\
          \ pulling the bird down. Gravity should continually increase the value of\
          \ birdYVelocity.\nint gravity = 1;\n7. Make the bird jump (flap) when the\
          \ mouse is clicked.\nHint: construct a mousePressed() method the same way\
          \ setup() and draw() were made.\nIn this method, reset the bird\u2019s velocity\
          \ to make the bird rise.\n8.  Draw a pipe coming down from the top of the\
          \ sketch.\n\nIn the draw() method:\nfill(red, green, blue);\nrect(x, y,\
          \ width, height);\n9. Make the pipe move from right to left.\n\nHint: make\
          \ a variable for the pipe X position and change it in the draw method.\n\
          10. Make the pipe teleport back to the right side of the screen once it\
          \ has passed through the left. This will simulate the repeating pipes coming\
          \ from the right of the screen.\nTip: Put this code into a teleportPipes()\
          \ method and you can also call it from the setup() method to create the\
          \ first pipes.\n11. Set the upper pipe's height to a new random number each\
          \ time it teleports\nint upperPipeHeight = (int) random(100, 400);\n12.\
          \ Create a variable, pipeGap, to represent the gap between the pipes. Make\
          \ sure the gap is big enough for the ball to go through. The gap between\
          \ the pipes will not change.\n13. Make a second pipe that will go down to\
          \ the bottom of the sketch, leaving a space between the two pipes that is\
          \ the size of the gap (see step 12). Make sure both pipes use the same value\
          \ for their x position. Set the lower pipe y value by adding the upper pipe\
          \ height and pipe gap. Ex:\nlowerY = upperPipeHeight + pipeGap;\n14. Make\
          \ the game end when the bird hits the pipe. Figure it out by yourself, or\
          \ use this method:\n```\nboolean intersectsPipes() { \n         if (birdY\
          \ < upperPipeHeight && birdX > pipeX && birdX < (pipeX+pipeWidth)){\n  \
          \          return true; }\n        else if (birdY>lowerPipeTop && birdX\
          \ > pipeX && birdX < (pipeX+pipeWidth)) {\n            return true; }\n\
          \        else { return false; }\n}\n```\n15. End the game when the bird\
          \ hits the ground.\nMake a rectangle for the ground.\nUse a boolean variable\
          \ at the top of the sketch to indicate if game has ended.\n17.  Create a\
          \ score and make it increase each time the bird passes through a pipe.\n\
          text(text, xPosition, yPosition);\n18. OPTIONAL.   Use images for the background,\
          \ pipes and bird (see image at top). You can find your own images, or those\
          \ provided in the Module 3 Java project. See below for code snippets to\
          \ load and draw images.\n\nPImage back;\nPImage pipeBottom;\nPImage pipeTop;\n\
          PImage bird;\nvoid setup() {\nback = loadImage(\"flappyBackground.jpg\"\
          );\npipeBottom = loadImage(\"bottomPipe.png\");\npipeTop = loadImage(\"\
          topPipe.png\");\nbird = loadImage(\"bird.png\");\nbird.resize(50,50);\n\
          }\nvoid draw() {\nbackground(back);\nimage (pipeBottom,250,375);\nimage\
          \ (pipeTop,250,-130);\nimage (bird, 250, 300);\n}\n\n\n"
        title: 11 Binary Converter
    _readme: '


      # Level 1 Module 1


      <form action="https://bit.ly/l1m1code" id="moduleButtonForm" method="get">

      <button id="acceptModuleButton" type="submit">

      <span>

      Accept Module

      </span>

      </button>

      </form>

      <!-- <h3><a href="../Level_1_Cheat_Guide.pdf">Cheat Sheet</a></h3> -->


      ## Learn



      ###  Constructors



      ###



      ###



      ###


      <hr/>


      ### Encapsulation



      ###


      <hr/>


      ### Objects &



      ### member vars


      <hr/>


      ### Binary



      ###


      <hr/>


      ## Eclipse



      ###  Intro to Constructors



      ### Asteroids



      ### Race Car Runner



      ### Cat



      ### Harry Potter


      <hr/>


      ### Popcorn



      ### Vault


      <hr/>


      ### Duck



      ### Hungy Hungry Hippos



      ### Solar System


      <hr/>


      ### Intro to Binary



      ### Binary Converter


      <hr/>


      ## Paper/WB



      ### Constructors (WS)



      ###  Pig + Candy (WS)



      ###



      ###


      <hr/>


      ###



      ###


      <hr/>


      ###



      ###


      <hr/>


      ### Module 1 Checkpoint



      ### (SOC-34909505)


      <hr/>




      '
  Module2:
    01_sea_creature:
      _readme: '# 01 Sea Creature


        '
      assignments:
      - assignment: 01_sea_creature
        dir: levels/Level1/Module2/src/_01_sea_creature
        lesson: 01_sea_creature
        level: Level1
        module: Module2
        oassignment: 01_sea_creature
        opath: levels/Level1/Module2/src/_01_sea_creature
        resources: []
        text: '# 01 Sea Creature


          '
        title: 01 Sea Creature
    02_smurf:
      _readme: '# 02 Smurf


        '
      assignments:
      - assignment: 02_smurf
        dir: levels/Level1/Module2/src/_02_smurf
        lesson: 02_smurf
        level: Level1
        module: Module2
        oassignment: 02_smurf
        opath: levels/Level1/Module2/src/_02_smurf
        resources: []
        text: '# 02 Smurf


          '
        title: 02 Smurf
    03_tea_maker:
      _readme: '# 03 Tea Maker


        '
      assignments:
      - assignment: 03_tea_maker
        dir: levels/Level1/Module2/src/_03_tea_maker
        lesson: 03_tea_maker
        level: Level1
        module: Module2
        oassignment: 03_tea_maker
        opath: levels/Level1/Module2/src/_03_tea_maker
        resources: []
        text: '# 03 Tea Maker


          '
        title: 03 Tea Maker
    04_backpack:
      _readme: '# 04 Backpack


        '
      assignments:
      - assignment: 04_backpack
        dir: levels/Level1/Module2/src/_04_backpack
        lesson: 04_backpack
        level: Level1
        module: Module2
        oassignment: 04_backpack
        opath: levels/Level1/Module2/src/_04_backpack
        resources: []
        text: '# 04 Backpack


          '
        title: 04 Backpack
    99_extra:
      _readme: '# 99 Extra


        '
      assignments:
      - assignment: 99_extra
        dir: levels/Level1/Module2/src/_99_extra
        lesson: 99_extra
        level: Level1
        module: Module2
        oassignment: 99_extra
        opath: levels/Level1/Module2/src/_99_extra
        resources: []
        text: '# 99 Extra


          '
        title: 99 Extra
      - assignment: 99_extra
        dir: levels/Level1/Module2/src/_99_extra/_04_tea_party
        lesson: 99_extra
        level: Level1
        module: Module2
        oassignment: 04_tea_party
        opath: levels/Level1/Module2/src/_99_extra/_04_tea_party
        resources: []
        text: "\n\n# Tea Party\n\nYou are hosting a formal Tea Party. Your task is\
          \ to welcome your guests properly. Here are the rules\nfor welcoming guests:\n\
          \nIf the guest has been knighted by the Queen and is male, use the title\
          \ \"Sir\" before their name to\ngreet them, otherwise if the guest is a\
          \ male, use the title \"Mr.\" before their name.\n\nIf the guest has been\
          \ knighted by the Queen and is female, use the title \"Lady\" before their\
          \ name to\ngreet them, otherwise if the guest is a female, use the title\
          \ \"Ms.\" before their name.\n\nAdd code to the class below to support the\
          \ greeting rules above.\n```\n\npublic class TeaParty {\n    public String\
          \ welcome(String name, boolean isWoman, boolean isKnighted) {\n        \n\
          \    }\n}\n```\nHere is some JUnit Test code to check your welcome method.\
          \ Run the tests and check that the green\n\"pass\" bar is displayed.\n```\n\
          \nimport static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\
          \npublic class TeaPartyTest {\n\t/**\n\t * Jane Austen is a woman, so say\
          \ \u201CHello Ms. Austen\u201D. \n\t * George Orwell is a man, so say \u201C\
          Hello Mr. Orwell\u201D. \n\t * Isaac Newton was knighted, so say \"Hello\
          \ Sir Isaac Newton\".\n\t **/\n\n\t@Test\n\tpublic void testIsWomanNotKnighted()\
          \ {\n\t\tTeaParty teaParty = new TeaParty();\n\t\tassertEquals(\"Hello Ms.\
          \ Austen\", teaParty.welcome(\"Austen\", true, false));\n\t}\n\n\t@Test\n\
          \tpublic void testIsManNotKnighted() {\n\t\tTeaParty teaParty = new TeaParty();\n\
          \t\tassertEquals(\"Hello Mr. Orwell\", teaParty.welcome(\"Orwell\", false,\
          \ false));\n\t}\n\n\t@Test\n\tpublic void testIsManKnighted() {\n\t\tTeaParty\
          \ teaParty = new TeaParty();\n\t\tassertEquals(\"Hello Sir Isaac Newton\"\
          , teaParty.welcome(\"Isaac Newton\", false, true));\n\t}\n\t\n\t@Test\n\t\
          public void testIsWomanKnighted() {\n\t\tTeaParty teaParty = new TeaParty();\n\
          \t\tassertEquals(\"Hello Lady Laura\", teaParty.welcome(\"Laura\", true,\
          \ true));\n\t}\n\n}\n```\n\n\n"
        title: 99 Extra
      - assignment: 99_extra
        dir: levels/Level1/Module2/src/_99_extra/_04_unit_tests
        lesson: 99_extra
        level: Level1
        module: Module2
        oassignment: 04_unit_tests
        opath: levels/Level1/Module2/src/_99_extra/_04_unit_tests
        resources: []
        text: "\n\n# Intro to Unit Tests\n\nAn important part of coding is testing\
          \ to see if your code is working correctly. Instead of asking a person to\
          \ run the program each time it is changed to make sure it still runs properly,\
          \ we can make much more reliable automated tests to check it out. These\
          \ are known as unit tests.\nTest-driven development (TDD) is a way of developing\
          \ code where you write the tests before you even start writing the program.\
          \  It\u2019s a way to think through what your code must be able to do before\
          \ your write it.\n\n### JUnit Tests\n\nJUnit is an open source framework\
          \ designed for the purpose of writing and running tests for java programs.\n\
          \nTests can be written that specify the expected return value from running\
          \ some code.\nThe syntax for the tests looks like this:\nassertEquals(expected,\
          \ actual)\nIf the \"expected\" value matches the \"actual\" value, the results\
          \ bar displayed after running the tests will be green. If they are different\
          \ (or there are errors), the results bar will be red.\n\nFor example, in\
          \ the context of the \"real world\"\nassertEquals(true, Is water wet?) \
          \      results bar will be green\n\nassertEquals(true, Are zombies  real?)\
          \       results bar will be red\n\nassertEquals(false, Is coding lame?)\
          \       results bar will be green\nNow for some real code. Will the results\
          \ bar be green or red for these asserts?\nassertEquals(4, add(2,2));\n\n\
          assertEquals(\u201Cbrains\u201D, getZombieFood());\n\nassertEquals(2, getLargest(3,2));\n\
          \n\n"
        title: 99 Extra
      - assignment: 99_extra
        dir: levels/Level1/Module2/src/_99_extra/_05_minion
        lesson: 99_extra
        level: Level1
        module: Module2
        oassignment: 05_minion
        opath: levels/Level1/Module2/src/_99_extra/_05_minion
        resources: []
        text: '# 99 Extra 05 Minion


          '
        title: 99 Extra
    _readme: '# Level1-Module2'
  Module3:
    01_intro_to_static:
      _readme: "\n\n# Running Race - Explaining Static\n\nThe static keyword is a\
        \ reserved word in Java like int, for, if, and else.\nIt can be placed before\
        \ the type when declaring member variables:\n```\n\nstatic int var = 1;\n\
        static Robot rob;\n```\nand before the return type for method definitions:\n\
        ```\n\nstatic float calculateArea(float width, float height){ // code }\n\
        public static void main(String[] args){ // code }\n```\n\n### 1. Static Variable\
        \ Lifetime\n\nA member variable without static\n<b>\nDOES NOT\n</b>\nexist\
        \ before an object/instance of a class is made.\nA member variable with static\n\
        <b>\nDOES\n</b>\nexist before an object/instance of a class is made.\nTake\
        \ the Athlete class for example:\n```\n\npublic class Athlete {\n  static\
        \ String raceLocation = \"New York\";\n  static String raceStartTime = \"\
        9.00am\";\n\n  String name;\n  int speed;\n  int bibNumber;\n  \n  Athlete\
        \ (String name, int speed){\n      this.name = name;\n      this.speed = speed;\n\
        \  }\n\n  static double calculateDuration(double startSec, double finishSec){\
        \ // code }\n\n  void run(){ // code }\n}\n```\nThe static member variables\
        \ in the Athlete class can be a accessed and modified without an object/instance\
        \ of Athlete.\nThis does not work for non-static member variables:\n```\n\n\
        Athlete.raceLocation = \"NYC\";           // OK!\nAthlete.name = \"Jim\";\
        \                   // ERROR!\n\nAthlete jim = new Athlete(\"Jim\", 10); \
        \  // Athlete object/instance jim\n\njim.raceLocation = \"Boston\";      \
        \      // OK!\njim.name = \"Jimmy\"                      // OK!\n```\n\n###\
        \ 2. Only 1 Static Variable for all Objects of a Class\n\nThere is only 1\
        \ static member variable for all objects of a class.\nThere are unique variables\
        \ for each object of a class. For example:\n```\n\nAthlete jim = new Athlete(\"\
        Jim\", 10);\nAthlete amy = new Athlete(\"Amy\", 6);\n\nSystem.out.println(jim.name);\
        \           // prints \"Jim\"\nSystem.out.println(amy.name);           //\
        \ prints \"Amy\"\nSystem.out.println(jim.raceStartTime);  // prints \"9.00am\"\
        \nSystem.out.println(amy.raceStartTime);  // prints \"9.00am\"\n```\nIn this\
        \ example changing raceStartTime for jim to \"10.00am\" also changes the raceStartTime\
        \ for amy.\nThe raceStartTime variable is the same for both jim and amy.\n\
        \n### 3. Non-Static Member Variables and Methods can not be put inside Static\
        \ Methods\n\nstatic methods can also be called before an object of a class\
        \ exists, while non-static methods can't:\n```\n\nAthlete.calculateDuration(0.0,\
        \ 14.7);   // OK!\nAthlete.run();                          // ERROR!\nAthlete\
        \ jim = new Athlete(\"Jim\", 10);\njim.run();                            \
        \  // OK!\njim.calculateDuration(0.0, 14.7);       // OK!\n```\nThis is why\
        \ non-static member variables and methods can't be placed inside of static\
        \ methods.\nStatic methods can be called before an object is created when\
        \ non-static member variables haven't been created yet!\n```\n\nstatic double\
        \ calculateDuration(double startSec, double finishSec){\n    double durationSec\
        \ = finishSec - startSec;\n    \n    System.out.println(name + \" ran the\
        \ race in \" + durationSec + \" seconds.\"); // ERROR! name is non-static\n\
        \    return durationSec;\n}\n```\nThe\n<b>\nthis\n</b>\nkeyword refers to\
        \ an object so it can't be put inside of a static method either:\n```\n\n\
        public static void main(String[] args){\n    JFrame frame = new JFrame();\n\
        \    frame.addActionListener(this);      // ERROR!\n}\n```\n\n\n"
      assignments:
      - assignment: 01_intro_to_static
        dir: levels/Level1/Module3/src/_01_intro_to_static
        lesson: 01_intro_to_static
        level: Level1
        module: Module3
        oassignment: 01_intro_to_static
        opath: levels/Level1/Module3/src/_01_intro_to_static
        resources: []
        text: "\n\n# Running Race - Explaining Static\n\nThe static keyword is a reserved\
          \ word in Java like int, for, if, and else.\nIt can be placed before the\
          \ type when declaring member variables:\n```\n\nstatic int var = 1;\nstatic\
          \ Robot rob;\n```\nand before the return type for method definitions:\n\
          ```\n\nstatic float calculateArea(float width, float height){ // code }\n\
          public static void main(String[] args){ // code }\n```\n\n### 1. Static\
          \ Variable Lifetime\n\nA member variable without static\n<b>\nDOES NOT\n\
          </b>\nexist before an object/instance of a class is made.\nA member variable\
          \ with static\n<b>\nDOES\n</b>\nexist before an object/instance of a class\
          \ is made.\nTake the Athlete class for example:\n```\n\npublic class Athlete\
          \ {\n  static String raceLocation = \"New York\";\n  static String raceStartTime\
          \ = \"9.00am\";\n\n  String name;\n  int speed;\n  int bibNumber;\n  \n\
          \  Athlete (String name, int speed){\n      this.name = name;\n      this.speed\
          \ = speed;\n  }\n\n  static double calculateDuration(double startSec, double\
          \ finishSec){ // code }\n\n  void run(){ // code }\n}\n```\nThe static member\
          \ variables in the Athlete class can be a accessed and modified without\
          \ an object/instance of Athlete.\nThis does not work for non-static member\
          \ variables:\n```\n\nAthlete.raceLocation = \"NYC\";           // OK!\n\
          Athlete.name = \"Jim\";                   // ERROR!\n\nAthlete jim = new\
          \ Athlete(\"Jim\", 10);   // Athlete object/instance jim\n\njim.raceLocation\
          \ = \"Boston\";            // OK!\njim.name = \"Jimmy\"                \
          \      // OK!\n```\n\n### 2. Only 1 Static Variable for all Objects of a\
          \ Class\n\nThere is only 1 static member variable for all objects of a class.\n\
          There are unique variables for each object of a class. For example:\n```\n\
          \nAthlete jim = new Athlete(\"Jim\", 10);\nAthlete amy = new Athlete(\"\
          Amy\", 6);\n\nSystem.out.println(jim.name);           // prints \"Jim\"\n\
          System.out.println(amy.name);           // prints \"Amy\"\nSystem.out.println(jim.raceStartTime);\
          \  // prints \"9.00am\"\nSystem.out.println(amy.raceStartTime);  // prints\
          \ \"9.00am\"\n```\nIn this example changing raceStartTime for jim to \"\
          10.00am\" also changes the raceStartTime for amy.\nThe raceStartTime variable\
          \ is the same for both jim and amy.\n\n### 3. Non-Static Member Variables\
          \ and Methods can not be put inside Static Methods\n\nstatic methods can\
          \ also be called before an object of a class exists, while non-static methods\
          \ can't:\n```\n\nAthlete.calculateDuration(0.0, 14.7);   // OK!\nAthlete.run();\
          \                          // ERROR!\nAthlete jim = new Athlete(\"Jim\"\
          , 10);\njim.run();                              // OK!\njim.calculateDuration(0.0,\
          \ 14.7);       // OK!\n```\nThis is why non-static member variables and\
          \ methods can't be placed inside of static methods.\nStatic methods can\
          \ be called before an object is created when non-static member variables\
          \ haven't been created yet!\n```\n\nstatic double calculateDuration(double\
          \ startSec, double finishSec){\n    double durationSec = finishSec - startSec;\n\
          \    \n    System.out.println(name + \" ran the race in \" + durationSec\
          \ + \" seconds.\"); // ERROR! name is non-static\n    return durationSec;\n\
          }\n```\nThe\n<b>\nthis\n</b>\nkeyword refers to an object so it can't be\
          \ put inside of a static method either:\n```\n\npublic static void main(String[]\
          \ args){\n    JFrame frame = new JFrame();\n    frame.addActionListener(this);\
          \      // ERROR!\n}\n```\n\n\n"
        title: 01 Intro To Static
    02_static_smiley_blues:
      _readme: '# 02 Static Smiley Blues


        '
      assignments:
      - assignment: 02_static_smiley_blues
        dir: levels/Level1/Module3/src/_02_static_smiley_blues
        lesson: 02_static_smiley_blues
        level: Level1
        module: Module3
        oassignment: 02_static_smiley_blues
        opath: levels/Level1/Module3/src/_02_static_smiley_blues
        resources: []
        text: '# 02 Static Smiley Blues


          '
        title: 02 Static Smiley Blues
    04_netflix:
      _readme: '


        # Netflix


        1. The default package contains code for Movie and NetflixQueue classes.


        2. Create your own class with a main() method that will use Movie and NetflixQueue
        to complete the following challenges:


        1. Instantiate some Movie objects (at least 5).

        2. Use the Movie class to get the ticket price of one of your movies.


        3. Instantiate a NetflixQueue.

        4. Add your movies to the Netflix queue.

        5. Print all the movies in your queue.


        6. Use your NetflixQueue object to finish the sentence "the best movie is...."

        7. Use your NetflixQueue to finish the sentence "the second best movie is...."



        '
      assignments:
      - assignment: 04_netflix
        dir: levels/Level1/Module3/src/_04_netflix
        lesson: 04_netflix
        level: Level1
        module: Module3
        oassignment: 04_netflix
        opath: levels/Level1/Module3/src/_04_netflix
        resources: []
        text: '


          # Netflix


          1. The default package contains code for Movie and NetflixQueue classes.


          2. Create your own class with a main() method that will use Movie and NetflixQueue
          to complete the following challenges:


          1. Instantiate some Movie objects (at least 5).

          2. Use the Movie class to get the ticket price of one of your movies.


          3. Instantiate a NetflixQueue.

          4. Add your movies to the Netflix queue.

          5. Print all the movies in your queue.


          6. Use your NetflixQueue object to finish the sentence "the best movie is...."

          7. Use your NetflixQueue to finish the sentence "the second best movie is...."



          '
        title: 04 Netflix
    05_cow_timer:
      _readme: '# 05 Cow Timer


        '
      assignments:
      - assignment: 05_cow_timer
        dir: levels/Level1/Module3/src/_05_cow_timer
        lesson: 05_cow_timer
        level: Level1
        module: Module3
        oassignment: 05_cow_timer
        opath: levels/Level1/Module3/src/_05_cow_timer
        resources: []
        text: '# 05 Cow Timer


          '
        title: 05 Cow Timer
    06_frogger:
      _readme: "\n\n# Frogger\n\n1. Start a new sketch with draw, setup, and settings\
        \ methods. Ask your teacher if you do not know how to do this.\n\n2.  In the\
        \ settings method, set your canvas of size 800x600 for your game\nsize(width,\
        \ height);\nIn the draw method, set the background color of your sketch\n\
        background(red,green,blue);\n3. In the draw method, draw a frog on the bottom\
        \ of the canvas. (It can be a ball for now)\nfill(red, green, blue);\nellipse(x,\
        \ y, width, height);\n4. Make member variables to keep track of your frog\u2019\
        s hop distance, x and y position\n5. Add code to the method below (match the\
        \ code to the comments) to give our frog movement.\n```\nvoid keyPressed()\n\
        {\n    if(key == CODED){\n        if(keyCode == UP)\n        {\n         \
        \   //Frog Y position goes up\n        }\n        else if(keyCode == DOWN)\n\
        \        {\n            //Frog Y position goes down \n        }\n        else\
        \ if(keyCode == RIGHT)\n        {\n            //Frog X position goes right\n\
        \        }\n        else if(keyCode == LEFT)\n        {\n            //Frog\
        \ X position goes left\n        }\n    }\n}\n```\n6. Write a method to keep\
        \ our frog from going outside of the canvas\n7. Create a new Car class in\
        \ Eclipse. Your Car class will include the car\u2019s x position, y position,\
        \ the size of the car, and the speed of the car.\n8. Create a constructor\
        \ for your Car class that initializes each member variable with parameters.\n\
        9. Copy this functionality into your Car class to display your car\n```\n\
        void display()\n  {\n    fill(0,255,0);\n    rect(x , y,  size, 50);\n  }\n\
        ```\n10. Declare several Car member variables inside your class and initialize\
        \ them in the setup method.\n11. Call the display() method from your draw\
        \ method for each car. You should see your cars appear.\n12. Inside your Car\
        \ class write a method for the car to move to the left with its speed.\n13.\
        \ Inside your Car class write a method for the car to move to the left with\
        \ its speed. In the same method, if the car goes off the canvas, have it return\
        \ to the rightmost position of your canvas.  (hint: use Processing's width\
        \ variable)\n14.  Write another method for the car to move to the right with\
        \ its speed. In the same method,  if the car goes off the canvas, have it\
        \ return to the leftmost position of your canvas\n15.  In the draw() method,\
        \ alternate the driving direction of each of your cars to either go left or\
        \ right. Use the display() method after every drive method.\n16. Create getX(),\
        \ getY(), and getSize() methods in your Car class.\n17. Check when a car hits\
        \ your frog. You can use the following intersection method to help.\n```\n\
        boolean intersects(Car car) {\n if ((frogY > car.getY() && frogY < car.getY()+50)\
        \ &&\n                (frogX > car.getX() && frogX < car.getX()+car.getSize()))\
        \ {\n   return true;\n  }\n else  {\n  return false;\n }\n```\n18. Call the\
        \ intersects method for one of your cars in your draw method.  If the intersects\
        \ method returns true, return your frog to the starting point.\n19. Repeat\
        \ step 18 for all of your cars.\n20. OPTIONAL.   Use images for the background,\
        \ cars and frog (see image at top). You can find your own images, or those\
        \ provided in the Module 3 Java project. See below for code snippets to load\
        \ and draw images.\n```\n\n PImage back;\n PImage carLeft;\n PImage carRight;\n\
        \ PImage frog;\n    void settings(){\n        size(844,600);\n    }\n    void\
        \ setup() {\n        back = loadImage(\"froggerBackground.png\");\n      \
        \  carLeft = loadImage(\"carLeft.png\");\n        carLeft.resize(160,100);\n\
        \        carRight = loadImage(\"carRight.png\");\n        carRight.resize(160,100);\n\
        \        frog = loadImage(\"frog.png\");\n        frog.resize(75,75);\n  \
        \  }\n    void draw() {\n        background(back);\n        image (carLeft,250,360);\n\
        \        image (carRight,250, 210);\n        image (frog, 300, 530);\n   \
        \ }\n```\n\n\n"
      assignments:
      - assignment: 06_frogger
        dir: levels/Level1/Module3/src/_06_frogger
        lesson: 06_frogger
        level: Level1
        module: Module3
        oassignment: 06_frogger
        opath: levels/Level1/Module3/src/_06_frogger
        resources:
        - levels/Level1/Module3/src/_06_frogger/.web/FroggerScreenShot.png
        text: "\n\n# Frogger\n\n1. Start a new sketch with draw, setup, and settings\
          \ methods. Ask your teacher if you do not know how to do this.\n\n2.  In\
          \ the settings method, set your canvas of size 800x600 for your game\nsize(width,\
          \ height);\nIn the draw method, set the background color of your sketch\n\
          background(red,green,blue);\n3. In the draw method, draw a frog on the bottom\
          \ of the canvas. (It can be a ball for now)\nfill(red, green, blue);\nellipse(x,\
          \ y, width, height);\n4. Make member variables to keep track of your frog\u2019\
          s hop distance, x and y position\n5. Add code to the method below (match\
          \ the code to the comments) to give our frog movement.\n```\nvoid keyPressed()\n\
          {\n    if(key == CODED){\n        if(keyCode == UP)\n        {\n       \
          \     //Frog Y position goes up\n        }\n        else if(keyCode == DOWN)\n\
          \        {\n            //Frog Y position goes down \n        }\n      \
          \  else if(keyCode == RIGHT)\n        {\n            //Frog X position goes\
          \ right\n        }\n        else if(keyCode == LEFT)\n        {\n      \
          \      //Frog X position goes left\n        }\n    }\n}\n```\n6. Write a\
          \ method to keep our frog from going outside of the canvas\n7. Create a\
          \ new Car class in Eclipse. Your Car class will include the car\u2019s x\
          \ position, y position, the size of the car, and the speed of the car.\n\
          8. Create a constructor for your Car class that initializes each member\
          \ variable with parameters.\n9. Copy this functionality into your Car class\
          \ to display your car\n```\nvoid display()\n  {\n    fill(0,255,0);\n  \
          \  rect(x , y,  size, 50);\n  }\n```\n10. Declare several Car member variables\
          \ inside your class and initialize them in the setup method.\n11. Call the\
          \ display() method from your draw method for each car. You should see your\
          \ cars appear.\n12. Inside your Car class write a method for the car to\
          \ move to the left with its speed.\n13. Inside your Car class write a method\
          \ for the car to move to the left with its speed. In the same method, if\
          \ the car goes off the canvas, have it return to the rightmost position\
          \ of your canvas.  (hint: use Processing's width variable)\n14.  Write another\
          \ method for the car to move to the right with its speed. In the same method,\
          \  if the car goes off the canvas, have it return to the leftmost position\
          \ of your canvas\n15.  In the draw() method, alternate the driving direction\
          \ of each of your cars to either go left or right. Use the display() method\
          \ after every drive method.\n16. Create getX(), getY(), and getSize() methods\
          \ in your Car class.\n17. Check when a car hits your frog. You can use the\
          \ following intersection method to help.\n```\nboolean intersects(Car car)\
          \ {\n if ((frogY > car.getY() && frogY < car.getY()+50) &&\n           \
          \     (frogX > car.getX() && frogX < car.getX()+car.getSize())) {\n   return\
          \ true;\n  }\n else  {\n  return false;\n }\n```\n18. Call the intersects\
          \ method for one of your cars in your draw method.  If the intersects method\
          \ returns true, return your frog to the starting point.\n19. Repeat step\
          \ 18 for all of your cars.\n20. OPTIONAL.   Use images for the background,\
          \ cars and frog (see image at top). You can find your own images, or those\
          \ provided in the Module 3 Java project. See below for code snippets to\
          \ load and draw images.\n```\n\n PImage back;\n PImage carLeft;\n PImage\
          \ carRight;\n PImage frog;\n    void settings(){\n        size(844,600);\n\
          \    }\n    void setup() {\n        back = loadImage(\"froggerBackground.png\"\
          );\n        carLeft = loadImage(\"carLeft.png\");\n        carLeft.resize(160,100);\n\
          \        carRight = loadImage(\"carRight.png\");\n        carRight.resize(160,100);\n\
          \        frog = loadImage(\"frog.png\");\n        frog.resize(75,75);\n\
          \    }\n    void draw() {\n        background(back);\n        image (carLeft,250,360);\n\
          \        image (carRight,250, 210);\n        image (frog, 300, 530);\n \
          \   }\n```\n\n\n"
        title: 06 Frogger
    99_extra:
      _readme: '# LEVEL 1 MODULE 3 In-progress recipes go here!'
      assignments:
      - assignment: 99_extra
        dir: levels/Level1/Module3/src/_99_extra/_04_gridworld
        lesson: 99_extra
        level: Level1
        module: Module3
        oassignment: 04_gridworld
        opath: levels/Level1/Module3/src/_99_extra/_04_gridworld
        resources: []
        text: "\n\n# Gridworld\n\nIn this exercise we\u2019ll use OBJECTS and METHODS\
          \ to make a world that contains bugs and flowers.\nBefore you start, you\
          \ need to make sure that the gridworld.jar is in the build path of your\
          \ Java project as follows:\n\nRight click your Java project (ask your teacher\
          \ if you do not know how to find this), then click Build Path. Configure\
          \ Build Path, and make sure  gridworld.jar is under the Libraries tab\n\n\
          If you cannot find it, ask your teacher to help you get it into your Java\
          \ project.\nFirst create a runner class for your program called Gridworld.\n\
          Now use this chart to help you complete the following challenges:\n\n1.\
          \  Figure out how to get a World to show.\n\n2.  Figure out how to add a\
          \ Bug to the world (clue: you will need the Bug and Location objects)\n\n\
          3.  Add another bug at a random location in the world.\n\n4.  Change the\
          \ color of that bug to blue.\n\n5.  Make the bug face to the right.\n\n\
          6.  Add flowers to the left and right of the bug.\n\n7.  Fill the whole\
          \ world with flowers!\n\n8.  [Optional] Color the flowers in rows like the\
          \ American flag (red & white)\n\n9.  [Optional] Use a new class to make\
          \ an X out of bugs.\n\n\n"
        title: 99 Extra
  Module4:
    01_chuckle_clicker:
      _readme: "\n\n# Chuckle Clicker\n\nWe are going to tell the user jokes that\
        \ have punchlines.\n1. Make a ChuckleClicker class with a main method and\
        \ a makeButtons() method.\nOpen a pop-up that shows the message \"Make Buttons\"\
        \ in the makeButtons method, to prove that it is working.\n(You will need\
        \ to instantiate your class before you can call the method).\n\n2. Now change\
        \ the makeButtons() method, to make a JFrame and get it to show.\n\n3.Add\
        \ a JPanel and two JButtons to the frame, so it looks a lot like this:\n\n\
        4. *[Optional] Customize your GUI with setText, setSize, etc.\n5. Make a pop-up\
        \ that says \u201Chi\u201D when either of the buttons are pressed. You will\
        \ need to add listeners to the buttons for this to work.\n\n6. Check if the\
        \ ActionEvent came from the joke button or the punchline button.\nif(event.getSource()\
        \ == jokeButton)\nHint: You might need to move the declaration of your buttons\
        \ outside of the makeButtons() method.\n7. Use JOptionPane to print the joke\
        \ or the punchline depending on which button was clicked.\n\n\n"
      assignments:
      - assignment: 01_chuckle_clicker
        dir: levels/Level1/Module4/src/_01_chuckle_clicker
        lesson: 01_chuckle_clicker
        level: Level1
        module: Module4
        oassignment: 01_chuckle_clicker
        opath: levels/Level1/Module4/src/_01_chuckle_clicker
        resources:
        - levels/Level1/Module4/src/_01_chuckle_clicker/.web/chuckle.png
        text: "\n\n# Chuckle Clicker\n\nWe are going to tell the user jokes that have\
          \ punchlines.\n1. Make a ChuckleClicker class with a main method and a makeButtons()\
          \ method.\nOpen a pop-up that shows the message \"Make Buttons\" in the\
          \ makeButtons method, to prove that it is working.\n(You will need to instantiate\
          \ your class before you can call the method).\n\n2. Now change the makeButtons()\
          \ method, to make a JFrame and get it to show.\n\n3.Add a JPanel and two\
          \ JButtons to the frame, so it looks a lot like this:\n\n4. *[Optional]\
          \ Customize your GUI with setText, setSize, etc.\n5. Make a pop-up that\
          \ says \u201Chi\u201D when either of the buttons are pressed. You will need\
          \ to add listeners to the buttons for this to work.\n\n6. Check if the ActionEvent\
          \ came from the joke button or the punchline button.\nif(event.getSource()\
          \ == jokeButton)\nHint: You might need to move the declaration of your buttons\
          \ outside of the makeButtons() method.\n7. Use JOptionPane to print the\
          \ joke or the punchline depending on which button was clicked.\n\n\n"
        title: 01 Chuckle Clicker
    02_jeopardy:
      _readme: '


        # Jeopardy


        We are going to make a Jeopardy game


        This is what a "real" Jeopardy board looks like:

        Sample output: Figure 1

        Sample output: Figure 2 (first question answered correctly)



        '
      assignments:
      - assignment: 02_jeopardy
        dir: levels/Level1/Module4/src/_02_jeopardy
        lesson: 02_jeopardy
        level: Level1
        module: Module4
        oassignment: 02_jeopardy
        opath: levels/Level1/Module4/src/_02_jeopardy
        resources:
        - levels/Level1/Module4/src/_02_jeopardy/.web/jeopardy1.png
        - levels/Level1/Module4/src/_02_jeopardy/.web/jeopardy2.png
        - levels/Level1/Module4/src/_02_jeopardy/.web/jeopardy3.png
        text: '


          # Jeopardy


          We are going to make a Jeopardy game


          This is what a "real" Jeopardy board looks like:

          Sample output: Figure 1

          Sample output: Figure 2 (first question answered correctly)



          '
        title: 02 Jeopardy
    03_typing_tutor:
      _readme: "\n\n# Typing Tutor\n\nWe are going to make a Typing Tutor.\n<img alt=\"\
        \" src=\"./images/typing.jpg\" style=\"width: 444.00px; height: 163.00px;\
        \ margin-left: 100.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px);\
        \ -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"/>\n1. \
        \ Make a TypingTutor class with a setup() method and a Runner class with a\
        \ main method. Create a JFrame, JPanel, and currentLetter as member variables\n\
        Make sure the JFrame is visible and set the default close operation.\n\nJFrame\
        \ frame = new JFrame();\nJPanel panel = new JPanel();\nchar currentLetter;\n\
        \nvoid setup(){\nframe.setVisible(true);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\
        }\n2. Paste the following method after the main method.\nchar generateRandomLetter()\
        \ {\nRandom r = new Random();\nreturn (char) (r.nextInt(26) + 'a');\n}\n3.\
        \ Initialize currentLetter in the setup method as shown below:\n```\ncurrentLetter\
        \ = generateRandomLetter();\n```\n4.Create a JLabel and set the text of the\
        \ label to the currentLetter in the setup method.\n5. Format the letter so\
        \ that it is nice and big. Here are some hints\u2026.\n```\n\nlabel.setFont(label.getFont().deriveFont(28.0f));\n\
        label.setHorizontalAlignment(JLabel.CENTER);\n```\n6. Add a key listener to\
        \ the frame in setup method. Add label to the panel and panel to the frame.\
        \ Then pack the frame.\n7. Create object/instance of typingTutor class in\
        \ main method. Using the object/instance call the setup method as shown below.\n\
        public static void main(String[] args){\ntypingTutor tutor = new typingTutor();\n\
        tutor.setup();\n}\n8. Make the letter change every time a key is pressed.\
        \  To do that, in the keyReleased method:\ni) Reset currentLetter with generateRandomLetter().\n\
        ii) Set the text of your JLabel to the new currentLetter.\n9. In the keyPressed\
        \ method, print out the character that the user typed.\n10. If they typed\
        \ the currentLetter, print \u201Ccorrect\u201D.\n\n11. If they typed the correct\
        \ letter, set the panel background to green. Otherwise set it to red.\n\n\
        panel.setBackground(Color.GREEN);\n\n12.  [optional] After a certain number\
        \ of characters, show the users\u2019 typing speed.\n```\nDate timeAtStart\
        \ = new Date();\n     \nprivate void showTypingSpeed(int numberOfCorrectCharactersTyped)\
        \ {\n    Date timeAtEnd = new Date();\n    long gameDuration = timeAtEnd.getTime()\
        \ - timeAtStart.getTime();\n    long gameInSeconds = (gameDuration / 1000)\
        \ % 60;\n    double charactersPerSecond = ((double) numberOfCorrectCharactersTyped\
        \ / (double) gameInSeconds);\n    int charactersPerMinute = (int) (charactersPerSecond\
        \ * 60);\n    JOptionPane.showMessageDialog(null, \"Your typing speed is \"\
        \ + charactersPerMinute + \" characters per minute.\");\n} \n```\n\n\n"
      assignments:
      - assignment: 03_typing_tutor
        dir: levels/Level1/Module4/src/_03_typing_tutor
        lesson: 03_typing_tutor
        level: Level1
        module: Module4
        oassignment: 03_typing_tutor
        opath: levels/Level1/Module4/src/_03_typing_tutor
        resources:
        - levels/Level1/Module4/src/_03_typing_tutor/.web/typing.jpg
        - levels/Level1/Module4/src/_03_typing_tutor/.web/typingTutor1.png
        text: "\n\n# Typing Tutor\n\nWe are going to make a Typing Tutor.\n<img alt=\"\
          \" src=\"./images/typing.jpg\" style=\"width: 444.00px; height: 163.00px;\
          \ margin-left: 100.00px; margin-top: 0.00px; transform: rotate(0.00rad)\
          \ translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\"\
          \ title=\"\"/>\n1.  Make a TypingTutor class with a setup() method and a\
          \ Runner class with a main method. Create a JFrame, JPanel, and currentLetter\
          \ as member variables\nMake sure the JFrame is visible and set the default\
          \ close operation.\n\nJFrame frame = new JFrame();\nJPanel panel = new JPanel();\n\
          char currentLetter;\n\nvoid setup(){\nframe.setVisible(true);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\
          }\n2. Paste the following method after the main method.\nchar generateRandomLetter()\
          \ {\nRandom r = new Random();\nreturn (char) (r.nextInt(26) + 'a');\n}\n\
          3. Initialize currentLetter in the setup method as shown below:\n```\ncurrentLetter\
          \ = generateRandomLetter();\n```\n4.Create a JLabel and set the text of\
          \ the label to the currentLetter in the setup method.\n5. Format the letter\
          \ so that it is nice and big. Here are some hints\u2026.\n```\n\nlabel.setFont(label.getFont().deriveFont(28.0f));\n\
          label.setHorizontalAlignment(JLabel.CENTER);\n```\n6. Add a key listener\
          \ to the frame in setup method. Add label to the panel and panel to the\
          \ frame. Then pack the frame.\n7. Create object/instance of typingTutor\
          \ class in main method. Using the object/instance call the setup method\
          \ as shown below.\npublic static void main(String[] args){\ntypingTutor\
          \ tutor = new typingTutor();\ntutor.setup();\n}\n8. Make the letter change\
          \ every time a key is pressed.  To do that, in the keyReleased method:\n\
          i) Reset currentLetter with generateRandomLetter().\nii) Set the text of\
          \ your JLabel to the new currentLetter.\n9. In the keyPressed method, print\
          \ out the character that the user typed.\n10. If they typed the currentLetter,\
          \ print \u201Ccorrect\u201D.\n\n11. If they typed the correct letter, set\
          \ the panel background to green. Otherwise set it to red.\n\npanel.setBackground(Color.GREEN);\n\
          \n12.  [optional] After a certain number of characters, show the users\u2019\
          \ typing speed.\n```\nDate timeAtStart = new Date();\n     \nprivate void\
          \ showTypingSpeed(int numberOfCorrectCharactersTyped) {\n    Date timeAtEnd\
          \ = new Date();\n    long gameDuration = timeAtEnd.getTime() - timeAtStart.getTime();\n\
          \    long gameInSeconds = (gameDuration / 1000) % 60;\n    double charactersPerSecond\
          \ = ((double) numberOfCorrectCharactersTyped / (double) gameInSeconds);\n\
          \    int charactersPerMinute = (int) (charactersPerSecond * 60);\n    JOptionPane.showMessageDialog(null,\
          \ \"Your typing speed is \" + charactersPerMinute + \" characters per minute.\"\
          );\n} \n```\n\n\n"
        title: 03 Typing Tutor
    04_book_of_illusions:
      _readme: '# 04 Book Of Illusions


        '
      assignments:
      - assignment: 04_book_of_illusions
        dir: levels/Level1/Module4/src/_04_book_of_illusions
        lesson: 04_book_of_illusions
        level: Level1
        module: Module4
        oassignment: 04_book_of_illusions
        opath: levels/Level1/Module4/src/_04_book_of_illusions
        resources: []
        text: '# 04 Book Of Illusions


          '
        title: 04 Book Of Illusions
    05_fortune_teller:
      _readme: '# 05 Fortune Teller


        '
      assignments:
      - assignment: 05_fortune_teller
        dir: levels/Level1/Module4/src/_05_fortune_teller
        lesson: 05_fortune_teller
        level: Level1
        module: Module4
        oassignment: 05_fortune_teller
        opath: levels/Level1/Module4/src/_05_fortune_teller
        resources: []
        text: '# 05 Fortune Teller


          '
        title: 05 Fortune Teller
    06_calculator:
      _readme: '


        # Calculator


        1. In a Calculator class, create methods for add, multiply, subtract, and
        divide.


        2. Create a CalculatorRunner class to test the above methods.


        3. Add a Swing UI to the Calculator (see example below), with 2 fields to
        input numbers, and buttons for each math operation.



        '
      assignments:
      - assignment: 06_calculator
        dir: levels/Level1/Module4/src/_06_calculator
        lesson: 06_calculator
        level: Level1
        module: Module4
        oassignment: 06_calculator
        opath: levels/Level1/Module4/src/_06_calculator
        resources:
        - levels/Level1/Module4/src/_06_calculator/.web/calculator.png
        text: '


          # Calculator


          1. In a Calculator class, create methods for add, multiply, subtract, and
          divide.


          2. Create a CalculatorRunner class to test the above methods.


          3. Add a Swing UI to the Calculator (see example below), with 2 fields to
          input numbers, and buttons for each math operation.



          '
        title: 06 Calculator
    07_tv_show_episode_info:
      _readme: '# 07 Tv Show Episode Info


        '
      assignments:
      - assignment: 07_tv_show_episode_info
        dir: levels/Level1/Module4/src/_07_tv_show_episode_info
        lesson: 07_tv_show_episode_info
        level: Level1
        module: Module4
        oassignment: 07_tv_show_episode_info
        opath: levels/Level1/Module4/src/_07_tv_show_episode_info
        resources: []
        text: '# 07 Tv Show Episode Info


          '
        title: 07 Tv Show Episode Info
    08_pig_latin:
      _readme: '


        # Pig Latin Translator


        We are going to make a translator (similar to Google translate) that converts
        English to Pig Latin.

        1. Make a UI that looks something like this:


        2. Using the PigLatinTranslator class in the package, create a program that:

        * Translates a word in English to Pig Latin when a button is pressed.

        * Translates a word in Pig Latin to English when a button is pressed.

        * Make the computer speak the Pig Latin phrase (using Sound.speak(words))
        when a button is pressed.



        '
      assignments:
      - assignment: 08_pig_latin
        dir: levels/Level1/Module4/src/_08_pig_latin
        lesson: 08_pig_latin
        level: Level1
        module: Module4
        oassignment: 08_pig_latin
        opath: levels/Level1/Module4/src/_08_pig_latin
        resources:
        - levels/Level1/Module4/src/_08_pig_latin/.web/PigLatin2.png
        text: '


          # Pig Latin Translator


          We are going to make a translator (similar to Google translate) that converts
          English to Pig Latin.

          1. Make a UI that looks something like this:


          2. Using the PigLatinTranslator class in the package, create a program that:

          * Translates a word in English to Pig Latin when a button is pressed.

          * Translates a word in Pig Latin to English when a button is pressed.

          * Make the computer speak the Pig Latin phrase (using Sound.speak(words))
          when a button is pressed.



          '
        title: 08 Pig Latin
    09_whack_a_mole:
      _readme: "\n\n# Whack-a-Mole\n\nWe are going to make a game where the user has\
        \ to click on a \"mole\". The game is timed so the user can get their \"whack\
        \ rate\".\n1. Start building a basic Swing GUI to hold the game shown below\
        \ (JFrame, JPanel, etc.)\n2. Make a drawButtons method that takes a random\
        \ number as a parameter. It should make a GUI like the one in the picture\
        \ below, but the \u201Cmole!\u201D location will be random each time the frame\
        \ is drawn.\n\n[Hint: set the size of the frame rather than packing it.]\n\
        \n3. If they click on a button other than \u201Cmole!\u201D, use this speak()\
        \ method to tell them they missed.\n```\n\n    static void speak(String words)\
        \ {\n        if( System.getProperty( \"os.name\" ).contains( \"Windows\" )\
        \ ) {\n            String cmd = \"PowerShell -Command \\\"Add-Type -AssemblyName\
        \ System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak('\"\
        \n                    + words + \"');\\\"\";\n            try {\n        \
        \        Runtime.getRuntime().exec( cmd ).waitFor();\n            } catch(\
        \ Exception e ) {\n                e.printStackTrace();\n            }\n \
        \       } else {\n            try {\n                Runtime.getRuntime().exec(\
        \ \"say \" + words ).waitFor();\n            } catch( Exception e ) {\n  \
        \              e.printStackTrace();\n            }\n        }\n    }\n```\n\
        4. Dispose of the frame and draw the buttons anew.\n\n5. After they\u2019\
        ve whacked 10 moles, call this endGame() method.\n```\nprivate void endGame(Date\
        \ timeAtStart, int molesWhacked) { \n    Date timeAtEnd = new Date();\n  \
        \  JOptionPane.showMessageDialog(null, \"Your whack rate is \"\n         \
        \   + ((timeAtEnd.getTime() - timeAtStart.getTime()) / 1000.00 / molesWhacked)\n\
        \                  + \" moles per second.\");\n}\n```\n6. Count how many times\
        \ they hit something other than the mole! button and change the \"missed\"\
        \ comments each time (be nice). When they have missed five times, tell them\
        \ they have lost, and end the game.\nOption: find out how you can use the\
        \ switch statement to code this.\n7. Find a sound file (.wav) and place it\
        \ in your Java package. Call this playSound() method when they hit a mole.\n\
        ```\nprivate void playSound(String fileName) { \n    AudioClip sound = JApplet.newAudioClip(getClass().getResource(fileName));\n\
        \    sound.play();\n}\n```\n\n\n"
      assignments:
      - assignment: 09_whack_a_mole
        dir: levels/Level1/Module4/src/_09_whack_a_mole
        lesson: 09_whack_a_mole
        level: Level1
        module: Module4
        oassignment: 09_whack_a_mole
        opath: levels/Level1/Module4/src/_09_whack_a_mole
        resources:
        - levels/Level1/Module4/src/_09_whack_a_mole/.web/whackAmole.png
        text: "\n\n# Whack-a-Mole\n\nWe are going to make a game where the user has\
          \ to click on a \"mole\". The game is timed so the user can get their \"\
          whack rate\".\n1. Start building a basic Swing GUI to hold the game shown\
          \ below (JFrame, JPanel, etc.)\n2. Make a drawButtons method that takes\
          \ a random number as a parameter. It should make a GUI like the one in the\
          \ picture below, but the \u201Cmole!\u201D location will be random each\
          \ time the frame is drawn.\n\n[Hint: set the size of the frame rather than\
          \ packing it.]\n\n3. If they click on a button other than \u201Cmole!\u201D\
          , use this speak() method to tell them they missed.\n```\n\n    static void\
          \ speak(String words) {\n        if( System.getProperty( \"os.name\" ).contains(\
          \ \"Windows\" ) ) {\n            String cmd = \"PowerShell -Command \\\"\
          Add-Type -AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak('\"\
          \n                    + words + \"');\\\"\";\n            try {\n      \
          \          Runtime.getRuntime().exec( cmd ).waitFor();\n            } catch(\
          \ Exception e ) {\n                e.printStackTrace();\n            }\n\
          \        } else {\n            try {\n                Runtime.getRuntime().exec(\
          \ \"say \" + words ).waitFor();\n            } catch( Exception e ) {\n\
          \                e.printStackTrace();\n            }\n        }\n    }\n\
          ```\n4. Dispose of the frame and draw the buttons anew.\n\n5. After they\u2019\
          ve whacked 10 moles, call this endGame() method.\n```\nprivate void endGame(Date\
          \ timeAtStart, int molesWhacked) { \n    Date timeAtEnd = new Date();\n\
          \    JOptionPane.showMessageDialog(null, \"Your whack rate is \"\n     \
          \       + ((timeAtEnd.getTime() - timeAtStart.getTime()) / 1000.00 / molesWhacked)\n\
          \                  + \" moles per second.\");\n}\n```\n6. Count how many\
          \ times they hit something other than the mole! button and change the \"\
          missed\" comments each time (be nice). When they have missed five times,\
          \ tell them they have lost, and end the game.\nOption: find out how you\
          \ can use the switch statement to code this.\n7. Find a sound file (.wav)\
          \ and place it in your Java package. Call this playSound() method when they\
          \ hit a mole.\n```\nprivate void playSound(String fileName) { \n    AudioClip\
          \ sound = JApplet.newAudioClip(getClass().getResource(fileName));\n    sound.play();\n\
          }\n```\n\n\n"
        title: 09 Whack A Mole
    10_slot_machine:
      _readme: '


        # Slot Machine


        We are going to make a slot machine.

        The slot machine we are going to make, will look a little like the middle
        row on this image:

        First, find 3 images for the slot machine to display, e.g. cherry, orange,
        lime.


        Each "reel" of the slot machine will randomly display one of 3 images you
        have chosen (you can add more images later if there is time).


        Put a "SPIN" button onto the frame that causes each of the 3 "reels" to randomly
        change the image they are showing.


        If all 3 reels have the same image showing (like in the picture above), the
        player wins. Display a "YOU WIN" message, optionally add a sound of success,
        and if you are still having fun - update a win counter to show the user how
        many times they have won.


        You may find the code below helpful:


        private JLabel createLabelImage(String fileName) throws MalformedURLException{

        URL imageURL = getClass().getResource(fileName);

        if (imageURL == null){

        System.err.println("Could not find image " + fileName);

        return new JLabel();

        }

        Icon icon = new ImageIcon(imageURL);

        JLabel imageLabel = new JLabel(icon);

        return imageLabel;

        }



        '
      assignments:
      - assignment: 10_slot_machine
        dir: levels/Level1/Module4/src/_10_slot_machine
        lesson: 10_slot_machine
        level: Level1
        module: Module4
        oassignment: 10_slot_machine
        opath: levels/Level1/Module4/src/_10_slot_machine
        resources:
        - levels/Level1/Module4/src/_10_slot_machine/.web/slotMachine.png
        text: '


          # Slot Machine


          We are going to make a slot machine.

          The slot machine we are going to make, will look a little like the middle
          row on this image:

          First, find 3 images for the slot machine to display, e.g. cherry, orange,
          lime.


          Each "reel" of the slot machine will randomly display one of 3 images you
          have chosen (you can add more images later if there is time).


          Put a "SPIN" button onto the frame that causes each of the 3 "reels" to
          randomly change the image they are showing.


          If all 3 reels have the same image showing (like in the picture above),
          the player wins. Display a "YOU WIN" message, optionally add a sound of
          success, and if you are still having fun - update a win counter to show
          the user how many times they have won.


          You may find the code below helpful:


          private JLabel createLabelImage(String fileName) throws MalformedURLException{

          URL imageURL = getClass().getResource(fileName);

          if (imageURL == null){

          System.err.println("Could not find image " + fileName);

          return new JLabel();

          }

          Icon icon = new ImageIcon(imageURL);

          JLabel imageLabel = new JLabel(icon);

          return imageLabel;

          }



          '
        title: 10 Slot Machine
    11_lights_out:
      _readme: '# 11 Lights Out


        '
      assignments:
      - assignment: 11_lights_out
        dir: levels/Level1/Module4/src/_11_lights_out
        lesson: 11_lights_out
        level: Level1
        module: Module4
        oassignment: 11_lights_out
        opath: levels/Level1/Module4/src/_11_lights_out
        resources: []
        text: '# 11 Lights Out


          '
        title: 11 Lights Out
    12_online_practice_quiz:
      _readme: '<html>

        <head>

        <title>

        League Level 1 - Quiz

        </title>

        <meta charset="utf-8"/>

        <meta content="width=device-width, initial-scale=1" name="viewport"/>

        <link href="https://league-central.github.io/curriculum/style/style.css" rel="stylesheet"/>

        <link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet"/>

        <style>


        #quiz {


        margin-left:50px;

        }


        #nav {


        margin-left:50px;

        position: relative;

        }


        #footer {


        position: absolute;

        bottom: -100;

        width: 100%;

        }

        button {background-color:yellow; border-radius: 3px; font-size: 125%;

        }

        code {font-size: 125%; color: forestgreen}

        pre{

        margin: 10 auto;

        width: 90%;

        }

        </style>

        </head>


        #


        Level 1 Self-Test Quiz

        </html>

        '
      assignments:
      - assignment: 12_online_practice_quiz
        dir: levels/Level1/Module4/src/_12_online_practice_quiz
        lesson: 12_online_practice_quiz
        level: Level1
        module: Module4
        oassignment: 12_online_practice_quiz
        opath: levels/Level1/Module4/src/_12_online_practice_quiz
        resources: []
        text: '<html>

          <head>

          <title>

          League Level 1 - Quiz

          </title>

          <meta charset="utf-8"/>

          <meta content="width=device-width, initial-scale=1" name="viewport"/>

          <link href="https://league-central.github.io/curriculum/style/style.css"
          rel="stylesheet"/>

          <link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet"/>

          <style>


          #quiz {


          margin-left:50px;

          }


          #nav {


          margin-left:50px;

          position: relative;

          }


          #footer {


          position: absolute;

          bottom: -100;

          width: 100%;

          }

          button {background-color:yellow; border-radius: 3px; font-size: 125%;

          }

          code {font-size: 125%; color: forestgreen}

          pre{

          margin: 10 auto;

          width: 90%;

          }

          </style>

          </head>


          #


          Level 1 Self-Test Quiz

          </html>

          '
        title: 12 Online Practice Quiz
    99_extra:
      _readme: '# 99 Extra


        '
      assignments:
      - assignment: 99_extra
        dir: levels/Level1/Module4/src/_99_extra
        lesson: 99_extra
        level: Level1
        module: Module4
        oassignment: 99_extra
        opath: levels/Level1/Module4/src/_99_extra
        resources: []
        text: '# 99 Extra


          '
        title: 99 Extra
      - assignment: 99_extra
        dir: levels/Level1/Module4/src/_99_extra/_01_nasty_surprise
        lesson: 99_extra
        level: Level1
        module: Module4
        oassignment: 01_nasty_surprise
        opath: levels/Level1/Module4/src/_99_extra/_01_nasty_surprise
        resources: []
        text: "\n\n# Nasty Surprise\n\n1. Make a user interface that has 2 buttons.\
          \ One says \u201CTrick\u201D the other says \u201CTreat\u201D.\n\n2. When\
          \ the user clicks on the Trick button, show them a picture of a cute puppy.\n\
          \n3. When they click Treat, show them a scary image.\n\nTo show the pictures,\
          \ use the showPictureFromTheInternet() method below.\n```\nprivate void\
          \ showPictureFromTheInternet(String imageUrl) {\n    try {\n        URL\
          \ url = new URL(imageUrl);\n        Icon icon = new ImageIcon(url);\n  \
          \      JLabel imageLabel = new JLabel(icon);\n        JFrame frame = new\
          \ JFrame();\n        frame.add(imageLabel);\n        frame.setVisible(true);\n\
          \        frame.pack();\n    } catch (MalformedURLException e) {\n      \
          \  e.printStackTrace();\n    }\n}\n```\n\n\n"
        title: 99 Extra
      - assignment: 99_extra
        dir: levels/Level1/Module4/src/_99_extra/_02_simon_says
        lesson: 99_extra
        level: Level1
        module: Module4
        oassignment: 02_simon_says
        opath: levels/Level1/Module4/src/_99_extra/_02_simon_says
        resources: []
        text: '# 99 Extra 02 Simon Says


          '
        title: 99 Extra
    _readme: '# Level1-Module4'
  _readme: '# Java Level 1



    * Module 0 methods, basic UI building

    * Module 1 constructors, encapsulation, objects, binary

    * Module 2 public/private, unit tests, finding errors

    * Module 3 static, inheritance, variable scope, "this"

    * Module 4 listeners and UI event handling'
Level2:
  Module0:
    arrays:
      _readme: '# Arrays


        '
      assignments:
      - assignment: arrays
        dir: levels/Level2/Module0/src/arrays
        lesson: arrays
        level: Level2
        module: Module0
        oassignment: arrays
        opath: levels/Level2/Module0/src/arrays
        resources: []
        text: '# Arrays


          '
        title: Arrays
    extra:
      _readme: '# Extra


        '
      assignments:
      - assignment: extra
        dir: levels/Level2/Module0/src/extra
        lesson: extra
        level: Level2
        module: Module0
        oassignment: extra
        opath: levels/Level2/Module0/src/extra
        resources: []
        text: '# Extra


          '
        title: Extra
  Module1:
    00_intro_to_array_lists:
      _readme: '# 00 Intro To Array Lists


        '
      assignments:
      - assignment: 00_intro_to_array_lists
        dir: levels/Level2/Module1/src/_00_intro_to_array_lists
        lesson: 00_intro_to_array_lists
        level: Level2
        module: Module1
        oassignment: 00_intro_to_array_lists
        opath: levels/Level2/Module1/src/_00_intro_to_array_lists
        resources: []
        text: '# 00 Intro To Array Lists


          '
        title: 00 Intro To Array Lists
    01_array_list_visualizer:
      _readme: '# 01 Array List Visualizer


        '
      assignments:
      - assignment: 01_array_list_visualizer
        dir: levels/Level2/Module1/src/_01_array_list_visualizer
        lesson: 01_array_list_visualizer
        level: Level2
        module: Module1
        oassignment: 01_array_list_visualizer
        opath: levels/Level2/Module1/src/_01_array_list_visualizer
        resources: []
        text: '# 01 Array List Visualizer


          '
        title: 01 Array List Visualizer
      - assignment: 01_array_list_visualizer
        dir: levels/Level2/Module1/src/_01_array_list_visualizer/data
        lesson: 01_array_list_visualizer
        level: Level2
        module: Module1
        oassignment: data
        opath: levels/Level2/Module1/src/_01_array_list_visualizer/data
        resources: []
        text: '# 01 Array List Visualizer Data


          '
        title: 01 Array List Visualizer
    02_array_list_guestbook:
      _readme: '# 02 Array List Guestbook


        '
      assignments:
      - assignment: 02_array_list_guestbook
        dir: levels/Level2/Module1/src/_02_array_list_guestbook
        lesson: 02_array_list_guestbook
        level: Level2
        module: Module1
        oassignment: 02_array_list_guestbook
        opath: levels/Level2/Module1/src/_02_array_list_guestbook
        resources: []
        text: '# 02 Array List Guestbook


          '
        title: 02 Array List Guestbook
  Module2:
    01_shapes_original:
      _readme: '# 01 Shapes Original


        '
      assignments:
      - assignment: 01_shapes_original
        dir: levels/Level2/Module2/src/_01_shapes_original
        lesson: 01_shapes_original
        level: Level2
        module: Module2
        oassignment: 01_shapes_original
        opath: levels/Level2/Module2/src/_01_shapes_original
        resources: []
        text: '# 01 Shapes Original


          '
        title: 01 Shapes Original
    02_shapes_inheritance:
      _readme: '# 02 Shapes Inheritance


        '
      assignments:
      - assignment: 02_shapes_inheritance
        dir: levels/Level2/Module2/src/_02_shapes_inheritance
        lesson: 02_shapes_inheritance
        level: Level2
        module: Module2
        oassignment: 02_shapes_inheritance
        opath: levels/Level2/Module2/src/_02_shapes_inheritance
        resources: []
        text: '# 02 Shapes Inheritance


          '
        title: 02 Shapes Inheritance
    03_animals_original:
      _readme: '# 03 Animals Original


        '
      assignments:
      - assignment: 03_animals_original
        dir: levels/Level2/Module2/src/_03_animals_original
        lesson: 03_animals_original
        level: Level2
        module: Module2
        oassignment: 03_animals_original
        opath: levels/Level2/Module2/src/_03_animals_original
        resources: []
        text: '# 03 Animals Original


          '
        title: 03 Animals Original
    04_animals_inheritance:
      _readme: '# 04 Animals Inheritance


        '
      assignments:
      - assignment: 04_animals_inheritance
        dir: levels/Level2/Module2/src/_04_animals_inheritance
        lesson: 04_animals_inheritance
        level: Level2
        module: Module2
        oassignment: 04_animals_inheritance
        opath: levels/Level2/Module2/src/_04_animals_inheritance
        resources: []
        text: '# 04 Animals Inheritance


          '
        title: 04 Animals Inheritance
    05_overriding:
      _readme: '# 05 Overriding


        '
      assignments:
      - assignment: 05_overriding
        dir: levels/Level2/Module2/src/_05_overriding
        lesson: 05_overriding
        level: Level2
        module: Module2
        oassignment: 05_overriding
        opath: levels/Level2/Module2/src/_05_overriding
        resources: []
        text: '# 05 Overriding


          '
        title: 05 Overriding
    06_overloading:
      _readme: '# 06 Overloading


        '
      assignments:
      - assignment: 06_overloading
        dir: levels/Level2/Module2/src/_06_overloading
        lesson: 06_overloading
        level: Level2
        module: Module2
        oassignment: 06_overloading
        opath: levels/Level2/Module2/src/_06_overloading
        resources: []
        text: '# 06 Overloading


          '
        title: 06 Overloading
    07_timers:
      _readme: '# 07 Timers


        '
      assignments:
      - assignment: 07_timers
        dir: levels/Level2/Module2/src/_07_timers
        lesson: 07_timers
        level: Level2
        module: Module2
        oassignment: 07_timers
        opath: levels/Level2/Module2/src/_07_timers
        resources: []
        text: '# 07 Timers


          '
        title: 07 Timers
    08_LeagueSnake:
      _readme: '


        ## League Snake - Recipe Overview


        <form action="https://classroom.github.com/a/W9Nkgfkh" id="moduleButtonForm"
        method="get">

        <button id="acceptModuleButton" type="submit">

        <span>

        Accept Module

        </span>

        </button>

        </form>


        ### Part 1



        #### Draw Head and Food


        * [Recipe](Snake.html)

        <img src="./images/SnakePart1.png" style="width: 100%"/>


        ### Part 2



        #### Move Head and Food


        * [Recipe](Snake2.html)

        <img src="./images/SnakePart1.png" style="width: 100%"/>


        ### Part 3



        #### Grow Tail and Reset Game


        * [Recipe](Snake3.html)





        '
      assignments:
      - assignment: 08_LeagueSnake
        dir: levels/Level2/Module2/src/_08_LeagueSnake
        lesson: 08_LeagueSnake
        level: Level2
        module: Module2
        oassignment: 08_LeagueSnake
        opath: levels/Level2/Module2/src/_08_LeagueSnake
        resources:
        - levels/Level2/Module2/src/_08_LeagueSnake/.web/SnakePart1.png
        - levels/Level2/Module2/src/_08_LeagueSnake/.web/SnakePart3.png
        text: '


          ## League Snake - Recipe Overview


          <form action="https://classroom.github.com/a/W9Nkgfkh" id="moduleButtonForm"
          method="get">

          <button id="acceptModuleButton" type="submit">

          <span>

          Accept Module

          </span>

          </button>

          </form>


          ### Part 1



          #### Draw Head and Food


          * [Recipe](Snake.html)

          <img src="./images/SnakePart1.png" style="width: 100%"/>


          ### Part 2



          #### Move Head and Food


          * [Recipe](Snake2.html)

          <img src="./images/SnakePart1.png" style="width: 100%"/>


          ### Part 3



          #### Grow Tail and Reset Game


          * [Recipe](Snake3.html)





          '
        title: 08 Leaguesnake
    _readme: '# Level2-Module2

      LeagueSnake

      '
  _readme: '# Level2


    '
Level3:
  Module0:
    00_Intro_To_Arrays:
      _readme: '# 00 Intro To Arrays


        '
      assignments:
      - assignment: 00_Intro_To_Arrays
        dir: levels/Level3/Module0/src/_00_Intro_To_Arrays
        lesson: 00_Intro_To_Arrays
        level: Level3
        module: Module0
        oassignment: 00_Intro_To_Arrays
        opath: levels/Level3/Module0/src/_00_Intro_To_Arrays
        resources: []
        text: '# 00 Intro To Arrays


          '
        title: 00 Intro To Arrays
    01_Simple_Array_Algorithms:
      _readme: '


        # JUnit Tests


        When you have written a new program, you need to test if it is working properly.
        Also, if you need to make changes to an existing program, you need to make
        sure you haven''t broken anything that worked before.

        When you develop new code, you sometimes add print statements to check what
        is happening, but after you have done that, you need to go back and remove
        the print statements and you might break something in the process. So how
        can you test a program without changing its code?

        JUnit provides us with a framework to test code "from the outside".

        For example, The code below runs the static method add() on the Algorithms
        class. This test is not part of the Algorithms class, but an external testing
        class, and checks that when given the numbers 3 and 1, the add method returns
        the number 4.

        @Test

        public void testAdd() {

        assertEquals(4, Algorithms.add(3,1));

        }

        If a programmer later changes other parts of the Algorithms class for any
        reason, they can re-run this test to see if the add() method still works correctly.

        You can use a variety of assertions that allow the program to test for different
        conditions. In the above example, the code is testing for the equals condition.  Ask
        your teacher, or search the Internet for a complete overview of the JUnit
        class and its capabilities.



        '
      assignments:
      - assignment: 01_Simple_Array_Algorithms
        dir: levels/Level3/Module0/src/_01_Simple_Array_Algorithms
        lesson: 01_Simple_Array_Algorithms
        level: Level3
        module: Module0
        oassignment: 01_Simple_Array_Algorithms
        opath: levels/Level3/Module0/src/_01_Simple_Array_Algorithms
        resources: []
        text: '


          # JUnit Tests


          When you have written a new program, you need to test if it is working properly.
          Also, if you need to make changes to an existing program, you need to make
          sure you haven''t broken anything that worked before.

          When you develop new code, you sometimes add print statements to check what
          is happening, but after you have done that, you need to go back and remove
          the print statements and you might break something in the process. So how
          can you test a program without changing its code?

          JUnit provides us with a framework to test code "from the outside".

          For example, The code below runs the static method add() on the Algorithms
          class. This test is not part of the Algorithms class, but an external testing
          class, and checks that when given the numbers 3 and 1, the add method returns
          the number 4.

          @Test

          public void testAdd() {

          assertEquals(4, Algorithms.add(3,1));

          }

          If a programmer later changes other parts of the Algorithms class for any
          reason, they can re-run this test to see if the add() method still works
          correctly.

          You can use a variety of assertions that allow the program to test for different
          conditions. In the above example, the code is testing for the equals condition.  Ask
          your teacher, or search the Internet for a complete overview of the JUnit
          class and its capabilities.



          '
        title: 01 Simple Array Algorithms
    02_Firework_Display:
      _readme: '# 02 Firework Display


        '
      assignments:
      - assignment: 02_Firework_Display
        dir: levels/Level3/Module0/src/_02_Firework_Display
        lesson: 02_Firework_Display
        level: Level3
        module: Module0
        oassignment: 02_Firework_Display
        opath: levels/Level3/Module0/src/_02_Firework_Display
        resources: []
        text: '# 02 Firework Display


          '
        title: 02 Firework Display
    03_Intro_to_2D_Arrays:
      _readme: '# 03 Intro To 2D Arrays


        '
      assignments:
      - assignment: 03_Intro_to_2D_Arrays
        dir: levels/Level3/Module0/src/_03_Intro_to_2D_Arrays
        lesson: 03_Intro_to_2D_Arrays
        level: Level3
        module: Module0
        oassignment: 03_Intro_to_2D_Arrays
        opath: levels/Level3/Module0/src/_03_Intro_to_2D_Arrays
        resources: []
        text: '# 03 Intro To 2D Arrays


          '
        title: 03 Intro To 2D Arrays
    04_Crazy_Digital_Painting:
      _readme: '# 04 Crazy Digital Painting


        '
      assignments:
      - assignment: 04_Crazy_Digital_Painting
        dir: levels/Level3/Module0/src/_04_Crazy_Digital_Painting
        lesson: 04_Crazy_Digital_Painting
        level: Level3
        module: Module0
        oassignment: 04_Crazy_Digital_Painting
        opath: levels/Level3/Module0/src/_04_Crazy_Digital_Painting
        resources: []
        text: '# 04 Crazy Digital Painting


          '
        title: 04 Crazy Digital Painting
    05_Pixel_Art:
      _readme: '# 05 Pixel Art


        '
      assignments:
      - assignment: 05_Pixel_Art
        dir: levels/Level3/Module0/src/_05_Pixel_Art
        lesson: 05_Pixel_Art
        level: Level3
        module: Module0
        oassignment: 05_Pixel_Art
        opath: levels/Level3/Module0/src/_05_Pixel_Art
        resources: []
        text: '# 05 Pixel Art


          '
        title: 05 Pixel Art
    06_Conways_Game_of_Life:
      _readme: '# 06 Conways Game Of Life


        '
      assignments:
      - assignment: 06_Conways_Game_of_Life
        dir: levels/Level3/Module0/src/_06_Conways_Game_of_Life
        lesson: 06_Conways_Game_of_Life
        level: Level3
        module: Module0
        oassignment: 06_Conways_Game_of_Life
        opath: levels/Level3/Module0/src/_06_Conways_Game_of_Life
        resources: []
        text: '# 06 Conways Game Of Life


          '
        title: 06 Conways Game Of Life
    07_The_Wrong_Way_Cow:
      _readme: '# 07 The Wrong Way Cow


        '
      assignments:
      - assignment: 07_The_Wrong_Way_Cow
        dir: levels/Level3/Module0/src/_07_The_Wrong_Way_Cow
        lesson: 07_The_Wrong_Way_Cow
        level: Level3
        module: Module0
        oassignment: 07_The_Wrong_Way_Cow
        opath: levels/Level3/Module0/src/_07_The_Wrong_Way_Cow
        resources: []
        text: '# 07 The Wrong Way Cow


          '
        title: 07 The Wrong Way Cow
    _readme: 'Arrays

      '
  Module1:
    00_Intro_To_ArrayLists:
      _readme: "\n\n# Array List\n\nVariables are used to hold a single value. For\
        \ example:\nint age = 12;\nString name = \u201CSarah\u201D;\nHowever, what\
        \ if a program needed a list of names? We don't want to declare multiple variables\
        \ with meaningless names like name1, name2, name3, etc.\nArrays allow us to\
        \ store multiple values of the same type. E.g.\nString[] names = {\"Sarah\"\
        , \"Joe\",\"Ali\", \"Jose\"};\nString[] moreNames = new String[4];\nUnfortunately,\
        \ we need to know exactly how many elements we are going to get before we\
        \ can declare the array, which limits their use in our programs.\n\nThis is\
        \ where ArrayList comes in handy.\n\nArrayLists grow and shrink according\
        \ to how many elements are currently stored in them, i.e. they are \"dynamic\"\
        . In addition, you can add a mixture of object types in a single ArrayList.\n\
        ArrayList namesList = new ArrayList();\nnamesList.add(\"Sarah\");\nnamesList.add(10);\n\
        namesList.add(3.14);\nHowever, if you want to limit an ArrayList to a specific\
        \ type of object, you can declare its type when you create it:\nArrayList<String>\
        \ namesList = new ArrayList();\nnamesList.add(\"Sarah\");\nThings to find\
        \ out before you finish this module:\nHow to create and inititialize an ArrayList\n\
        How to add and remove items from an ArrayList\nHow to loop through all the\
        \ elements of an ArrayList (advantages and disadvantages of different types\
        \ of loop)\nAdvantages and disadvantages of ArrayLists\n\n## Sample Program\n\
        \nArrayListDemo\n\n## Student Recipes\n\nIntroToArrayList\nGuestBook\n\n\n"
      assignments:
      - assignment: 00_Intro_To_ArrayLists
        dir: levels/Level3/Module1/src/_00_Intro_To_ArrayLists
        lesson: 00_Intro_To_ArrayLists
        level: Level3
        module: Module1
        oassignment: 00_Intro_To_ArrayLists
        opath: levels/Level3/Module1/src/_00_Intro_To_ArrayLists
        resources:
        - levels/Level3/Module1/src/_00_Intro_To_ArrayLists/.web/GuestBookButtons.png
        - levels/Level3/Module1/src/_00_Intro_To_ArrayLists/.web/ViewNamesDialog.png
        - levels/Level3/Module1/src/_00_Intro_To_ArrayLists/.web/AddNameDialog.png
        text: "\n\n# Array List\n\nVariables are used to hold a single value. For\
          \ example:\nint age = 12;\nString name = \u201CSarah\u201D;\nHowever, what\
          \ if a program needed a list of names? We don't want to declare multiple\
          \ variables with meaningless names like name1, name2, name3, etc.\nArrays\
          \ allow us to store multiple values of the same type. E.g.\nString[] names\
          \ = {\"Sarah\", \"Joe\",\"Ali\", \"Jose\"};\nString[] moreNames = new String[4];\n\
          Unfortunately, we need to know exactly how many elements we are going to\
          \ get before we can declare the array, which limits their use in our programs.\n\
          \nThis is where ArrayList comes in handy.\n\nArrayLists grow and shrink\
          \ according to how many elements are currently stored in them, i.e. they\
          \ are \"dynamic\". In addition, you can add a mixture of object types in\
          \ a single ArrayList.\nArrayList namesList = new ArrayList();\nnamesList.add(\"\
          Sarah\");\nnamesList.add(10);\nnamesList.add(3.14);\nHowever, if you want\
          \ to limit an ArrayList to a specific type of object, you can declare its\
          \ type when you create it:\nArrayList<String> namesList = new ArrayList();\n\
          namesList.add(\"Sarah\");\nThings to find out before you finish this module:\n\
          How to create and inititialize an ArrayList\nHow to add and remove items\
          \ from an ArrayList\nHow to loop through all the elements of an ArrayList\
          \ (advantages and disadvantages of different types of loop)\nAdvantages\
          \ and disadvantages of ArrayLists\n\n## Sample Program\n\nArrayListDemo\n\
          \n## Student Recipes\n\nIntroToArrayList\nGuestBook\n\n\n"
        title: 00 Intro To Arraylists
    01_MurderOfCrows:
      _readme: '# 01 Murderofcrows


        '
      assignments:
      - assignment: 01_MurderOfCrows
        dir: levels/Level3/Module1/src/_01_MurderOfCrows
        lesson: 01_MurderOfCrows
        level: Level3
        module: Module1
        oassignment: 01_MurderOfCrows
        opath: levels/Level3/Module1/src/_01_MurderOfCrows
        resources: []
        text: '# 01 Murderofcrows


          '
        title: 01 Murderofcrows
    02_LongChipCompetition:
      _readme: '# 02 Longchipcompetition


        '
      assignments:
      - assignment: 02_LongChipCompetition
        dir: levels/Level3/Module1/src/_02_LongChipCompetition
        lesson: 02_LongChipCompetition
        level: Level3
        module: Module1
        oassignment: 02_LongChipCompetition
        opath: levels/Level3/Module1/src/_02_LongChipCompetition
        resources: []
        text: '# 02 Longchipcompetition


          '
        title: 02 Longchipcompetition
    03_RemovingStuffFromArrayLists:
      _readme: '# 03 Removingstufffromarraylists


        '
      assignments:
      - assignment: 03_RemovingStuffFromArrayLists
        dir: levels/Level3/Module1/src/_03_RemovingStuffFromArrayLists
        lesson: 03_RemovingStuffFromArrayLists
        level: Level3
        module: Module1
        oassignment: 03_RemovingStuffFromArrayLists
        opath: levels/Level3/Module1/src/_03_RemovingStuffFromArrayLists
        resources: []
        text: '# 03 Removingstufffromarraylists


          '
        title: 03 Removingstufffromarraylists
    04_Memory_Match:
      _readme: '# 04 Memory Match


        '
      assignments:
      - assignment: 04_Memory_Match
        dir: levels/Level3/Module1/src/_04_Memory_Match
        lesson: 04_Memory_Match
        level: Level3
        module: Module1
        oassignment: 04_Memory_Match
        opath: levels/Level3/Module1/src/_04_Memory_Match
        resources: []
        text: '# 04 Memory Match


          '
        title: 04 Memory Match
    05_Retro_Sun:
      _readme: "\n\n# Retro Sun (Processing)\n\n\n### Part 1: Drawing the Sun\n\n\n\
        <img alt=\"\" src=\"./images/1_sun.png\" style=\"width: 400px; height: 330px;\"\
        />\nOpen the starter code in Processing.\nDraw and fill a solid color ellipse\
        \ to be the sun.\n\n### Part 2: Drawing a color gradient on the sun\n\n\n\
        <img alt=\"\" src=\"./images/2_gradient.png\" style=\"width: 400px; height:\
        \ 180px;\"/>\nChange the sun-colored pixels in your sketch make the sun have\
        \ gradually different colors from the top to bottom.\n\nUse the interpolateColor()\
        \ method to find which color to change the pixel.\n```\n\n// Input variable\
        \ 'step' is a value from 0.0 to 1.0, where\n// 0.0 is the top of the sun and\
        \ 1.0 is the bottom\ninterpolateColor(color[] arr, float step)\n```\n\n###\
        \ Part 3: Drawing the missing sections at the bottom of the sun\n\n\n<img\
        \ alt=\"\" src=\"./images/3_missing_sun_section.png\" style=\"width: 400px;\
        \ height: 180px;\"/>\nThe missing parts of the sun are created by drawing\
        \ rectangles over the sun with the same color as the background.\n\n### Part\
        \ 4: Moving the missing sun sections\n\n\n<img alt=\"\" src=\"./images/4b_resizing_section.gif\"\
        \ style=\"width: 400px; height: 330px;\"/>\nTo move a section upwards each\
        \ rectangle's y value needs to decrease.\nTo make the section get smaller,\
        \ its height value needs to also decrease.\n\n### Part 5: Managing the missing\
        \ sun sections\n\n\n<img alt=\"\" src=\"./images/5_multiple_sections.gif\"\
        \ style=\"width: 400px; height: 225px;\"/>\nUsing a List to manage moving\
        \ multiple missing sun sections\n\n### Part 6: Adding reflections, stars,\
        \ and other extras\n\n\n<img alt=\"\" src=\"./images/6_retro_sun_extras.gif\"\
        \ style=\"width: 400px; height: 225px;\"/>\nIf you want to make your retro\
        \ sun look more unique, try adding reflections and stars. You may use the\
        \ example classes below.\n```\n\nclass Star {\n  int x;\n  int y;\n  color\
        \ starColor;\n  float startAlpha;\n  float alpha;\n  float diameter;\n\n \
        \ Star(int x, int y, color col) {\n    this.x = x;\n    this.y = y;\n    starColor\
        \ = col;\n    this.diameter = random(0.1, 3);\n    this.startAlpha = random(1,\
        \ 200);\n    this.alpha = startAlpha;\n  }\n  \n  void setAlpha(int alpha){\n\
        \    this.alpha = constrain(alpha, startAlpha, 255);\n  }\n\n  void draw()\
        \ {\n    noStroke();\n    fill(starColor, alpha);\n    float blink = random(0,\
        \ 0.8);\n    ellipse(x, y, diameter + blink, diameter + blink);\n  }\n```\n\
        ```\n\nclass Reflection {\n/*\n  // HSB colors\n  color[] barColors = {\n\
        \    color(285, 96.6, 23.1), \n    color(312, 100, 42.7), \n    color(340,\
        \ 66.9, 60.4), \n    color(11, 60.8, 62), \n    color(340, 66.9, 60.4), \n\
        \    color(312, 100, 42.7), \n    color(285, 96.6, 23.1)\n  };\n*/\n  // RGB\
        \ colors\n  color[] barColors = {\n    color(45, 2, 59), \n    color(109,\
        \ 0, 88), \n    color(154, 51, 86), \n    color(158, 79, 62), \n    color(154,\
        \ 51, 86), \n    color(109, 0, 88), \n    color(45, 2, 59)\n  };\n\n  int\
        \ sunRadius;\n  int numReflectionBars;\n  int topX;\n  int topY;\n  int topWidth;\n\
        \  int bottomY;\n  int maxHeight;\n  float speed;\n  ArrayList lowerBars;\n\
        \  \n  Reflection(int sunRadius, int numBars, int topX, int topY, float speed){\n\
        \    this.sunRadius = sunRadius;\n    this.topX = topX;\n    this.topY = topY;\n\
        \    this.speed = speed;\n\n    initialize(numBars);\n  }\n  \n  void initialize(int\
        \ numBars){\n    this.numReflectionBars = numBars;\n    \n    topWidth = 2\
        \ * (sunRadius + sunRadius/3);\n    maxHeight = 10;\n    bottomY = topY +\
        \ (numBars * 2 * maxHeight);\n    lowerBars = new ArrayList();\n    \n   \
        \ // Setup bottom relection bars\n    int x = topX;\n    int y = topY;\n \
        \   int w = topWidth;\n    int h = maxHeight;\n    for ( int i = 0; i < numReflectionBars;\
        \ i++ ) {   \n      y += (bottomY - topY) / numBars;\n      x += sunRadius\
        \ / 16;\n      w -= 2 * (sunRadius / 16);\n\n      Rectangle r = new Rectangle(x,\
        \ y, w, h);\n      lowerBars.add(r);\n    }\n  }\n  \n  void draw(){\n   \
        \ strokeWeight(1);\n    \n    for ( Rectangle bar : lowerBars ) {\n      for\
        \ ( int i = (int)bar.x; i < bar.x + bar.w; i++ ) {\n        float alphaMax\
        \ = -255 - (bar.y - topY);\n        float alphaMin =  255 + (bar.y - topY);\n\
        \        float alpha = map(i, bar.x, bar.x + bar.w, alphaMin, alphaMax);\n\
        \        float step = map(i, bar.x, bar.x + bar.w, 0, 1);\n        color lc\
        \ = interpolateColor(barColors, step);\n    \n        stroke(lc, 255 - abs(alpha));\n\
        \        line(i, bar.y, i, bar.y + bar.h);\n      }\n      \n      bar.y +=\
        \ speed;\n      bar.x += speed;\n      bar.w -= 2 * speed;\n\n      if( bar.y\
        \ > bottomY ) {\n        // Bar at bottom, reset to top\n        \n      \
        \  bar.x = topX;\n        bar.y = topY + maxHeight;\n        bar.w = topWidth;\n\
        \        bar.h = 1;\n      } else if( bar.y > bottomY - maxHeight ) {\n  \
        \      // Bar near bottom\n        \n        bar.h -= speed;\n      } else\
        \ if( bar.h < maxHeight ) {\n        // Bar height just reset and at top\n\
        \        \n        bar.y -= speed;\n        bar.h += speed;\n      }\n   \
        \ }\n  }\n}\n```\n\n\n\n\n\n\n\n\n"
      assignments:
      - assignment: 05_Retro_Sun
        dir: levels/Level3/Module1/src/_05_Retro_Sun
        lesson: 05_Retro_Sun
        level: Level3
        module: Module1
        oassignment: 05_Retro_Sun
        opath: levels/Level3/Module1/src/_05_Retro_Sun
        resources:
        - levels/Level3/Module1/src/_05_Retro_Sun/.web/2_gradient.png
        - levels/Level3/Module1/src/_05_Retro_Sun/.web/retro_sun.gif
        - levels/Level3/Module1/src/_05_Retro_Sun/.web/3_missing_sun_section.png
        - levels/Level3/Module1/src/_05_Retro_Sun/.web/6_retro_sun_extras.gif
        - levels/Level3/Module1/src/_05_Retro_Sun/.web/5_multiple_sections.gif
        - levels/Level3/Module1/src/_05_Retro_Sun/.web/4b_resizing_section.gif
        - levels/Level3/Module1/src/_05_Retro_Sun/.web/1_sun.png
        text: "\n\n# Retro Sun (Processing)\n\n\n### Part 1: Drawing the Sun\n\n\n\
          <img alt=\"\" src=\"./images/1_sun.png\" style=\"width: 400px; height: 330px;\"\
          />\nOpen the starter code in Processing.\nDraw and fill a solid color ellipse\
          \ to be the sun.\n\n### Part 2: Drawing a color gradient on the sun\n\n\n\
          <img alt=\"\" src=\"./images/2_gradient.png\" style=\"width: 400px; height:\
          \ 180px;\"/>\nChange the sun-colored pixels in your sketch make the sun\
          \ have gradually different colors from the top to bottom.\n\nUse the interpolateColor()\
          \ method to find which color to change the pixel.\n```\n\n// Input variable\
          \ 'step' is a value from 0.0 to 1.0, where\n// 0.0 is the top of the sun\
          \ and 1.0 is the bottom\ninterpolateColor(color[] arr, float step)\n```\n\
          \n### Part 3: Drawing the missing sections at the bottom of the sun\n\n\n\
          <img alt=\"\" src=\"./images/3_missing_sun_section.png\" style=\"width:\
          \ 400px; height: 180px;\"/>\nThe missing parts of the sun are created by\
          \ drawing rectangles over the sun with the same color as the background.\n\
          \n### Part 4: Moving the missing sun sections\n\n\n<img alt=\"\" src=\"\
          ./images/4b_resizing_section.gif\" style=\"width: 400px; height: 330px;\"\
          />\nTo move a section upwards each rectangle's y value needs to decrease.\n\
          To make the section get smaller, its height value needs to also decrease.\n\
          \n### Part 5: Managing the missing sun sections\n\n\n<img alt=\"\" src=\"\
          ./images/5_multiple_sections.gif\" style=\"width: 400px; height: 225px;\"\
          />\nUsing a List to manage moving multiple missing sun sections\n\n### Part\
          \ 6: Adding reflections, stars, and other extras\n\n\n<img alt=\"\" src=\"\
          ./images/6_retro_sun_extras.gif\" style=\"width: 400px; height: 225px;\"\
          />\nIf you want to make your retro sun look more unique, try adding reflections\
          \ and stars. You may use the example classes below.\n```\n\nclass Star {\n\
          \  int x;\n  int y;\n  color starColor;\n  float startAlpha;\n  float alpha;\n\
          \  float diameter;\n\n  Star(int x, int y, color col) {\n    this.x = x;\n\
          \    this.y = y;\n    starColor = col;\n    this.diameter = random(0.1,\
          \ 3);\n    this.startAlpha = random(1, 200);\n    this.alpha = startAlpha;\n\
          \  }\n  \n  void setAlpha(int alpha){\n    this.alpha = constrain(alpha,\
          \ startAlpha, 255);\n  }\n\n  void draw() {\n    noStroke();\n    fill(starColor,\
          \ alpha);\n    float blink = random(0, 0.8);\n    ellipse(x, y, diameter\
          \ + blink, diameter + blink);\n  }\n```\n```\n\nclass Reflection {\n/*\n\
          \  // HSB colors\n  color[] barColors = {\n    color(285, 96.6, 23.1), \n\
          \    color(312, 100, 42.7), \n    color(340, 66.9, 60.4), \n    color(11,\
          \ 60.8, 62), \n    color(340, 66.9, 60.4), \n    color(312, 100, 42.7),\
          \ \n    color(285, 96.6, 23.1)\n  };\n*/\n  // RGB colors\n  color[] barColors\
          \ = {\n    color(45, 2, 59), \n    color(109, 0, 88), \n    color(154, 51,\
          \ 86), \n    color(158, 79, 62), \n    color(154, 51, 86), \n    color(109,\
          \ 0, 88), \n    color(45, 2, 59)\n  };\n\n  int sunRadius;\n  int numReflectionBars;\n\
          \  int topX;\n  int topY;\n  int topWidth;\n  int bottomY;\n  int maxHeight;\n\
          \  float speed;\n  ArrayList lowerBars;\n  \n  Reflection(int sunRadius,\
          \ int numBars, int topX, int topY, float speed){\n    this.sunRadius = sunRadius;\n\
          \    this.topX = topX;\n    this.topY = topY;\n    this.speed = speed;\n\
          \n    initialize(numBars);\n  }\n  \n  void initialize(int numBars){\n \
          \   this.numReflectionBars = numBars;\n    \n    topWidth = 2 * (sunRadius\
          \ + sunRadius/3);\n    maxHeight = 10;\n    bottomY = topY + (numBars *\
          \ 2 * maxHeight);\n    lowerBars = new ArrayList();\n    \n    // Setup\
          \ bottom relection bars\n    int x = topX;\n    int y = topY;\n    int w\
          \ = topWidth;\n    int h = maxHeight;\n    for ( int i = 0; i < numReflectionBars;\
          \ i++ ) {   \n      y += (bottomY - topY) / numBars;\n      x += sunRadius\
          \ / 16;\n      w -= 2 * (sunRadius / 16);\n\n      Rectangle r = new Rectangle(x,\
          \ y, w, h);\n      lowerBars.add(r);\n    }\n  }\n  \n  void draw(){\n \
          \   strokeWeight(1);\n    \n    for ( Rectangle bar : lowerBars ) {\n  \
          \    for ( int i = (int)bar.x; i < bar.x + bar.w; i++ ) {\n        float\
          \ alphaMax = -255 - (bar.y - topY);\n        float alphaMin =  255 + (bar.y\
          \ - topY);\n        float alpha = map(i, bar.x, bar.x + bar.w, alphaMin,\
          \ alphaMax);\n        float step = map(i, bar.x, bar.x + bar.w, 0, 1);\n\
          \        color lc = interpolateColor(barColors, step);\n    \n        stroke(lc,\
          \ 255 - abs(alpha));\n        line(i, bar.y, i, bar.y + bar.h);\n      }\n\
          \      \n      bar.y += speed;\n      bar.x += speed;\n      bar.w -= 2\
          \ * speed;\n\n      if( bar.y > bottomY ) {\n        // Bar at bottom, reset\
          \ to top\n        \n        bar.x = topX;\n        bar.y = topY + maxHeight;\n\
          \        bar.w = topWidth;\n        bar.h = 1;\n      } else if( bar.y >\
          \ bottomY - maxHeight ) {\n        // Bar near bottom\n        \n      \
          \  bar.h -= speed;\n      } else if( bar.h < maxHeight ) {\n        // Bar\
          \ height just reset and at top\n        \n        bar.y -= speed;\n    \
          \    bar.h += speed;\n      }\n    }\n  }\n}\n```\n\n\n\n\n\n\n\n\n"
        title: 05 Retro Sun
    06_Intro_To_Hash_Maps:
      _readme: '# 06 Intro To Hash Maps


        '
      assignments:
      - assignment: 06_Intro_To_Hash_Maps
        dir: levels/Level3/Module1/src/_06_Intro_To_Hash_Maps
        lesson: 06_Intro_To_Hash_Maps
        level: Level3
        module: Module1
        oassignment: 06_Intro_To_Hash_Maps
        opath: levels/Level3/Module1/src/_06_Intro_To_Hash_Maps
        resources: []
        text: '# 06 Intro To Hash Maps


          '
        title: 06 Intro To Hash Maps
    07_Meeting_Scheduler:
      _readme: '# 07 Meeting Scheduler


        '
      assignments:
      - assignment: 07_Meeting_Scheduler
        dir: levels/Level3/Module1/src/_07_Meeting_Scheduler
        lesson: 07_Meeting_Scheduler
        level: Level3
        module: Module1
        oassignment: 07_Meeting_Scheduler
        opath: levels/Level3/Module1/src/_07_Meeting_Scheduler
        resources: []
        text: '# 07 Meeting Scheduler


          '
        title: 07 Meeting Scheduler
    08_California_Weather:
      _readme: '# 08 California Weather


        '
      assignments:
      - assignment: 08_California_Weather
        dir: levels/Level3/Module1/src/_08_California_Weather
        lesson: 08_California_Weather
        level: Level3
        module: Module1
        oassignment: 08_California_Weather
        opath: levels/Level3/Module1/src/_08_California_Weather
        resources: []
        text: '# 08 California Weather


          '
        title: 08 California Weather
    09_World_Clocks:
      _readme: '# 09 World Clocks


        '
      assignments:
      - assignment: 09_World_Clocks
        dir: levels/Level3/Module1/src/_09_World_Clocks
        lesson: 09_World_Clocks
        level: Level3
        module: Module1
        oassignment: 09_World_Clocks
        opath: levels/Level3/Module1/src/_09_World_Clocks
        resources: []
        text: '# 09 World Clocks


          '
        title: 09 World Clocks
  Module2:
    00_Intro_to_Sorting_Algorithms:
      _readme: '# 00 Intro To Sorting Algorithms


        '
      assignments:
      - assignment: 00_Intro_to_Sorting_Algorithms
        dir: levels/Level3/Module2/src/_00_Intro_to_Sorting_Algorithms
        lesson: 00_Intro_to_Sorting_Algorithms
        level: Level3
        module: Module2
        oassignment: 00_Intro_to_Sorting_Algorithms
        opath: levels/Level3/Module2/src/_00_Intro_to_Sorting_Algorithms
        resources: []
        text: '# 00 Intro To Sorting Algorithms


          '
        title: 00 Intro To Sorting Algorithms
    01_Sorting_Algorithms:
      _readme: '# 01 Sorting Algorithms


        '
      assignments:
      - assignment: 01_Sorting_Algorithms
        dir: levels/Level3/Module2/src/_01_Sorting_Algorithms
        lesson: 01_Sorting_Algorithms
        level: Level3
        module: Module2
        oassignment: 01_Sorting_Algorithms
        opath: levels/Level3/Module2/src/_01_Sorting_Algorithms
        resources: []
        text: '# 01 Sorting Algorithms


          '
        title: 01 Sorting Algorithms
    02_Intro_To_Searching_Algorithms:
      _readme: '# 02 Intro To Searching Algorithms


        '
      assignments:
      - assignment: 02_Intro_To_Searching_Algorithms
        dir: levels/Level3/Module2/src/_02_Intro_To_Searching_Algorithms
        lesson: 02_Intro_To_Searching_Algorithms
        level: Level3
        module: Module2
        oassignment: 02_Intro_To_Searching_Algorithms
        opath: levels/Level3/Module2/src/_02_Intro_To_Searching_Algorithms
        resources: []
        text: '# 02 Intro To Searching Algorithms


          '
        title: 02 Intro To Searching Algorithms
    03_More_Algorithms:
      _readme: '# 03 More Algorithms


        '
      assignments:
      - assignment: 03_More_Algorithms
        dir: levels/Level3/Module2/src/_03_More_Algorithms
        lesson: 03_More_Algorithms
        level: Level3
        module: Module2
        oassignment: 03_More_Algorithms
        opath: levels/Level3/Module2/src/_03_More_Algorithms
        resources: []
        text: '# 03 More Algorithms


          '
        title: 03 More Algorithms
    04_JavaClassSearchAndSort:
      _readme: '# 04 Javaclasssearchandsort


        '
      assignments:
      - assignment: 04_JavaClassSearchAndSort
        dir: levels/Level3/Module2/src/_04_JavaClassSearchAndSort
        lesson: 04_JavaClassSearchAndSort
        level: Level3
        module: Module2
        oassignment: 04_JavaClassSearchAndSort
        opath: levels/Level3/Module2/src/_04_JavaClassSearchAndSort
        resources: []
        text: '# 04 Javaclasssearchandsort


          '
        title: 04 Javaclasssearchandsort
  Module3:
    00_Intro_To_String_Methods:
      _readme: '# 00 Intro To String Methods


        '
      assignments:
      - assignment: 00_Intro_To_String_Methods
        dir: levels/Level3/Module3/src/_00_Intro_To_String_Methods
        lesson: 00_Intro_To_String_Methods
        level: Level3
        module: Module3
        oassignment: 00_Intro_To_String_Methods
        opath: levels/Level3/Module3/src/_00_Intro_To_String_Methods
        resources: []
        text: '# 00 Intro To String Methods


          '
        title: 00 Intro To String Methods
    01_StringBuilder:
      _readme: '# 01 Stringbuilder


        '
      assignments:
      - assignment: 01_StringBuilder
        dir: levels/Level3/Module3/src/_01_StringBuilder
        lesson: 01_StringBuilder
        level: Level3
        module: Module3
        oassignment: 01_StringBuilder
        opath: levels/Level3/Module3/src/_01_StringBuilder
        resources: []
        text: '# 01 Stringbuilder


          '
        title: 01 Stringbuilder
    02_The_Wave:
      _readme: '# 02 The Wave


        '
      assignments:
      - assignment: 02_The_Wave
        dir: levels/Level3/Module3/src/_02_The_Wave
        lesson: 02_The_Wave
        level: Level3
        module: Module3
        oassignment: 02_The_Wave
        opath: levels/Level3/Module3/src/_02_The_Wave
        resources: []
        text: '# 02 The Wave


          '
        title: 02 The Wave
    03_Intro_To_Regular_Expressions:
      _readme: '# 03 Intro To Regular Expressions


        '
      assignments:
      - assignment: 03_Intro_To_Regular_Expressions
        dir: levels/Level3/Module3/src/_03_Intro_To_Regular_Expressions
        lesson: 03_Intro_To_Regular_Expressions
        level: Level3
        module: Module3
        oassignment: 03_Intro_To_Regular_Expressions
        opath: levels/Level3/Module3/src/_03_Intro_To_Regular_Expressions
        resources: []
        text: '# 03 Intro To Regular Expressions


          '
        title: 03 Intro To Regular Expressions
  Module4:
    00_IntroToStacks:
      _readme: '# 00 Introtostacks


        '
      assignments:
      - assignment: 00_IntroToStacks
        dir: levels/Level3/Module4/src/_00_IntroToStacks
        lesson: 00_IntroToStacks
        level: Level3
        module: Module4
        oassignment: 00_IntroToStacks
        opath: levels/Level3/Module4/src/_00_IntroToStacks
        resources: []
        text: '# 00 Introtostacks


          '
        title: 00 Introtostacks
    01_TestMatchingBrackets:
      _readme: '# 01 Testmatchingbrackets


        '
      assignments:
      - assignment: 01_TestMatchingBrackets
        dir: levels/Level3/Module4/src/_01_TestMatchingBrackets
        lesson: 01_TestMatchingBrackets
        level: Level3
        module: Module4
        oassignment: 01_TestMatchingBrackets
        opath: levels/Level3/Module4/src/_01_TestMatchingBrackets
        resources: []
        text: '# 01 Testmatchingbrackets


          '
        title: 01 Testmatchingbrackets
    02_IntroToQueues:
      _readme: '# 02 Introtoqueues


        '
      assignments:
      - assignment: 02_IntroToQueues
        dir: levels/Level3/Module4/src/_02_IntroToQueues
        lesson: 02_IntroToQueues
        level: Level3
        module: Module4
        oassignment: 02_IntroToQueues
        opath: levels/Level3/Module4/src/_02_IntroToQueues
        resources: []
        text: '# 02 Introtoqueues


          '
        title: 02 Introtoqueues
    03_Hangman:
      _readme: "<html>\n<font color=\"orange\">\n\n## You're going to create a program\
        \ that plays Hang Man!\n\n</font>\n<center>\nRun hangman.jar to play the finished\
        \ product.\n</center>\n```\n\nStep 1: When the program starts, it will ask\
        \ the user for a number (up to the total words in the file). Then the \n \
        \       program will read that many words from the \"dictionary.txt\" file\
        \ and push them to a Stack. \n        Use the readRandomLineFromFile method\
        \ in the Utilities class. The words should be selected randomly so \n    \
        \    not every game is played with the same set of words. You can use the\
        \ Stack's contains() method to make sure\n        there are no duplicate words.\n\
        \nStep 2: Pop the word off the top of the stack and use a JLabel to display\
        \ a blank line for all the characters in the word. \n        Collect key inputs\
        \ from the user. If the user guesses a letter, fill in the blank space. Otherwise,\
        \ take off a life.\n\n\t\t\nStep 3: When a word has been solved, pop the next\
        \ one off the stack and start a new round. It is up to you if you want to\
        \ \n        reset the lives.\n\nStep 4: If they run out of lives, give them\
        \ a game over message.\n\nStep 5: Don't end the program on game over. Ask\
        \ the user if they would like to play again and run the game again with new\
        \ \n\t    words if they choose yes.\n```\n</html>\n"
      assignments:
      - assignment: 03_Hangman
        dir: levels/Level3/Module4/src/_03_Hangman
        lesson: 03_Hangman
        level: Level3
        module: Module4
        oassignment: 03_Hangman
        opath: levels/Level3/Module4/src/_03_Hangman
        resources: []
        text: "<html>\n<font color=\"orange\">\n\n## You're going to create a program\
          \ that plays Hang Man!\n\n</font>\n<center>\nRun hangman.jar to play the\
          \ finished product.\n</center>\n```\n\nStep 1: When the program starts,\
          \ it will ask the user for a number (up to the total words in the file).\
          \ Then the \n        program will read that many words from the \"dictionary.txt\"\
          \ file and push them to a Stack. \n        Use the readRandomLineFromFile\
          \ method in the Utilities class. The words should be selected randomly so\
          \ \n        not every game is played with the same set of words. You can\
          \ use the Stack's contains() method to make sure\n        there are no duplicate\
          \ words.\n\nStep 2: Pop the word off the top of the stack and use a JLabel\
          \ to display a blank line for all the characters in the word. \n       \
          \ Collect key inputs from the user. If the user guesses a letter, fill in\
          \ the blank space. Otherwise, take off a life.\n\n\t\t\nStep 3: When a word\
          \ has been solved, pop the next one off the stack and start a new round.\
          \ It is up to you if you want to \n        reset the lives.\n\nStep 4: If\
          \ they run out of lives, give them a game over message.\n\nStep 5: Don't\
          \ end the program on game over. Ask the user if they would like to play\
          \ again and run the game again with new \n\t    words if they choose yes.\n\
          ```\n</html>\n"
        title: 03 Hangman
    04_Maze_Maker:
      _readme: '<html>


        ###


        The end goal of this program is to use a depth first search algorithm to generate
        a random maze of any size.

        <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_complete.png?raw=true"
        width="300"/>


        ###


        First, complete the Maze class.


        ####


        The result of running the program now gives us only a grid.

        <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_incomplete.png?raw=true"
        width="300"/>


        ####


        In the MazeMaker class, complete the generateMaze method, selectNextPath method,
        the removeWalls method, and the getUnvisitedNeighbors method to generate a
        random maze.


        #####


        getUnvisitedNeighbors takes in a cell. It returns all the neighbors of the
        cell who have NOT yet been visited as an ArrayList.

        removeWalls takes in two cells. It then figures out the relationship between
        the two cells and sets their shared walls to false. For example, If cell1
        is directly above cell2, the removeWalls will set cell1''s south wall to false
        and set cell2''s north wall to false.

        selectNextPath is a recursive method that uses the depth first search alogorithm
        to determine which walls to remove.

        generateMaze will create a maze with the given dimensions, select a cell at
        random, and call the selectNextPath method using that random cell.


        ####


        When the maze maker is generating correct mazes, pick a random cell along
        the border and remove its exterior wall. This will be the starting point.
        Then select a random cell along the opposite wall and remove its exterior
        wall. This will be the finish line.

        <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_with_exit.png?raw=true"
        width="300"/>

        </html>

        '
      assignments:
      - assignment: 04_Maze_Maker
        dir: levels/Level3/Module4/src/_04_Maze_Maker
        lesson: 04_Maze_Maker
        level: Level3
        module: Module4
        oassignment: 04_Maze_Maker
        opath: levels/Level3/Module4/src/_04_Maze_Maker
        resources:
        - levels/Level3/Module4/src/_04_Maze_Maker/.web/maze_incomplete.png
        - levels/Level3/Module4/src/_04_Maze_Maker/.web/maze_complete.png
        - levels/Level3/Module4/src/_04_Maze_Maker/.web/maze_with_exit.png
        text: '<html>


          ###


          The end goal of this program is to use a depth first search algorithm to
          generate a random maze of any size.

          <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_complete.png?raw=true"
          width="300"/>


          ###


          First, complete the Maze class.


          ####


          The result of running the program now gives us only a grid.

          <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_incomplete.png?raw=true"
          width="300"/>


          ####


          In the MazeMaker class, complete the generateMaze method, selectNextPath
          method, the removeWalls method, and the getUnvisitedNeighbors method to
          generate a random maze.


          #####


          getUnvisitedNeighbors takes in a cell. It returns all the neighbors of the
          cell who have NOT yet been visited as an ArrayList.

          removeWalls takes in two cells. It then figures out the relationship between
          the two cells and sets their shared walls to false. For example, If cell1
          is directly above cell2, the removeWalls will set cell1''s south wall to
          false and set cell2''s north wall to false.

          selectNextPath is a recursive method that uses the depth first search alogorithm
          to determine which walls to remove.

          generateMaze will create a maze with the given dimensions, select a cell
          at random, and call the selectNextPath method using that random cell.


          ####


          When the maze maker is generating correct mazes, pick a random cell along
          the border and remove its exterior wall. This will be the starting point.
          Then select a random cell along the opposite wall and remove its exterior
          wall. This will be the finish line.

          <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_with_exit.png?raw=true"
          width="300"/>

          </html>

          '
        title: 04 Maze Maker
    _readme: '# Level3-Module4

      '
  Module5:
    00_Intro_To_Recursion:
      _readme: '# 00 Intro To Recursion


        '
      assignments:
      - assignment: 00_Intro_To_Recursion
        dir: levels/Level3/Module5/src/_00_Intro_To_Recursion
        lesson: 00_Intro_To_Recursion
        level: Level3
        module: Module5
        oassignment: 00_Intro_To_Recursion
        opath: levels/Level3/Module5/src/_00_Intro_To_Recursion
        resources: []
        text: '# 00 Intro To Recursion


          '
        title: 00 Intro To Recursion
    01_StringTrimmer:
      _readme: '# 01 Stringtrimmer


        '
      assignments:
      - assignment: 01_StringTrimmer
        dir: levels/Level3/Module5/src/_01_StringTrimmer
        lesson: 01_StringTrimmer
        level: Level3
        module: Module5
        oassignment: 01_StringTrimmer
        opath: levels/Level3/Module5/src/_01_StringTrimmer
        resources: []
        text: '# 01 Stringtrimmer


          '
        title: 01 Stringtrimmer
    02_RecursionMath:
      _readme: '# 02 Recursionmath


        '
      assignments:
      - assignment: 02_RecursionMath
        dir: levels/Level3/Module5/src/_02_RecursionMath
        lesson: 02_RecursionMath
        level: Level3
        module: Module5
        oassignment: 02_RecursionMath
        opath: levels/Level3/Module5/src/_02_RecursionMath
        resources: []
        text: '# 02 Recursionmath


          '
        title: 02 Recursionmath
    _readme: '# Level3-Module5

      '
  _readme: '# Level3


    '
Level4:
  Module0:
    00_Intro_To_2D_Arrays:
      _readme: '# 00 Intro To 2D Arrays


        '
      assignments:
      - assignment: 00_Intro_To_2D_Arrays
        dir: levels/Level4/Module0/src/_00_Intro_To_2D_Arrays
        lesson: 00_Intro_To_2D_Arrays
        level: Level4
        module: Module0
        oassignment: 00_Intro_To_2D_Arrays
        opath: levels/Level4/Module0/src/_00_Intro_To_2D_Arrays
        resources: []
        text: '# 00 Intro To 2D Arrays


          '
        title: 00 Intro To 2D Arrays
    01_Crazy_Digital_Painting:
      _readme: '# 01 Crazy Digital Painting


        '
      assignments:
      - assignment: 01_Crazy_Digital_Painting
        dir: levels/Level4/Module0/src/_01_Crazy_Digital_Painting
        lesson: 01_Crazy_Digital_Painting
        level: Level4
        module: Module0
        oassignment: 01_Crazy_Digital_Painting
        opath: levels/Level4/Module0/src/_01_Crazy_Digital_Painting
        resources: []
        text: '# 01 Crazy Digital Painting


          '
        title: 01 Crazy Digital Painting
    02_Pixel_Art:
      _readme: '# 02 Pixel Art


        '
      assignments:
      - assignment: 02_Pixel_Art
        dir: levels/Level4/Module0/src/_02_Pixel_Art
        lesson: 02_Pixel_Art
        level: Level4
        module: Module0
        oassignment: 02_Pixel_Art
        opath: levels/Level4/Module0/src/_02_Pixel_Art
        resources: []
        text: '# 02 Pixel Art


          '
        title: 02 Pixel Art
    03_Conways_Game_of_Life:
      _readme: '# 03 Conways Game Of Life


        '
      assignments:
      - assignment: 03_Conways_Game_of_Life
        dir: levels/Level4/Module0/src/_03_Conways_Game_of_Life
        lesson: 03_Conways_Game_of_Life
        level: Level4
        module: Module0
        oassignment: 03_Conways_Game_of_Life
        opath: levels/Level4/Module0/src/_03_Conways_Game_of_Life
        resources: []
        text: '# 03 Conways Game Of Life


          '
        title: 03 Conways Game Of Life
    04_Maze_Maker:
      _readme: '<html>


        ###


        The end goal of this program is to use a depth first search algorithm to generate
        a random maze of any size.

        <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_complete.png?raw=true"
        width="300"/>


        ###


        First, complete the Maze class.


        ####


        The result of running the program now gives us only a grid.

        <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_incomplete.png?raw=true"
        width="300"/>


        ####


        In the MazeMaker class, complete the generateMaze method, selectNextPath method,
        the removeWalls method, and the getUnvisitedNeighbors method to generate a
        random maze.


        #####


        getUnvisitedNeighbors takes in a cell. It returns all the neighbors of the
        cell who have NOT yet been visited as an ArrayList.

        removeWalls takes in two cells. It then figures out the relationship between
        the two cells and sets their shared walls to false. For example, If cell1
        is directly above cell2, the removeWalls will set cell1''s south wall to false
        and set cell2''s north wall to false.

        selectNextPath is a recursive method that uses the depth first search alogorithm
        to determine which walls to remove.

        generateMaze will create a maze with the given dimensions, select a cell at
        random, and call the selectNextPath method using that random cell.


        ####


        When the maze maker is generating correct mazes, pick a random cell along
        the border and remove its exterior wall. This will be the starting point.
        Then select a random cell along the opposite wall and remove its exterior
        wall. This will be the finish line.

        <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_with_exit.png?raw=true"
        width="300"/>

        </html>

        '
      assignments:
      - assignment: 04_Maze_Maker
        dir: levels/Level4/Module0/src/_04_Maze_Maker
        lesson: 04_Maze_Maker
        level: Level4
        module: Module0
        oassignment: 04_Maze_Maker
        opath: levels/Level4/Module0/src/_04_Maze_Maker
        resources:
        - levels/Level4/Module0/src/_04_Maze_Maker/.web/maze_incomplete.png
        - levels/Level4/Module0/src/_04_Maze_Maker/.web/maze_complete.png
        - levels/Level4/Module0/src/_04_Maze_Maker/.web/maze_with_exit.png
        text: '<html>


          ###


          The end goal of this program is to use a depth first search algorithm to
          generate a random maze of any size.

          <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_complete.png?raw=true"
          width="300"/>


          ###


          First, complete the Maze class.


          ####


          The result of running the program now gives us only a grid.

          <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_incomplete.png?raw=true"
          width="300"/>


          ####


          In the MazeMaker class, complete the generateMaze method, selectNextPath
          method, the removeWalls method, and the getUnvisitedNeighbors method to
          generate a random maze.


          #####


          getUnvisitedNeighbors takes in a cell. It returns all the neighbors of the
          cell who have NOT yet been visited as an ArrayList.

          removeWalls takes in two cells. It then figures out the relationship between
          the two cells and sets their shared walls to false. For example, If cell1
          is directly above cell2, the removeWalls will set cell1''s south wall to
          false and set cell2''s north wall to false.

          selectNextPath is a recursive method that uses the depth first search alogorithm
          to determine which walls to remove.

          generateMaze will create a maze with the given dimensions, select a cell
          at random, and call the selectNextPath method using that random cell.


          ####


          When the maze maker is generating correct mazes, pick a random cell along
          the border and remove its exterior wall. This will be the starting point.
          Then select a random cell along the opposite wall and remove its exterior
          wall. This will be the finish line.

          <img height="300" src="https://github.com/League-level4/League-level4.github.io/blob/master/maze_with_exit.png?raw=true"
          width="300"/>

          </html>

          '
        title: 04 Maze Maker
    extras:
      _readme: ''
      assignments:
      - assignment: extras
        dir: levels/Level4/Module0/src/extras/the_wrong_way_cow
        lesson: extras
        level: Level4
        module: Module0
        oassignment: the_wrong_way_cow
        opath: levels/Level4/Module0/src/extras/the_wrong_way_cow
        resources: []
        text: '# Extras The Wrong Way Cow


          '
        title: Extras
  Module1:
    00_Intro_To_Generics:
      _readme: '# 00 Intro To Generics


        '
      assignments:
      - assignment: 00_Intro_To_Generics
        dir: levels/Level4/Module1/src/_00_Intro_To_Generics
        lesson: 00_Intro_To_Generics
        level: Level4
        module: Module1
        oassignment: 00_Intro_To_Generics
        opath: levels/Level4/Module1/src/_00_Intro_To_Generics
        resources: []
        text: '# 00 Intro To Generics


          '
        title: 00 Intro To Generics
    01_Custom_ArrayList:
      _readme: '# 01 Custom Arraylist


        '
      assignments:
      - assignment: 01_Custom_ArrayList
        dir: levels/Level4/Module1/src/_01_Custom_ArrayList
        lesson: 01_Custom_ArrayList
        level: Level4
        module: Module1
        oassignment: 01_Custom_ArrayList
        opath: levels/Level4/Module1/src/_01_Custom_ArrayList
        resources: []
        text: '# 01 Custom Arraylist


          '
        title: 01 Custom Arraylist
    02_Intro_to_Switch_Statements:
      _readme: '# 02 Intro To Switch Statements


        '
      assignments:
      - assignment: 02_Intro_to_Switch_Statements
        dir: levels/Level4/Module1/src/_02_Intro_to_Switch_Statements
        lesson: 02_Intro_to_Switch_Statements
        level: Level4
        module: Module1
        oassignment: 02_Intro_to_Switch_Statements
        opath: levels/Level4/Module1/src/_02_Intro_to_Switch_Statements
        resources: []
        text: '# 02 Intro To Switch Statements


          '
        title: 02 Intro To Switch Statements
    03_Switch_Statement_Practice:
      _readme: '# 03 Switch Statement Practice


        '
      assignments:
      - assignment: 03_Switch_Statement_Practice
        dir: levels/Level4/Module1/src/_03_Switch_Statement_Practice
        lesson: 03_Switch_Statement_Practice
        level: Level4
        module: Module1
        oassignment: 03_Switch_Statement_Practice
        opath: levels/Level4/Module1/src/_03_Switch_Statement_Practice
        resources: []
        text: '# 03 Switch Statement Practice


          '
        title: 03 Switch Statement Practice
    04_Intro_To_Enums:
      _readme: '# 04 Intro To Enums


        '
      assignments:
      - assignment: 04_Intro_To_Enums
        dir: levels/Level4/Module1/src/_04_Intro_To_Enums
        lesson: 04_Intro_To_Enums
        level: Level4
        module: Module1
        oassignment: 04_Intro_To_Enums
        opath: levels/Level4/Module1/src/_04_Intro_To_Enums
        resources: []
        text: '# 04 Intro To Enums


          '
        title: 04 Intro To Enums
    05_Enum_Stuff:
      _readme: '# 05 Enum Stuff


        '
      assignments:
      - assignment: 05_Enum_Stuff
        dir: levels/Level4/Module1/src/_05_Enum_Stuff
        lesson: 05_Enum_Stuff
        level: Level4
        module: Module1
        oassignment: 05_Enum_Stuff
        opath: levels/Level4/Module1/src/_05_Enum_Stuff
        resources: []
        text: '# 05 Enum Stuff


          '
        title: 05 Enum Stuff
    06_Snake:
      _readme: '# 06 Snake


        '
      assignments:
      - assignment: 06_Snake
        dir: levels/Level4/Module1/src/_06_Snake
        lesson: 06_Snake
        level: Level4
        module: Module1
        oassignment: 06_Snake
        opath: levels/Level4/Module1/src/_06_Snake
        resources: []
        text: '# 06 Snake


          '
        title: 06 Snake
  Module2:
    StringMethods:
      _readme: '# Stringmethods


        '
      assignments:
      - assignment: StringMethods
        dir: levels/Level4/Module2/src/StringMethods
        lesson: StringMethods
        level: Level4
        module: Module2
        oassignment: StringMethods
        opath: levels/Level4/Module2/src/StringMethods
        resources: []
        text: '# Stringmethods


          '
        title: Stringmethods
    _readme: '# Level4-Module2

      '
  Module3:
    01_introduction:
      _readme: '# 01 Introduction


        '
      assignments:
      - assignment: 01_introduction
        dir: levels/Level4/Module3/src/_01_introduction
        lesson: 01_introduction
        level: Level4
        module: Module3
        oassignment: 01_introduction
        opath: levels/Level4/Module3/src/_01_introduction
        resources: []
        text: '# 01 Introduction


          '
        title: 01 Introduction
    02_gotta_catchem_all:
      _readme: '# 02 Gotta Catchem All


        '
      assignments:
      - assignment: 02_gotta_catchem_all
        dir: levels/Level4/Module3/src/_02_gotta_catchem_all
        lesson: 02_gotta_catchem_all
        level: Level4
        module: Module3
        oassignment: 02_gotta_catchem_all
        opath: levels/Level4/Module3/src/_02_gotta_catchem_all
        resources: []
        text: '# 02 Gotta Catchem All


          '
        title: 02 Gotta Catchem All
  Module4:
    01_introduction_to_encapsulation:
      _readme: '# 01 Introduction To Encapsulation


        '
      assignments:
      - assignment: 01_introduction_to_encapsulation
        dir: levels/Level4/Module4/src/_01_introduction_to_encapsulation
        lesson: 01_introduction_to_encapsulation
        level: Level4
        module: Module4
        oassignment: 01_introduction_to_encapsulation
        opath: levels/Level4/Module4/src/_01_introduction_to_encapsulation
        resources: []
        text: '# 01 Introduction To Encapsulation


          '
        title: 01 Introduction To Encapsulation
    02_introduction_to_polymorphism:
      _readme: '# 02 Introduction To Polymorphism


        '
      assignments:
      - assignment: 02_introduction_to_polymorphism
        dir: levels/Level4/Module4/src/_02_introduction_to_polymorphism
        lesson: 02_introduction_to_polymorphism
        level: Level4
        module: Module4
        oassignment: 02_introduction_to_polymorphism
        opath: levels/Level4/Module4/src/_02_introduction_to_polymorphism
        resources: []
        text: '# 02 Introduction To Polymorphism


          '
        title: 02 Introduction To Polymorphism
    03_polymorphs:
      _readme: '# 03 Polymorphs


        '
      assignments:
      - assignment: 03_polymorphs
        dir: levels/Level4/Module4/src/_03_polymorphs
        lesson: 03_polymorphs
        level: Level4
        module: Module4
        oassignment: 03_polymorphs
        opath: levels/Level4/Module4/src/_03_polymorphs
        resources: []
        text: '# 03 Polymorphs


          '
        title: 03 Polymorphs
    04_hospital:
      _readme: '# 04 Hospital


        '
      assignments:
      - assignment: 04_hospital
        dir: levels/Level4/Module4/src/_04_hospital
        lesson: 04_hospital
        level: Level4
        module: Module4
        oassignment: 04_hospital
        opath: levels/Level4/Module4/src/_04_hospital
        resources: []
        text: '# 04 Hospital


          '
        title: 04 Hospital
  Module5:
    00_intro_to_Linked_Lists_EMPTY:
      _readme: '# 00 Intro To Linked Lists Empty


        '
      assignments:
      - assignment: 00_intro_to_Linked_Lists_EMPTY
        dir: levels/Level4/Module5/src/_00_intro_to_Linked_Lists_EMPTY
        lesson: 00_intro_to_Linked_Lists_EMPTY
        level: Level4
        module: Module5
        oassignment: 00_intro_to_Linked_Lists_EMPTY
        opath: levels/Level4/Module5/src/_00_intro_to_Linked_Lists_EMPTY
        resources: []
        text: '# 00 Intro To Linked Lists Empty


          '
        title: 00 Intro To Linked Lists Empty
    01_intro_to_binary_trees_EMPTY:
      _readme: '# 01 Intro To Binary Trees Empty


        '
      assignments:
      - assignment: 01_intro_to_binary_trees_EMPTY
        dir: levels/Level4/Module5/src/_01_intro_to_binary_trees_EMPTY
        lesson: 01_intro_to_binary_trees_EMPTY
        level: Level4
        module: Module5
        oassignment: 01_intro_to_binary_trees_EMPTY
        opath: levels/Level4/Module5/src/_01_intro_to_binary_trees_EMPTY
        resources: []
        text: '# 01 Intro To Binary Trees Empty


          '
        title: 01 Intro To Binary Trees Empty
  _readme: '# Level4


    '
Level5:
  Module0:
    00_JButtons_with_Lambdas:
      _readme: '# 00 Jbuttons With Lambdas


        '
      assignments:
      - assignment: 00_JButtons_with_Lambdas
        dir: levels/Level5/Module0/src/_00_JButtons_with_Lambdas
        lesson: 00_JButtons_with_Lambdas
        level: Level5
        module: Module0
        oassignment: 00_JButtons_with_Lambdas
        opath: levels/Level5/Module0/src/_00_JButtons_with_Lambdas
        resources: []
        text: '# 00 Jbuttons With Lambdas


          '
        title: 00 Jbuttons With Lambdas
      - assignment: 00_JButtons_with_Lambdas
        dir: levels/Level5/Module0/src/_00_JButtons_with_Lambdas/interfaces
        lesson: 00_JButtons_with_Lambdas
        level: Level5
        module: Module0
        oassignment: interfaces
        opath: levels/Level5/Module0/src/_00_JButtons_with_Lambdas/interfaces
        resources: []
        text: '# 00 Jbuttons With Lambdas Interfaces


          '
        title: 00 Jbuttons With Lambdas
    01_Lambda_Methods:
      _readme: '# 01 Lambda Methods


        '
      assignments:
      - assignment: 01_Lambda_Methods
        dir: levels/Level5/Module0/src/_01_Lambda_Methods
        lesson: 01_Lambda_Methods
        level: Level5
        module: Module0
        oassignment: 01_Lambda_Methods
        opath: levels/Level5/Module0/src/_01_Lambda_Methods
        resources: []
        text: '# 01 Lambda Methods


          '
        title: 01 Lambda Methods
    02_Intro_To_Streams:
      _readme: '# 02 Intro To Streams


        '
      assignments:
      - assignment: 02_Intro_To_Streams
        dir: levels/Level5/Module0/src/_02_Intro_To_Streams
        lesson: 02_Intro_To_Streams
        level: Level5
        module: Module0
        oassignment: 02_Intro_To_Streams
        opath: levels/Level5/Module0/src/_02_Intro_To_Streams
        resources: []
        text: '# 02 Intro To Streams


          '
        title: 02 Intro To Streams
    03_Sorting_With_Streams:
      _readme: '# 03 Sorting With Streams


        '
      assignments:
      - assignment: 03_Sorting_With_Streams
        dir: levels/Level5/Module0/src/_03_Sorting_With_Streams
        lesson: 03_Sorting_With_Streams
        level: Level5
        module: Module0
        oassignment: 03_Sorting_With_Streams
        opath: levels/Level5/Module0/src/_03_Sorting_With_Streams
        resources: []
        text: '# 03 Sorting With Streams


          '
        title: 03 Sorting With Streams
    04_Searching_With_Streams:
      _readme: '# 04 Searching With Streams


        '
      assignments:
      - assignment: 04_Searching_With_Streams
        dir: levels/Level5/Module0/src/_04_Searching_With_Streams
        lesson: 04_Searching_With_Streams
        level: Level5
        module: Module0
        oassignment: 04_Searching_With_Streams
        opath: levels/Level5/Module0/src/_04_Searching_With_Streams
        resources: []
        text: '# 04 Searching With Streams


          '
        title: 04 Searching With Streams
    05_Minesweeper:
      _readme: '# 05 Minesweeper


        '
      assignments:
      - assignment: 05_Minesweeper
        dir: levels/Level5/Module0/src/_05_Minesweeper
        lesson: 05_Minesweeper
        level: Level5
        module: Module0
        oassignment: 05_Minesweeper
        opath: levels/Level5/Module0/src/_05_Minesweeper
        resources: []
        text: '# 05 Minesweeper


          '
        title: 05 Minesweeper
  Module1:
    00_Intro_To_File_Input_and_Output:
      _readme: '# 00 Intro To File Input And Output


        '
      assignments:
      - assignment: 00_Intro_To_File_Input_and_Output
        dir: levels/Level5/Module1/src/_00_Intro_To_File_Input_and_Output
        lesson: 00_Intro_To_File_Input_and_Output
        level: Level5
        module: Module1
        oassignment: 00_Intro_To_File_Input_and_Output
        opath: levels/Level5/Module1/src/_00_Intro_To_File_Input_and_Output
        resources: []
        text: '# 00 Intro To File Input And Output


          '
        title: 00 Intro To File Input And Output
    01_File_Recorder:
      _readme: '# 01 File Recorder


        '
      assignments:
      - assignment: 01_File_Recorder
        dir: levels/Level5/Module1/src/_01_File_Recorder
        lesson: 01_File_Recorder
        level: Level5
        module: Module1
        oassignment: 01_File_Recorder
        opath: levels/Level5/Module1/src/_01_File_Recorder
        resources: []
        text: '# 01 File Recorder


          '
        title: 01 File Recorder
    02_File_Encrypt_Decrypt:
      _readme: '# 02 File Encrypt Decrypt


        '
      assignments:
      - assignment: 02_File_Encrypt_Decrypt
        dir: levels/Level5/Module1/src/_02_File_Encrypt_Decrypt
        lesson: 02_File_Encrypt_Decrypt
        level: Level5
        module: Module1
        oassignment: 02_File_Encrypt_Decrypt
        opath: levels/Level5/Module1/src/_02_File_Encrypt_Decrypt
        resources: []
        text: '# 02 File Encrypt Decrypt


          '
        title: 02 File Encrypt Decrypt
    03_To_Do_List:
      _readme: '# 03 To Do List


        '
      assignments:
      - assignment: 03_To_Do_List
        dir: levels/Level5/Module1/src/_03_To_Do_List
        lesson: 03_To_Do_List
        level: Level5
        module: Module1
        oassignment: 03_To_Do_List
        opath: levels/Level5/Module1/src/_03_To_Do_List
        resources: []
        text: '# 03 To Do List


          '
        title: 03 To Do List
    04_Directory_Iteration:
      _readme: '# 04 Directory Iteration


        '
      assignments:
      - assignment: 04_Directory_Iteration
        dir: levels/Level5/Module1/src/_04_Directory_Iteration
        lesson: 04_Directory_Iteration
        level: Level5
        module: Module1
        oassignment: 04_Directory_Iteration
        opath: levels/Level5/Module1/src/_04_Directory_Iteration
        resources: []
        text: '# 04 Directory Iteration


          '
        title: 04 Directory Iteration
    99_extras:
      _readme: ''
      assignments:
      - assignment: 99_extras
        dir: levels/Level5/Module1/src/_99_extras/Pixel_Art_Save_State
        lesson: 99_extras
        level: Level5
        module: Module1
        oassignment: Pixel_Art_Save_State
        opath: levels/Level5/Module1/src/_99_extras/Pixel_Art_Save_State
        resources: []
        text: '<html>


          ###


          Modify the Pixel Art Maker program you created in Level 4.

          Add a save button that will save the state of the image. When the program
          is started,

          it should load the image from the file and display it on the grid.


          If you have not completed the Pixel Art Maker program, now would be a great
          time to do so.

          </html>

          '
        title: 99 Extras
      - assignment: 99_extras
        dir: levels/Level5/Module1/src/_99_extras/Serialization
        lesson: 99_extras
        level: Level5
        module: Module1
        oassignment: Serialization
        opath: levels/Level5/Module1/src/_99_extras/Serialization
        resources: []
        text: '# 99 Extras Serialization


          '
        title: 99 Extras
  Module2:
    00_Thread_Demo:
      _readme: '# 00 Thread Demo


        '
      assignments:
      - assignment: 00_Thread_Demo
        dir: levels/Level5/Module2/src/_00_Thread_Demo
        lesson: 00_Thread_Demo
        level: Level5
        module: Module2
        oassignment: 00_Thread_Demo
        opath: levels/Level5/Module2/src/_00_Thread_Demo
        resources: []
        text: '# 00 Thread Demo


          '
        title: 00 Thread Demo
    01_Olympic_Rings:
      _readme: '# 01 Olympic Rings


        '
      assignments:
      - assignment: 01_Olympic_Rings
        dir: levels/Level5/Module2/src/_01_Olympic_Rings
        lesson: 01_Olympic_Rings
        level: Level5
        module: Module2
        oassignment: 01_Olympic_Rings
        opath: levels/Level5/Module2/src/_01_Olympic_Rings
        resources: []
        text: '# 01 Olympic Rings


          '
        title: 01 Olympic Rings
    02_Advanced_Robot_Race:
      _readme: '# 02 Advanced Robot Race


        '
      assignments:
      - assignment: 02_Advanced_Robot_Race
        dir: levels/Level5/Module2/src/_02_Advanced_Robot_Race
        lesson: 02_Advanced_Robot_Race
        level: Level5
        module: Module2
        oassignment: 02_Advanced_Robot_Race
        opath: levels/Level5/Module2/src/_02_Advanced_Robot_Race
        resources: []
        text: '# 02 Advanced Robot Race


          '
        title: 02 Advanced Robot Race
    03_Threaded_Greeting:
      _readme: '# 03 Threaded Greeting


        '
      assignments:
      - assignment: 03_Threaded_Greeting
        dir: levels/Level5/Module2/src/_03_Threaded_Greeting
        lesson: 03_Threaded_Greeting
        level: Level5
        module: Module2
        oassignment: 03_Threaded_Greeting
        opath: levels/Level5/Module2/src/_03_Threaded_Greeting
        resources: []
        text: '# 03 Threaded Greeting


          '
        title: 03 Threaded Greeting
    04_Thread_Pool:
      _readme: '# 04 Thread Pool


        '
      assignments:
      - assignment: 04_Thread_Pool
        dir: levels/Level5/Module2/src/_04_Thread_Pool
        lesson: 04_Thread_Pool
        level: Level5
        module: Module2
        oassignment: 04_Thread_Pool
        opath: levels/Level5/Module2/src/_04_Thread_Pool
        resources: []
        text: '# 04 Thread Pool


          '
        title: 04 Thread Pool
    05_Synchronized_Swimming:
      _readme: '# 05 Synchronized Swimming


        '
      assignments:
      - assignment: 05_Synchronized_Swimming
        dir: levels/Level5/Module2/src/_05_Synchronized_Swimming
        lesson: 05_Synchronized_Swimming
        level: Level5
        module: Module2
        oassignment: 05_Synchronized_Swimming
        opath: levels/Level5/Module2/src/_05_Synchronized_Swimming
        resources: []
        text: '# 05 Synchronized Swimming


          '
        title: 05 Synchronized Swimming
    06_Wait_and_Notify:
      _readme: ''
      assignments:
      - assignment: 06_Wait_and_Notify
        dir: levels/Level5/Module2/src/_06_Wait_and_Notify/Example
        lesson: 06_Wait_and_Notify
        level: Level5
        module: Module2
        oassignment: Example
        opath: levels/Level5/Module2/src/_06_Wait_and_Notify/Example
        resources: []
        text: '# 06 Wait And Notify Example


          '
        title: 06 Wait And Notify
      - assignment: 06_Wait_and_Notify
        dir: levels/Level5/Module2/src/_06_Wait_and_Notify/Practice
        lesson: 06_Wait_and_Notify
        level: Level5
        module: Module2
        oassignment: Practice
        opath: levels/Level5/Module2/src/_06_Wait_and_Notify/Practice
        resources: []
        text: '# 06 Wait And Notify Practice


          '
        title: 06 Wait And Notify
  Module3:
    00_Click_Chat:
      _readme: ''
      assignments:
      - assignment: 00_Click_Chat
        dir: levels/Level5/Module3/src/_00_Click_Chat/gui
        lesson: 00_Click_Chat
        level: Level5
        module: Module3
        oassignment: gui
        opath: levels/Level5/Module3/src/_00_Click_Chat/gui
        resources: []
        text: '# 00 Click Chat Gui


          '
        title: 00 Click Chat
      - assignment: 00_Click_Chat
        dir: levels/Level5/Module3/src/_00_Click_Chat/networking
        lesson: 00_Click_Chat
        level: Level5
        module: Module3
        oassignment: networking
        opath: levels/Level5/Module3/src/_00_Click_Chat/networking
        resources: []
        text: '# 00 Click Chat Networking


          '
        title: 00 Click Chat
    01_Intro_To_Sockets:
      _readme: ''
      assignments:
      - assignment: 01_Intro_To_Sockets
        dir: levels/Level5/Module3/src/_01_Intro_To_Sockets/client
        lesson: 01_Intro_To_Sockets
        level: Level5
        module: Module3
        oassignment: client
        opath: levels/Level5/Module3/src/_01_Intro_To_Sockets/client
        resources: []
        text: '# 01 Intro To Sockets Client


          '
        title: 01 Intro To Sockets
      - assignment: 01_Intro_To_Sockets
        dir: levels/Level5/Module3/src/_01_Intro_To_Sockets/server
        lesson: 01_Intro_To_Sockets
        level: Level5
        module: Module3
        oassignment: server
        opath: levels/Level5/Module3/src/_01_Intro_To_Sockets/server
        resources: []
        text: '# 01 Intro To Sockets Server


          '
        title: 01 Intro To Sockets
    02_Chat_Application:
      _readme: '# 02 Chat Application


        '
      assignments:
      - assignment: 02_Chat_Application
        dir: levels/Level5/Module3/src/_02_Chat_Application
        lesson: 02_Chat_Application
        level: Level5
        module: Module3
        oassignment: 02_Chat_Application
        opath: levels/Level5/Module3/src/_02_Chat_Application
        resources: []
        text: '# 02 Chat Application


          '
        title: 02 Chat Application
  Module4:
    00_Binary_Conversion:
      _readme: '# 00 Binary Conversion


        '
      assignments:
      - assignment: 00_Binary_Conversion
        dir: levels/Level5/Module4/src/_00_Binary_Conversion
        lesson: 00_Binary_Conversion
        level: Level5
        module: Module4
        oassignment: 00_Binary_Conversion
        opath: levels/Level5/Module4/src/_00_Binary_Conversion
        resources: []
        text: '# 00 Binary Conversion


          '
        title: 00 Binary Conversion
    01_Bit_Shifting:
      _readme: '# 01 Bit Shifting


        '
      assignments:
      - assignment: 01_Bit_Shifting
        dir: levels/Level5/Module4/src/_01_Bit_Shifting
        lesson: 01_Bit_Shifting
        level: Level5
        module: Module4
        oassignment: 01_Bit_Shifting
        opath: levels/Level5/Module4/src/_01_Bit_Shifting
        resources: []
        text: '# 01 Bit Shifting


          '
        title: 01 Bit Shifting
    02_AND_OR_and_XOR:
      _readme: '# 02 And Or And Xor


        '
      assignments:
      - assignment: 02_AND_OR_and_XOR
        dir: levels/Level5/Module4/src/_02_AND_OR_and_XOR
        lesson: 02_AND_OR_and_XOR
        level: Level5
        module: Module4
        oassignment: 02_AND_OR_and_XOR
        opath: levels/Level5/Module4/src/_02_AND_OR_and_XOR
        resources: []
        text: '# 02 And Or And Xor


          '
        title: 02 And Or And Xor
    03_Printing_Binary:
      _readme: '# 03 Printing Binary


        '
      assignments:
      - assignment: 03_Printing_Binary
        dir: levels/Level5/Module4/src/_03_Printing_Binary
        lesson: 03_Printing_Binary
        level: Level5
        module: Module4
        oassignment: 03_Printing_Binary
        opath: levels/Level5/Module4/src/_03_Printing_Binary
        resources: []
        text: '# 03 Printing Binary


          '
        title: 03 Printing Binary
    04_Light_Switches:
      _readme: '# 04 Light Switches


        '
      assignments:
      - assignment: 04_Light_Switches
        dir: levels/Level5/Module4/src/_04_Light_Switches
        lesson: 04_Light_Switches
        level: Level5
        module: Module4
        oassignment: 04_Light_Switches
        opath: levels/Level5/Module4/src/_04_Light_Switches
        resources: []
        text: '# 04 Light Switches


          '
        title: 04 Light Switches
    05_Base64_Decoder:
      _readme: '# 05 Base64 Decoder


        '
      assignments:
      - assignment: 05_Base64_Decoder
        dir: levels/Level5/Module4/src/_05_Base64_Decoder
        lesson: 05_Base64_Decoder
        level: Level5
        module: Module4
        oassignment: 05_Base64_Decoder
        opath: levels/Level5/Module4/src/_05_Base64_Decoder
        resources: []
        text: '# 05 Base64 Decoder


          '
        title: 05 Base64 Decoder
  _readme: '# Level5


    '
